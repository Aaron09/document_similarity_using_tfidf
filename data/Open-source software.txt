For a broader coverage related to this topic, see Open-source software movement.
Open-source software shares similarities with Free Software and is now part of the broader term Free and open-source software




A screenshot of Linux Mint running the Xfce desktop environment, Mozilla Firefox browsing Wikipedia powered by MediaWiki, a calculator program, the built in calendar, Vim, GIMP, and the VLC media player, all of which are open-source software.


Open-source software (OSS) is computer software with its source code made available with a license in which the copyright holder provides the rights to study, change, and distribute the software to anyone and for any purpose.[1] Open-source software may be developed in a collaborative public manner. According to scientists who studied it, open-source software is a prominent example of open collaboration.[2] The term is often written without a hyphen as "open source software".[3][4][5]
Open-source software development, or collaborative development from multiple independent sources, generates an increasingly more diverse scope of design perspective than any one company is capable of developing and sustaining long term. A 2008 report by the Standish Group states that adoption of open-source software models has resulted in savings of about $60 billion (£48 billion) per year to consumers.[6][7]



Contents


1 History

1.1 End of 1990s: Foundation of the Open Source Initiative


2 Definitions

2.1 Open-source software licensing
2.2 Certifications


3 Open-source software development

3.1 Development model
3.2 Advantages and disadvantages
3.3 Development tools
3.4 Organizations
3.5 Funding


4 Comparisons with other software licensing/development models

4.1 Closed source / proprietary software
4.2 Free software
4.3 Open-source versus source-available
4.4 Open-sourcing


5 Current applications and adoption

5.1 Widely used open-source software


6 Extensions for non-software use
7 See also
8 References
9 Further reading
10 External links



History[edit]
Further information: History of free and open source software
End of 1990s: Foundation of the Open Source Initiative[edit]
In the early days of computing, programmers and developers shared software in order to learn from each other and evolve the field of computing. Eventually the open source notion moved to the way side of commercialization of software in the years 1970-1980. In 1997, Eric Raymond published The Cathedral and the Bazaar, a reflective analysis of the hacker community and free software principles. The paper received significant attention in early 1998, and was one factor in motivating Netscape Communications Corporation to release their popular Netscape Communicator Internet suite as free software. This source code subsequently became the basis behind SeaMonkey, Mozilla Firefox, Thunderbird and KompoZer.
Netscape's act prompted Raymond and others to look into how to bring the Free Software Foundation's free software ideas and perceived benefits to the commercial software industry. They concluded that FSF's social activism was not appealing to companies like Netscape, and looked for a way to rebrand the free software movement to emphasize the business potential of sharing and collaborating on software source code.[8] The new term they chose was "open source", which was soon adopted by Bruce Perens, publisher Tim O'Reilly, Linus Torvalds, and others. The Open Source Initiative was founded in February 1998 to encourage use of the new term and evangelize open-source principles.[9]
While the Open Source Initiative sought to encourage the use of the new term and evangelize the principles it adhered to, commercial software vendors found themselves increasingly threatened by the concept of freely distributed software and universal access to an application's source code. A Microsoft executive publicly stated in 2001 that "open source is an intellectual property destroyer. I can't imagine something that could be worse than this for the software business and the intellectual-property business."[10] However, while free and open software (FOSS) has historically played a role outside of the mainstream of private software development, companies as large as Microsoft have begun to develop official open-source presences on the Internet. IBM, Oracle, Google and State Farm are just a few of the companies with a serious public stake in today's competitive open-source market. There has been a significant shift in the corporate philosophy concerning the development of FOSS.[11]
The free software movement was launched in 1983. In 1998, a group of individuals advocated that the term free software should be replaced by open-source software (OSS) as an expression which is less ambiguous[12][13][14] and more comfortable for the corporate world.[15] Software developers may want to publish their software with an open-source license, so that anybody may also develop the same software or understand its internal functioning. With open-source software, generally anyone is allowed to create modifications of it, port it to new operating systems and instruction set architectures, share it with others or, in some cases, market it. Scholars Casson and Ryan have pointed out several policy-based reasons for adoption of open source – in particular, the heightened value proposition from open source (when compared to most proprietary formats) in the following categories:

Security
Affordability
Transparency
Perpetuity
Interoperability
Flexibility
Localization—particularly in the context of local governments (who make software decisions). Casson and Ryan argue that "governments have an inherent responsibility and fiduciary duty to taxpayers" which includes the careful analysis of these factors when deciding to purchase proprietary software or implement an open-source option.[16]

The Open Source Definition, notably, presents an open-source philosophy, and further defines the terms of use, modification and redistribution of open-source software. Software licenses grant rights to users which would otherwise be reserved by copyright law to the copyright holder. Several open-source software licenses have qualified within the boundaries of the Open Source Definition. The most prominent and popular example is the GNU General Public License (GPL), which "allows free distribution under the condition that further developments and applications are put under the same licence", thus also free.[17]
The open source label came out of a strategy session held on April 7, 1998 in Palo Alto in reaction to Netscape's January 1998 announcement of a source code release for Navigator (as Mozilla). A group of individuals at the session included Tim O'Reilly, Linus Torvalds, Tom Paquin, Jamie Zawinski, Larry Wall, Brian Behlendorf, Sameer Parekh, Eric Allman, Greg Olson, Paul Vixie, John Ousterhout, Guido van Rossum, Philip Zimmermann, John Gilmore and Eric S. Raymond.[18] They used the opportunity before the release of Navigator's source code to clarify a potential confusion caused by the ambiguity of the word "free" in English.
Many people claimed that the birth of the Internet, since 1969, started the open source movement, while others do not distinguish between open-source and free software movements.[19]
The Free Software Foundation (FSF), started in 1985, intended the word "free" to mean freedom to distribute (or "free as in free speech") and not freedom from cost (or "free as in free beer"). Since a great deal of free software already was (and still is) free of charge, such free software became associated with zero cost, which seemed anti-commercial.[8]
The Open Source Initiative (OSI) was formed in February 1998 by Eric Raymond and Bruce Perens. With at least 20 years of evidence from case histories of closed software development versus open development already provided by the Internet developer community, the OSI presented the "open source" case to commercial businesses, like Netscape. The OSI hoped that the use of the label "open source", a term suggested by Peterson of the Foresight Institute at the strategy session, would eliminate ambiguity, particularly for individuals who perceive "free software" as anti-commercial. They sought to bring a higher profile to the practical benefits of freely available source code, and they wanted to bring major software businesses and other high-tech industries into open source. Perens attempted to register "open source" as a service mark for the OSI, but that attempt was impractical by trademark standards. Meanwhile, due to the presentation of Raymond's paper to the upper management at Netscape—Raymond only discovered when he read the Press Release,[20] and was called by Netscape CEO Jim Barksdale's PA later in the day—Netscape released its Navigator source code as open source, with favorable results.[21]
Definitions[edit]




The logo of the Open Source Initiative


The Open Source Initiative's (OSI) definition is recognized by governments internationally[22] as the standard or de facto definition. In addition, many of the world's largest open source software projects and contributors, including Debian, Drupal Association, FreeBSD Foundation, Linux Foundation, Mozilla Foundation, Wikimedia Foundation, Wordpress Foundation have committed[23] to upholding the OSI's mission and Open Source Definition through the OSI Affiliate Agreement.[24]
OSI uses The Open Source Definition to determine whether it considers a software license open source. The definition was based on the Debian Free Software Guidelines, written and adapted primarily by Perens.[25][26][27] Perens did not base his writing on the "four freedoms" from the Free Software Foundation (FSF), which were only widely available later.[28]
Under Perens' definition, open source describes a broad general type of software license that makes source code available to the general public with relaxed or non-existent restrictions on the use and modification of the code. It is an explicit "feature" of open source that it puts very few restrictions on the use or distribution by any organization or user, in order to enable the rapid evolution of the software.[29]
Despite initially accepting it,[30] Richard Stallman of the FSF now flatly opposes the term "Open Source" being applied to what they refer to as "free software". Although he agrees that the two terms describe "almost the same category of software", Stallman considers equating the terms incorrect and misleading.[31] Stallman also opposes the professed pragmatism of the Open Source Initiative, as he fears that the free software ideals of freedom and community are threatened by compromising on the FSF's idealistic standards for software freedom.[32] The FSF considers free software to be a subset of open source software, and Richard Stallman explained that DRM software, for example, can be developed as open source, despite that it does not give its users freedom (it restricts them), and thus doesn't qualify as free software.[33]
Open-source software licensing[edit]
Main article: Open-source license
Further information: Free software license
See also: Free and open-source software § Licensing, and Software license
When an author contributes code to an open-source project (e.g., Apache.org) they do so under an explicit license (e.g., the Apache Contributor License Agreement) or an implicit license (e.g. the open-source license under which the project is already licensing code). Some open-source projects do not take contributed code under a license, but actually require joint assignment of the author's copyright in order to accept code contributions into the project.[34]
Examples of free software license / open-source licenses include Apache License, BSD license, GNU General Public License, GNU Lesser General Public License, MIT License, Eclipse Public License and Mozilla Public License.
The proliferation of open-source licenses is a negative aspect of the open-source movement because it is often difficult to understand the legal implications of the differences between licenses. With more than 180,000 open-source projects available and more than 1400 unique licenses, the complexity of deciding how to manage open-source use within "closed-source" commercial enterprises has dramatically increased. Some are home-grown, while others are modeled after mainstream FOSS licenses such as Berkeley Software Distribution ("BSD"), Apache, MIT-style (Massachusetts Institute of Technology), or GNU General Public License ("GPL"). In view of this, open-source practitioners are starting to use classification schemes in which FOSS licenses are grouped (typically based on the existence and obligations imposed by the copyleft provision; the strength of the copyleft provision).[35]
An important legal milestone for the open source / free software movement was passed in 2008, when the US federal appeals court ruled that free software licenses definitely do set legally binding conditions on the use of copyrighted work, and they are therefore enforceable under existing copyright law. As a result, if end-users violate the licensing conditions, their license disappears, meaning they are infringing copyright.[36] Despite this licensing risk, most commercial software vendors are using open source software in commercial products while fulfilling the license terms, e.g. leveraging the Apache license.[37]
Certifications[edit]
Certification can help to build user confidence. Certification could be applied to the simplest component, to a whole software system. The United Nations University International Institute for Software Technology,[38] initiated a project known as "The Global Desktop Project". This project aims to build a desktop interface that every end-user is able to understand and interact with, thus crossing the language and cultural barriers. The project would improve developing nations' access to information systems. UNU/IIST hopes to achieve this without any compromise in the quality of the software by introducing certifications.[39]
Open-source software development[edit]
Main article: Open-source software development model
Development model[edit]
In his 1997 essay The Cathedral and the Bazaar,[40] open-source evangelist Eric S. Raymond suggests a model for developing OSS known as the bazaar model. Raymond likens the development of software by traditional methodologies to building a cathedral, "carefully crafted by individual wizards or small bands of mages working in splendid isolation".[40] He suggests that all software should be developed using the bazaar style, which he described as "a great babbling bazaar of differing agendas and approaches."[40]
In the traditional model of development, which he called the cathedral model, development takes place in a centralized way. Roles are clearly defined. Roles include people dedicated to designing (the architects), people responsible for managing the project, and people responsible for implementation. Traditional software engineering follows the cathedral model.
The bazaar model, however, is different. In this model, roles are not clearly defined. Gregorio Robles[41] suggests that software developed using the bazaar model should exhibit the following patterns:

Users should be treated as co-developers
The users are treated like co-developers and so they should have access to the source code of the software. Furthermore, users are encouraged to submit additions to the software, code fixes for the software, bug reports, documentation etc. Having more co-developers increases the rate at which the software evolves. Linus's law states, "Given enough eyeballs all bugs are shallow." This means that if many users view the source code, they will eventually find all bugs and suggest how to fix them. Note that some users have advanced programming skills, and furthermore, each user's machine provides an additional testing environment. This new testing environment offers that ability to find and fix a new bug.
Early releases
The first version of the software should be released as early as possible so as to increase one's chances of finding co-developers early.
Frequent integration
Code changes should be integrated (merged into a shared code base) as often as possible so as to avoid the overhead of fixing a large number of bugs at the end of the project life cycle. Some open source projects have nightly builds where integration is done automatically on a daily basis.
Several versions
There should be at least two versions of the software. There should be a buggier version with more features and a more stable version with fewer features. The buggy version (also called the development version) is for users who want the immediate use of the latest features, and are willing to accept the risk of using code that is not yet thoroughly tested. The users can then act as co-developers, reporting bugs and providing bug fixes.
High modularization
The general structure of the software should be modular allowing for parallel development on independent components.
Dynamic decision making structure
There is a need for a decision making structure, whether formal or informal, that makes strategic decisions depending on changing user requirements and other factors. Compare with extreme programming.

Data suggests, however, that OSS is not quite as democratic as the bazaar model suggests. An analysis of five billion bytes of free/open source code by 31,999 developers shows that 74% of the code was written by the most active 10% of authors. The average number of authors involved in a project was 5.1, with the median at 2.[42]
Advantages and disadvantages[edit]
Open source software is usually easier to obtain than proprietary software, often resulting in increased use. Additionally, the availability of an open source implementation of a standard can increase adoption of that standard.[43] It has also helped to build developer loyalty as developers feel empowered and have a sense of ownership of the end product.[44]
Moreover, lower costs of marketing and logistical services are needed for OSS. OSS also helps companies keep abreast of technology developments. It is a good tool to promote a company's image, including its commercial products.[45] The OSS development approach has helped produce reliable, high quality software quickly and inexpensively.[46]
Open source development offers the potential for a more flexible technology and quicker innovation. It is said to be more reliable since it typically has thousands of independent programmers testing and fixing bugs of the software. Open source is not dependent on the company or author that originally created it. Even if the company fails, the code continues to exist and be developed by its users. Also, it uses open standards accessible to everyone; thus, it does not have the problem of incompatible formats that exist in proprietary software.
It is flexible because modular systems allow programmers to build custom interfaces, or add new abilities to it and it is innovative since open source programs are the product of collaboration among a large number of different programmers. The mix of divergent perspectives, corporate objectives, and personal goals speeds up innovation.[47]
Moreover, free software can be developed in accord with purely technical requirements. It does not require thinking about commercial pressure that often degrades the quality of the software. Commercial pressures make traditional software developers pay more attention to customers' requirements than to security requirements, since such features are somewhat invisible to the customer.[48]
It is sometimes said that the open source development process may not be well defined and the stages in the development process, such as system testing and documentation may be ignored. However this is only true for small (mostly single programmer) projects. Larger, successful projects do define and enforce at least some rules as they need them to make the teamwork possible.[49][50] In the most complex projects these rules may be as strict as reviewing even minor change by two independent developers.[51]
Not all OSS initiatives have been successful, for example SourceXchange and Eazel.[44] Software experts and researchers who are not convinced by open source's ability to produce quality systems identify the unclear process, the late defect discovery and the lack of any empirical evidence as the most important problems (collected data concerning productivity and quality).[52] It is also difficult to design a commercially sound business model around the open source paradigm. Consequently, only technical requirements may be satisfied and not the ones of the market.[52] In terms of security, open source may allow hackers to know about the weaknesses or loopholes of the software more easily than closed-source software. It depends on control mechanisms in order to create effective performance of autonomous agents who participate in virtual organizations.[53]
Development tools[edit]
In OSS development, tools are used to support the development of the product and the development process itself.[54]
Revision control systems such as Concurrent Versions System (CVS) and later Subversion (SVN) and Git are examples of tools, often themselves open source, help manage the source code files and the changes to those files for a software project.[55] The projects are frequently hosted and published on sites like Launchpad, Bitbucket, and GitHub.[56]
Open source projects are often loosely organized with "little formalised process modelling or support", but utilities such as issue trackers are often used to organize open source software development.[54] Commonly used bugtrackers include Bugzilla and Redmine.[57]
Tools such as mailing lists and IRC provide means of coordination among developers.[54] Centralized code hosting sites also have social features that allow developers to communicate.[56]
Organizations[edit]
Some of the "more prominent organizations" involved in OSS development include the Apache Software Foundation, creators of the Apache web server; the Linux Foundation, a nonprofit which as of 2012[update] employed Linus Torvalds, the creator of the Linux operating system kernel; the Eclipse Foundation, home of the Eclipse software development platform; the Debian Project, creators of the influential Debian GNU/Linux distribution; the Mozilla Foundation, home of the Firefox web browser; and OW2, European-born community developing open source middleware. New organizations tend to have a more sophisticated governance model and their membership is often formed by legal entity members.[58]
Open Source Software Institute is a membership-based, non-profit (501 (c)(6)) organization established in 2001 that promotes the development and implementation of open source software solutions within US Federal, state and local government agencies. OSSI's efforts have focused on promoting adoption of open source software programs and policies within Federal Government and Defense and Homeland Security communities.[59]
Open Source for America is a group created to raise awareness in the United States Federal Government about the benefits of open source software. Their stated goals are to encourage the government's use of open source software, participation in open source software projects, and incorporation of open source community dynamics to increase government transparency.[60]
Mil-OSS is a group dedicated to the advancement of OSS use and creation in the military.[61]
Funding[edit]
Main article: Business models for open-source software
Open-source software is widely used both as independent applications and as components in non-open-source applications. Many independent software vendors (ISVs), value-added resellers (VARs), and hardware vendors (OEMs or ODMs) use open-source frameworks, modules, and libraries inside their proprietary, for-profit products and services.[62] From a customer's perspective, the ability to use open technology under standard commercial terms and support is valuable. They are willing to pay for the legal protection (e.g., indemnification from copyright or patent infringement), "commercial-grade QA", and professional support/training/consulting that are typical of commercial software, while also receiving the benefits of fine-grained control and lack of lock-in that comes with open-source.
Comparisons with other software licensing/development models[edit]
Closed source / proprietary software[edit]
Main article: Comparison of open source and closed source
The debate over open source vs. closed source (alternatively called proprietary software) is sometimes heated.
The top four reasons (as provided by Open Source Business Conference survey[63]) individuals or organizations choose open source software are:

lower cost
security
no vendor 'lock in'
better quality

Since innovative companies no longer rely heavily on software sales, proprietary software has become less of a necessity.[64] As such, things like open source content management system—or CMS—deployments are becoming more commonplace. In 2009,[65] the US White House switched its CMS system from a proprietary system to Drupal open source CMS. Further, companies like Novell (who traditionally sold software the old-fashioned way) continually debate the benefits of switching to open source availability, having already switched part of the product offering to open source code.[66] In this way, open source software provides solutions to unique or specific problems. As such, it is reported[67] that 98% of enterprise-level companies use open source software offerings in some capacity.
With this market shift, more critical systems are beginning to rely on open source offerings,[68] allowing greater funding (such as US Department of Homeland Security grants[68]) to help "hunt for security bugs." According to a pilot study of organisations adopting (or not adopting) OSS; several factors of statistical significance were observed in the manager's beliefs in relation to (a) attitudes toward outcomes, (b) the influences and behaviours of others and (c) their ability to act.[69]
Proprietary source distributors have started to develop and contribute to the open source community due to the market share shift, doing so by the need to reinvent their models in order to remain competitive.[70]
Many advocates argue that open source software is inherently safer because any person can view, edit, and change code.[71] A study of the Linux source code has 0.17 bugs per 1000 lines of code while proprietary software generally scores 20–30 bugs per 1000 lines.[72]
Free software[edit]
Main article: Alternative terms for free software
See also: Comparison of free and open-source software licenses
According to the Free software movement's leader, Richard Stallman, the main difference is that by choosing one term over the other (i.e. either "open source" or "free software") one lets others know about what one's goals are: "Open source is a development methodology; free software is a social movement."[32] Nevertheless, there is significant overlap between open source software and free software.[33]
The FSF[73] said that the term "open source" fosters an ambiguity of a different kind such that it confuses the mere availability of the source with the freedom to use, modify, and redistribute it. On the other hand, the "free software" term was criticized for the ambiguity of the word "free" as "available at no cost", which was seen as discouraging for business adoption,[74] and for the historical ambiguous usage of the term.[8][75][76]
Developers have used the alternative terms Free and Open Source Software (FOSS), or Free/Libre and Open Source Software (FLOSS), consequently, to describe open source software that is also free software.[77] While the definition of open source software is very similar to the FSF's free software definition[78] it was based on the Debian Free Software Guidelines, written and adapted primarily by Bruce Perens with input from Eric S. Raymond and others.[79]
The term "open source" was originally intended to be trademarkable; however, the term was deemed too descriptive, so no trademark exists.[80] The OSI would prefer that people treat open source as if it were a trademark, and use it only to describe software licensed under an OSI approved license.[81]
OSI Certified is a trademark licensed only to people who are distributing software licensed under a license listed on the Open Source Initiative's list.[82]
Open-source versus source-available[edit]
 Although the OSI definition of "open source software" is widely accepted, a small number of people and organizations use the term to refer to software where the source is available for viewing, but which may not legally be modified or redistributed. Such software is more often referred to as source-available, or as shared source, a term coined by Microsoft in 2001.[83] While in 2007 two shared source licenses were certified by the OSI, most of the shared source licenses are still source-available only.[84]
In 2007 Michael Tiemann, president of OSI, had criticized[85] companies such as SugarCRM for promoting their software as "open source" when in fact it did not have an OSI-approved license. In SugarCRM's case, it was because the software is so-called "badgeware"[86] since it specified a "badge" that must be displayed in the user interface (SugarCRM has since switched to GPLv3[87]). Another example was Scilab prior to version 5, which called itself "the open source platform for numerical computation"[88] but had a license[89] that forbade commercial redistribution of modified versions.
Open-sourcing[edit]
Open-sourcing is the act of propagating the open source movement, most often referring to releasing previously proprietary software under an open source/free software license,[90] but it may also refer programing Open Source software or installing Open Source software.
Notable software packages, previously proprietary, which have been open sourced include:

Netscape Navigator, the code of which became the basis of the Mozilla and Mozilla Firefox web browsers
StarOffice, which became the base of the OpenOffice.org office suite and LibreOffice
Global File System, was originally GPL'd, then made proprietary in 2001(?), but in 2004 was re-GPL'd.
SAP DB, which has become MaxDB, and is now distributed (and owned) by MySQL AB
InterBase database, which was open sourced by Borland in 2000 and presently exists as a commercial product and an open-source fork (Firebird)

Before changing the license of software, distributors usually audit the source code for third party licensed code which they would have to remove or obtain permission for its relicense. Backdoors and other malware should also be removed as they may easily be discovered after release of the code.
Current applications and adoption[edit]
Main article: Free and open-source software § Adoption
See also: Linux adoption and Free software § Adoption


"We migrated key functions from Windows to Linux because we needed an operating system that was stable and reliable – one that would give us in-house control. So if we needed to patch, adjust, or adapt, we could."

Official statement of the United Space Alliance, which manages the computer systems for the International Space Station (ISS), regarding why they chose to switch from Windows to Debian GNU/Linux on the ISS[91][92]
Widely used open-source software[edit]
Main article: List of free and open-source software packages
Open source software projects are built and maintained by a network of volunteer programmers and are widely used in free as well as commercial products.[37] Prime examples of open-source products are the Apache HTTP Server, the e-commerce platform osCommerce, internet browsers Mozilla Firefox and Chromium (the project where the vast majority of development of the freeware Google Chrome is done) and the full office suite LibreOffice. One of the most successful open-source products is the GNU/Linux operating system, an open-source Unix-like operating system, and its derivative Android, an operating system for mobile devices.[93][94] In some industries, open source software is the norm.[95]
Extensions for non-software use[edit]
Main article: Open source model
See also: Open content and Open collaboration
While the term "open source" applied originally only to the source code of software,[96] it is now being applied to many other areas[97] such as Open source ecology,[98] a movement to decentralize technologies so that any human can use them. However, it is often misapplied to other areas which have different and competing principles, which overlap only partially.
The same principles that underlie open source software can be found in many other ventures, such as open-source hardware, Wikipedia, and open-access publishing. Collectively, these principles are known as open source, open content, and open collaboration:[99] "any system of innovation or production that relies on goal-oriented yet loosely coordinated participants, who interact to create a product (or service) of economic value, which they make available to contributors and non-contributors alike."[2]
This "culture" or ideology takes the view that the principles apply more generally to facilitate concurrent input of different agendas, approaches and priorities, in contrast with more centralized models of development such as those typically used in commercial companies.[100]
See also[edit]


Open-source software portal




Free software
Free software community
Free software movement
List of open source software packages
Open-content
Open source advocacy
Open source hardware
Open Source Initiative
Open Source Software Institute
Open source software security
Open source video games
Shared source
Timeline of open source software
User-generated content


References[edit]


^ St. Laurent, Andrew M. (2008). Understanding Open Source and Free Software Licensing. O'Reilly Media. p. 4. ISBN 9780596553951. 
^ a b Levine, Sheen S.; Prietula, Michael J. (2013-12-30). "Open Collaboration for Innovation: Principles and Performance". Organization Science. 25 (5): 1414–1433. doi:10.1287/orsc.2013.0872. ISSN 1047-7039. 
^ "What is open source?". opensource.com. Retrieved 25 August 2017. 
^ "Open Source Initiative". opensource.org. Opensource.org. Retrieved 25 August 2017. 
^ Hoffman, Chris (2016-09-26). "What Is Open Source Software, and Why Does It Matter?". howtogeek.com. Retrieved 25 August 2017. 
^ Rothwell, Richard (5 August 2008). "Creating wealth with free software". Free Software Magazine. Archived from the original on 8 September 2008. Retrieved 8 September 2008. 
^ "Standish Newsroom — Open Source" (Press release). Boston. 16 April 2008. Archived from the original on 18 January 2012. Retrieved 8 September 2008. 
^ a b c Karl Fogel (2016). "Producing Open Source Software - How to Run a Successful Free Software Project". O'Reilly Media. Retrieved 2016-04-11. But the problem went deeper than that. The word "free" carried with it an inescapable moral connotation: if freedom was an end in itself, it didn't matter whether free software also happened to be better, or more profitable for certain businesses in certain circumstances. Those were merely pleasant side effects of a motive that was, at its root, neither technical nor mercantile, but moral. Furthermore, the "free as in freedom" position forced a glaring inconsistency on corporations who wanted to support particular free programs in one aspect of their business, but continue marketing proprietary software in others. 
^ "History of the OSI". Opensource.org. 
^ B. Charny (3 May 2001). "Microsoft Raps Open-Source Approach,". CNET News. 
^ Jeffrey Voas, Keith W. Miller & Tom Costello. Free and Open Source Software. IT Professional 12(6) (November 2010), pg. 14–16.
^ Eric S. Raymond. "Goodbye, "free software"; hello, "open source"". catb.org. The problem with it is twofold. First, ... the term "free" is very ambiguous ... Second, the term makes a lot of corporate types nervous. 
^ Kelty, Christpher M. (2008). "The Cultural Significance of free Software - Two Bits" (PDF). Duke University press - durham and london. p. 99. Prior to 1998, Free Software referred either to the Free Software Foundation (and the watchful, micromanaging eye of Stallman) or to one of thousands of different commercial, avocational, or university-research projects, processes, licenses, and ideologies that had a variety of names: sourceware, freeware, shareware, open software, public domain software, and so on. The term Open Source, by contrast, sought to encompass them all in one movement. 
^ Shea, Tom (1983-06-23). "Free software - Free software is a junkyard of software spare parts". InfoWorld. Retrieved 2016-02-10. "In contrast to commercial software is a large and growing body of free software that exists in the public domain. Public-domain software is written by microcomputer hobbyists (also known as "hackers") many of whom are professional programmers in their work life. [...] Since everybody has access to source code, many routines have not only been used but dramatically improved by other programmers." 
^ Raymond, Eric S. (1998-02-08). "Goodbye, "free software"; hello, "open source"". Retrieved 2008-08-13. After the Netscape announcement broke in January I did a lot of thinking about the next phase -- the serious push to get "free software" accepted in the mainstream corporate world. And I realized we have a serious problem with "free software" itself. Specifically, we have a problem with the term "free software", itself, not the concept. I've become convinced that the term has to go. 
^ "Open Standards, Open Source Adoption in the Public Sector, and Their Relationship to Microsoft's Market Dominance by Tony Casson, Patrick S. Ryan :: SSRN". Papers.ssrn.com. SSRN 1656616 .  Missing or empty |url= (help); |access-date= requires |url= (help)
^ Holtgrewe, Ursula (2004). "Articulating the Speed(s) of the Internet: The Case of Open Source/Free Software". Time & Society. 13: 129–146. doi:10.1177/0961463X04040750. 
^ "Open Source Pioneers Meet in Historic Summit". 1998-04-14. Retrieved 2014-09-20. 
^ Muffatto, Moreno (2006). Open Source: A Multidisciplinary Approach. Imperial College Press. ISBN 1-86094-665-8. 
^ "NETSCAPE ANNOUNCES PLANS TO MAKE NEXT-GENERATION COMMUNICATOR SOURCE CODE AVAILABLE FREE ON THE NET". Netscape Communications Corporation. 1998-01-22. Archived from the original on 2007-04-01. Retrieved 2013-08-08. BOLD MOVE TO HARNESS CREATIVE POWER OF THOUSANDS OF INTERNET DEVELOPERS; COMPANY MAKES NETSCAPE NAVIGATOR AND COMMUNICATOR 4.0 IMMEDIATELY FREE FOR ALL USERS, SEEDING MARKET FOR ENTERPRISE AND NETCENTER BUSINESSES  
^ "MOUNTAIN VIEW, Calif., April 1 /PRNewswire/ -- Netscape Communications and open source developers are celebrating the first anniversary, March 31, 1999, of the release of Netscape's browser source code to mozilla.org". Netscape Communications. 1999-03-31. Retrieved 2013-01-10. [...]The organization that manages open source developers working on the next generation of Netscape's browser and communication software. This event marked a historical milestone for the Internet as Netscape became the first major commercial software company to open its source code, a trend that has since been followed by several other corporations. Since the code was first published on the Internet, thousands of individuals and organizations have downloaded it and made hundreds of contributions to the software. Mozilla.org is now celebrating this one-year anniversary with a party Thursday night in San Francisco. 
^ "International Authority & Recognition". Opensource.org. 
^ "List of OSI Affiliates". Opensource.org. 
^ "OSI Affiliate Agreement". Opensource.org. 
^ Perens, Bruce. Open Sources: Voices from the Open Source Revolution. O'Reilly Media. 1999.
^ The Open Source Definition by Bruce Perens. January 1999. ISBN 1-56592-582-3. 
^ "The Open Source Definition". , The Open Source Definition according to the Open Source Initiative
^ "How Many Open Source Licenses Do You Need? – Slashdot". News.slashdot.org. 2009-02-16. Retrieved 2012-03-25. 
^ Open Source Initiative. "The Open Source Definition (Annotated)". opensource.org. Retrieved 22 July 2016. 
^ Tiemann, Michael. "History of the OSI". Open Source Initiative. Archived from the original on 24 September 2006. Retrieved 13 May 2014. 
^ Stallman, Richard (June 16, 2007). "Why "Open Source" misses the point of Free Software". Philosophy of the GNU Project. Free Software Foundation. Retrieved July 23, 2007. As the advocates of open source draw new users into our community, we free software activists have to work even more to bring the issue of freedom to those new users' attention. We have to say, 'It's free software and it gives you freedom!'—more and louder than ever. Every time you say 'free software' rather than 'open source,' you help our campaign. 
^ a b Stallman, Richard (June 19, 2007). "Why "Free Software" is better than "Open Source"". Philosophy of the GNU Project. Free Software Foundation. Retrieved July 23, 2007. Sooner or later these users will be invited to switch back to proprietary software for some practical advantage Countless companies seek to offer such temptation, and why would users decline? Only if they have learned to value the freedom free software gives them, for its own sake. It is up to us to spread this idea—and in order to do that, we have to talk about freedom. A certain amount of the 'keep quiet' approach to business can be useful for the community, but we must have plenty of freedom talk too. 
^ a b Stallman, Richard (June 16, 2007). "Why "Open Source" misses the point of Free Software". Philosophy of the GNU Project. Free Software Foundation. Retrieved July 23, 2007. Under the pressure of the movie and record companies, software for individuals to use is increasingly designed specifically to restrict them. This malicious feature is known as DRM, or Digital Restrictions Management (see DefectiveByDesign.org), and it is the antithesis in spirit of the freedom that free software aims to provide. [...] Yet some open source supporters have proposed 'open source DRM' software. Their idea is that by publishing the source code of programs designed to restrict your access to encrypted media, and allowing others to change it, they will produce more powerful and reliable software for restricting users like you. Then it will be delivered to you in devices that do not allow you to change it. This software might be 'open source,' and use the open source development model; but it won't be free software, since it won't respect the freedom of the users that actually run it. If the open source development model succeeds in making this software more powerful and reliable for restricting you, that will make it even worse. 
^ Rosen, Lawrence. "Joint Works - Open Source Licensing: Software Freedom and Intellectual Property Law". flylib.com. Retrieved 22 July 2016. 
^ Andrew T. Pham, Verint Systems Inc. and Matthew B. Weinstein and Jamie L. Ryerson. "Easy as ABC: Categorizing Open Source Licenses"; www.IPO.org. June 2010.
^ Shiels, Maggie (2008-08-14). "Legal milestone for open source". BBC News. Retrieved 2008-08-15. 
^ a b Popp, Dr. Karl Michael (2015). Best Practices for commercial use of open source software. Norderstedt, Germany: Books on Demand. ISBN 978-3738619096. 
^ [1] Archived 15 November 2007 at the Wayback Machine.
^ [2] Archived 7 December 2007 at the Wayback Machine.
^ a b c Raymond, Eric S. (2000-09-11). "The Cathedral and the Bazaar". Retrieved 2004-09-19. 
^ Robles, Gregorio (2004). "A Software Engineering Approach to Libre Software" (PDF). In Robert A. Gehring, Bernd Lutterbeck. Open Source Jahrbuch 2004 (PDF). Berlin: Technical University of Berlin. Retrieved 2005-04-20. 
^ Ghosh, R.A.; Robles, G.; Glott, R. (2002). "Free/Libre and Open Source Software: Survey and Study Part V". Maastricht: International Institute of Infonomics. 
^ US Department of Defense. "Open Source Software FAQ". Chief Information Officer. Retrieved 22 July 2016. 
^ a b Sharma, Srinarayan; Vijayan Sugumaran; Balaji Rajagopalan (2002). "A framework for creating hybrid-open source software communities" (PDF). Info Systems Journal. 12: 7–25. doi:10.1046/j.1365-2575.2002.00116.x. 
^ Landry, John; Rajiv Gupta (September 2000). "Profiting from Open Source". Harvard Business Review. doi:10.1225/F00503 (inactive 2017-01-18). 
^ Reynolds, Carl; Jeremy Wyatt (February 2011). "Open Source, Open Standards, and Health Care Information Systems". JMIR. 13: e24. doi:10.2196/jmir.1521. Retrieved 2011-03-17. 
^ Plotkin, Hal (December 1998). "What (and Why) you should know about open-source software". Harvard Management Update: 8–9. 
^ Payne, Christian (February 2002). "On the Security of Open Source Software". Info Systems Journal. 12 (1): 61–78. doi:10.1046/j.1365-2575.2002.00118.x. 
^ "GNU Classpath Hacker's Guide: GNU Classpath Hacker's Guide". Gnu.org. 2003-08-11. Retrieved 2012-03-25. 
^ Meffert, Klaus; Neil Rotstan (2007). "Brief summary of coding style and practice used in JGAP". Java Genetic Algorithms Package. Retrieved 2008-09-08. [permanent dead link]
^ Tripp, Andy (2007-07-16). "Classpath hackers frustrated with slow OpenJDK process". Javalobby. 
^ a b Stamelos, Ioannis; Lefteris Angelis; Apostolos Oikonomou; Georgios L. Bleris (2002). "Code Quality Analysis in Open Source Software Development" (PDF). Info System Journal. 12: 43–60. doi:10.1109/MS.2007.2. Retrieved 2008-09-08. 
^ Gallivan, Michael J. (2001). "Striking a Balance Between Trust and Control in a Virtual Organization: A Content Analysis of Open Source Software Case Studies". Info Systems Journal. 11 (4): 277–304. doi:10.1046/j.1365-2575.2001.00108.x. 
^ a b c Boldyreff, Cornelia; Lavery, Janet; Nutter, David; Rank, Stephen. "Open Source Development Processes and Tools" (PDF). Flosshub. Retrieved 22 July 2016. 
^ Stansberry, Glen (18 September 2008). "7 Version Control Systems Reviewed – Smashing Magazine". Smashing Magazine. Retrieved 22 July 2016. 
^ a b Frantzell, Lennart. "GitHub, Launchpad and BitBucket, how today's distributed version control systems are fueling the unprecendented global open source revolution". IBM developerworks. Retrieved 22 July 2016. 
^ Baker, Jason. "Top 4 open source issue tracking tools". opensource.com. Retrieved 22 July 2016. 
^ François Letellier (2008), Open Source Software: the Role of Nonprofits in Federating Business and Innovation Ecosystems[permanent dead link], AFME 2008.
^ Open Source Software Institute. "Home". Open Source Software Institute. Retrieved 22 July 2016. 
^ Hellekson, Gunnar. "Home". Open Source for America. Retrieved 2012-03-25. 
^ from EntandoSrl (Entando ). "Mil-OSS". Mil-OSS. Retrieved 2012-03-25. 
^ Popp, Dr. Karl Michael; Meyer, Ralf (2010). Profit from Software Ecosystems: Business Models, Ecosystems and Partnerships in the Software Industry. Norderstedt, Germany: Books on Demand. ISBN 9783839169834. 
^ Irina Guseva (@irina_guseva) (2009-03-26). "Bad Economy Is Good for Open Source". Cmswire.com. Retrieved 2012-03-25. 
^ "Open Source vs. Proprietary Software". PCWorld Business Center. Pcworld.com. 2011-11-03. Retrieved 2012-03-25. 
^ Geoff Spick (@Goffee71) (2009-10-26). "Open Source Movement Finds Friends at the White House". Cmswire.com. Retrieved 2012-03-25. 
^ "Pandora's box for open source – CNET News". News.cnet.com. 2004-02-12. Retrieved 2012-03-25. 
^ Murphy, David (2010-08-15). "Survey: 98 Percent of Companies Use Open-Source, 29 Percent Contribute Back". News & Opinion. PCMag.com. Retrieved 2012-03-25. 
^ a b "Homeland Security helps secure open-source code – CNET News". News.cnet.com. Retrieved 2012-03-25. 
^ Greenley, Neil. "Open Source Software Survey". Retrieved 9 October 2012. 
^ Boulanger, A. (2005). Open-source versus proprietary software: Is one more reliable and secure than the other? IBM Systems Journal, 44(2), 239-248.
^ Seltzer, Larry (2004-05-04). "Is Open-Source Really Safer?". PCMag.com. Retrieved 2012-03-25. 
^ Michelle Delio. "Linux: Fewer Bugs Than Rivals". Wired.com. Retrieved 2016-05-23. 
^ "Why Open Source Misses the Point of Free Software – GNU Project – Free Software Foundation". Gnu.org. Retrieved 2015-03-30. 
^ "Goodbye, "free software"; hello, "open source"". The problem with it is twofold. First, ... the term "free" is very ambiguous ... Second, the term makes a lot of corporate types nervous. 
^ Kelty, Christpher M. (2008). "The Cultural Significance of free Software - Two Bits" (PDF). Duke University press - durham and london. p. 99. Prior to 1998, Free Software referred either to the Free Software Foundation (and the watchful, micromanaging eye of Stallman) or to one of thousands of different commercial, avocational, or university-research projects, processes, licenses, and ideologies that had a variety of names: sourceware, freeware, shareware, open software, public domain software, and so on. The term Open Source, by contrast, sought to encompass them all in one movement. 
^ OSI. "History of OSI". conferees decided it was time to dump the moralizing and confrontational attitude that had been associated with "free software" in the past and sell the idea strictly on the same pragmatic, business-case grounds 
^ Stallman, Richard. "https://www.gnu.org/philosophy/floss-and-foss.en.html". FLOSS and FOSS. Free Software Foundation. Retrieved 22 July 2016.  External link in |title= (help)
^ Stallman, Richard (2007-06-16). "Why "Open Source" misses the point of Free Software". Philosophy of the GNU Project. GNU Project. Retrieved 2007-07-23. 
^ Tiemann, Michael (19 September 2006). "History of the OSI". Open Source Initiative. Retrieved 23 August 2008. 
^ Nelson, Russell (2007-03-26). "Certification Mark". Open Source Initiative. Archived from the original on 2008-02-06. Retrieved 2007-07-22. 
^ Raymond, Eric S. (1998-11-22). "OSI Launch Announcement". Open Source Initiative. Retrieved 2007-07-22. 
^ Nelson, Russell (2006-09-19). "Open Source Licenses by Category". Open Source Initiative. Retrieved 2007-07-22. 
^ "Microsoft announces expansion of Shared Source Initiative". Geekzone.co.nz. 2005-03-21. Retrieved 2015-03-30. 
^ "OSI Approves Microsoft License Submissions". opensource.org. 2007-10-17. Retrieved 2013-08-08. Acting on the advice of the License Approval Chair, the OSI Board today approved the Microsoft Public License (Ms-PL) and the Microsoft Reciprocal License (Ms-RL). The decision to approve was informed by the overwhelming (though not unanimous) consensus from the open source community that these licenses satisfied the 10 criteria of the Open Source definition, and should therefore be approved. 
^ Tiemann, Michael (2007-06-21). "Will The Real Open Source CRM Please Stand Up?". Open Source Initiative. Retrieved 2008-01-04. 
^ Berlind, David (21 November 2006). "Are SugarCRM, Socialtext, Zimbra, Scalix and others abusing the term "open source?"". ZDNet. Archived from the original on 1 January 2008. Retrieved 4 January 2008. 
^ Vance, Ashlee (2007-07-25). "SugarCRM trades badgeware for GPL 3". The Register. Retrieved 2008-09-08. 
^ "The open source platform for numerical computation". INRIA. Retrieved 2008-01-04. 
^ "SCILAB License". INRIA. Retrieved 2008-01-04. [permanent dead link]
^ Agerfalk, Par and Fitzgerald, Brian (2008), Outsourcing to an Unknown Workforce: Exploring Opensourcing as a Global Sourcing Strategy, MIS Quarterly, Vol 32, No 2, pp.385-410
^ Gunter, Joel (May 10, 2013). "International Space Station to boldly go with Linux over Windows". The Telegraph. 
^ Bridgewater, Adrian (May 13, 2013). "International Space Station adopts Debian Linux, drops Windows & Red Hat into airlock". Computer Weekly. 
^ Michael J. Gallivan, "Striking a Balance Between Trust and Control in a Virtual Organization: A Content Analysis of Open Source Software Case Studies", Info Systems Journal 11 (2001): 277–304
^ Hal Plotkin, "What (and Why) you should know about open source software" Harvard Management Update 12 (1998): 8–9
^ Noyes, Katherine. "Open Source Software Is Now a Norm in Businesses". PCWorld. Retrieved 22 July 2016. 
^ Stallman, Richard (September 24, 2007). "Why "Open Source" misses the point of Free Software". Philosophy of the GNU Project. Free Software Foundation. Retrieved December 6, 2007. However, not all of the users and developers of free software agreed with the goals of the free software movement. In 1998, a part of the free software community splintered off and began campaigning in the name of 'open source.' The term was originally proposed to avoid a possible misunderstanding of the term 'free software,' but it soon became associated with philosophical views quite different from those of the free software movement. 
^ "What is open source?". Retrieved July 29, 2013. 
^ "Open Source Ecology". ...building the world's first replicable open source self-sufficient decentralized high-appropriate-tech permaculture ecovillage... 
^ "Open Collaboration Bitcoin". Informs.org. 2014-01-02. Retrieved 2015-03-30. 
^ Raymond, Eric S. The Cathedral and the Bazaar. ed 3.0. 2000.


Further reading[edit]

Androutsellis-Theotokis, Stephanos; Spinellis, Diomidis; Kechagia, Maria; Gousios, Georgios (2010). "Open source software: A survey from 10,000 feet" (PDF). Foundations and Trends in Technology, Information and Operations Management. 4 (3–4): 187–347. doi:10.1561/0200000026. ISBN 978-1-60198-484-5. 
Coleman, E. Gabriella. Coding Freedom: The Ethics and Aesthetics of Hacking (Princeton UP, 2012)
Fadi P. Deek; James A. M. McHugh (2008). Open Source: Technology and Policy. Cambridge: Cambridge University Press. ISBN 978-0-511-36775-5. 
Chris DiBona and Sam Ockman and Mark Stone, ed. (1999). Open Sources: Voices from the Open Source Revolution. O'Reilly. ISBN 1-56592-582-3. 
Joshua Gay, ed. (2002). Free Software, Free Society: Selected Essays of Richard M. Stallman (PDF). Boston: GNU Press, Free Software Foundation. ISBN 1-882114-98-1. 
Understanding FOSS | editor = Sampathkumar Coimbatore India
Benkler, Yochai (2002), "Coase's Penguin, or, Linux and The Nature of the Firm." Yale Law Journal 112.3 (Dec 2002): p367(78) (in Adobe pdf format)
v. Engelhardt, Sebastian (2008). "The Economic Properties of Software", Jena Economic Research Papers, Volume 2 (2008), Number 2008-045 (PDF). 
Lerner, J. & Tirole, J. (2002): 'Some simple economics on open source', Journal of Industrial Economics 50(2), p 197–234
Välimäki, Mikko (2005). The Rise of Open Source Licensing: A Challenge to the Use of Intellectual Property in the Software Industry (PDF). Turre Publishing. Archived from the original (PDF) on 4 March 2009. 
Polley, Barry (2007-12-11). "Open Source Discussion Paper – version 1.0" (PDF). New Zealand Ministry of Justice. Retrieved 2007-12-12. 
Rossi, M. A. (2006): Decoding the free/open source software puzzle: A survey of theoretical and empirical contributions, in J. Bitzer P. Schröder, eds, 'The Economics of Open Source Software Development', p 15–55.
Open Sources: Voices from the Open Source Revolution — an online book containing essays from prominent members of the open source community
Whence The Source: Untangling the Open Source/Free Software Debate, essay on the differences between free software and open source, by Thomas Scoville
Berry, D M (2004). The Contestation of Code: A Preliminary Investigation into the Discourse of the Free Software and Open Software Movement, Critical Discourse Studies, Volume 1(1).
Schrape, Jan-Felix (2017). "Open Source Projects as Incubators of Innovation. From Niche Phenomenon to Integral Part of the Software Industry" (PDF). Stuttgart: Research Contributions to Organizational Sociology and Innovation Studies 2017-03. 

External links[edit]



Wikimedia Commons has media related to Free software.





Wikibooks has a book on the topic of: Open Source





Wikibooks has a book on the topic of: Use the Source



The Open Source Initiative's definition of open source
Free / Open Source Research Community — Many online research papers about Open Source
Open-source software at Curlie (based on DMOZ)







v
t
e


Software distribution



Licenses



Beerware
Floating licensing
Free
Free and open-source
Freely redistributable
Open source
Proprietary
Public domain





Compensation models



Adware
Commercial software

Retail software


Crippleware
Crowdfunding
Freemium
Freeware
Pay what you want

Careware
Donationware


Open core
Postcardware
Shareware

Nagware







Delivery methods



Digital distribution
File sharing
On-premises
Pre-installed
Product bundling
Retail software
Sneakernet
Software as a service





Deceptive and/or illicit



Unwanted software bundling
Malware

Spyware
Trojan horse
Worm
Ransomware


Scareware
Shovelware
Vaporware





Software release life cycle



Abandonware
End-of-life
Long-term support
Software maintenance
Software maintainer
Software publisher





Copy protection



Digital rights management
Software protection dongle
Hardware restrictions
License manager
Product activation
Product key
Software copyright
Software patent
Torrent poisoning












v
t
e


Free and open-source software



General



Alternative terms for free software
Comparison of open-source and closed-source software
Comparison of source code hosting facilities
Free software
Free software project directories
Gratis versus libre
Long-term support
Open-source software
Open-source software development
Outline





Software
packages



Audio
Bioinformatics
Codecs
Collaboration
Configuration management
Device drivers

Graphics
Wireless


Geophysics
Health
Mathematics
Operating systems
Programming languages
Routing
Statistics
Television
Video games
Web applications

Content management systems
E-commerce


Word processors
Android apps
iOS apps
Commercial
Trademarked
Formerly proprietary





Community



Free software movement
History
Open-source software movement
Organizations
Events





Licenses



AFL
Apache
APSL
Artistic
Beerware
Boost
BSD
CC0
CDDL
EPL
GNU GPL
GNU LGPL
ISC
MIT
MPL
Ms-PL/RL
Python
Python Software Foundation
Sleepycat
Unlicense
WTFPL
zlib





License types
and standards



Comparison of free and open-source software licenses
Contributor License Agreement
Copyfree
Copyleft
Debian Free Software Guidelines
Definition of Free Cultural Works
Free license
The Free Software Definition
The Open Source Definition
Open-source license
Permissive software licence
Public domain
Viral license





Challenges



Binary blob
Digital rights management
Hardware restrictions
License proliferation
Mozilla software rebranding
Proprietary software
SCO/Linux controversies
Secure boot
Software patents
Software security
Trusted Computing





Related topics



The Cathedral and the Bazaar
Forking
Microsoft Open Specification Promise
Revolution OS








 Book
 Category
 Commons
 Portal












v
t
e


Intellectual property activism



Issues



Copyright infringement
Digital rights management
Gripe site
Legal aspects of file sharing
Mashup

digital
music
videos


Monopolies of knowledge
Music piracy
Orphan works
Patents

biological
software
software patent debate
trolling


Public domain





Concepts



All rights reversed
Alternative compensation system
Anti-copyright notice
Business models for open-source software
Copyleft
Commercial use of copyleft works
Commons-based peer production
Free content
Free software license
Libertarian positions
Open content
Open design
Open Music Model
Open patent
Open-source hardware
Open-source software
Prize system

contests


Share-alike
Video on demand





Movements



Access to Knowledge movement
Anti-copyright
Cultural environmentalism
Free culture movement
Free software movement





Organizations



Copyright Alliance
Creative Commons

Electronic Frontier Foundation
Free Software Foundation
Open Rights Group
Organization for Transformative Works
The Pirate Bay
Piratbyrån
Pirate Party
Sci-Hub
Students for Free Culture





People



Alexandra Elbakyan
Rick Falkvinge
Lawrence Lessig
Richard Stallman
Peter Sunde
Peter Suber
Aaron Swartz





Documentaries



Steal This Film (2006, 2007)
Good Copy Bad Copy (2007)
RiP!: A Remix Manifesto (2008)
TPB AFK: The Pirate Bay Away From Keyboard (2013)
The Internet's Own Boy (2014)












v
t
e


Free culture and open movements



Concepts



Citizen journalism
Citizen science
Commons-based peer production
Knowledge commons
Open access
Open collaboration
Open content
Open communication
Open data
Open definition
Open design
Open education
Open gaming
Open government
Open innovation
Open knowledge
Open patent
Open research
Open science
Open-source architecture
Open-source software
Open-source governance
Open-source journalism
Open source hardware
Open standards
Open university

Open-door academic policy
Open admissions


Open Web
P2P economic system
Sharism





Tools



Free and open-source
Open Data Indicies
Open educational resources
Open Music Model
Open notebook science





Organizations



Creative Commons
DIYbio
Free Software Foundation
Open Architecture Network
Openmod initiative
Open Knowledge International
Open Rights Group
Open Source Initiative
P2P Foundation
Pirate Party
PLOS
SPARC





Activists



Tim Berners-Lee
Alexandra Elbakyan
Lawrence Lessig
Peter Murray-Rust
Douglas Rushkoff
Richard Stallman
Peter Suber
Peter Sunde
Aaron Swartz
John Wilbanks





Projects



Creative Commons license
Definition of Free Cultural Works
Free culture movement
Free software movement
Open Source Ecology
OpenCores
OpenWetWare
Sci-Hub












v
t
e


Independent production



Reading



Alternative comics
Alternative manga
Fanzine
Webcomic

business


Minicomic

Co-ops


Dōjinshi

conventions
printers
shops


Self publishing
Small press
Amateur press association





Audio







Independent music
Record label

Netlabel
Open-source label


Radio

Station
Pirate radio


Cassette culture
Dōjin music
Lo-fi music
Tracker (MOD) music
Podsafe





Musical instruments



Circuit bending
Experimental musical instrument








Video




Amateur



Home movies
Amateur film
Amateur pornography
Fan film
Machinima





Professional



Independent animation
Cinema of Transgression
Independent film
Exploitation film
B movie

Golden Age
50s
60s–70s
80s–present


Z movie
Midnight movie
Low-budget film
No budget film
No Wave Cinema
Double feature








Software







Cowboy coding
Demo−demoscene
Free software
Open-source software
Software cracking
Unofficial patch
Warez scene





Video games



Indie games−development−developers
Homebrew
Fangame
Dōjin soft
Mod
Open-source video game
ROM hack











Food
Drinks






Independent soft drink
Homebrewing
Microbrewery





Other



Indie art

Amateur photography
Mail art
Naïve art
Outsider art
Visionary environment


Indie RPG
Independent circuit (wrestling)
Independent TV station





General



Indie design
Do it yourself (DIY ethic)
Dōjin
Make (magazine)
Maker Faire









Authority control



NDL: 01148004











						Retrieved from "https://en.wikipedia.org/w/index.php?title=Open-source_software&oldid=817328033"					Categories: Free softwareSoftware licensesHidden categories: Pages using web citations with no URLPages using citations with accessdate and no URLWebarchive template wayback linksPages with DOIs inactive since 2017All articles with dead external linksArticles with dead external links from December 2017Articles with permanently dead external linksCS1 errors: external linksUse dmy dates from August 2016Articles containing potentially dated statements from 2012All articles containing potentially dated statementsCommons category with local link different than on WikidataArticles with DMOZ links