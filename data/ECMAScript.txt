
ECMAScript

Paradigm
Multi-paradigm: prototype-based, functional, imperative


Designed by
Brendan Eich, Ecma International


First appeared
1997; 20 years ago (1997)


Typing discipline
weak, dynamic


Website
www.ecma-international.org


Major implementations


JavaScript, SpiderMonkey, V8, ActionScript, JScript, QtScript, InScript


Influenced by


Self, HyperTalk, AWK, C, Perl, Python, Java, Scheme



ECMAScript




Filename extensions
.es


Internet media type
application/ecmascript


Developed by
Sun Microsystems,
Ecma International


Initial release
June 1997; 20 years ago (1997-06)


Latest release

Edition 8
(June 2017; 6 months ago (2017-06))



Type of format
Scripting language


Website
ECMA-262, ECMA-290,
ECMA-327, ECMA-357,
ECMA-402




Part of a series on


JavaScript




JavaScript syntax
JavaScript library
Unobtrusive JavaScript
JavaScript engine




Lists of Frameworks and Libraries




Ajax frameworks
JavaScript web frameworks
Comparison of JavaScript frameworks
List of JavaScript libraries
JavaScript unit testing frameworks




JavaScript Object Notation



See also

ECMAScript







v
t
e





ECMAScript (or ES)[1] is a trademarked[2] scripting-language specification standardized by Ecma International in ECMA-262 and ISO/IEC 16262. It was created to standardize JavaScript, so as to foster multiple independent implementations. JavaScript has remained the best-known implementation of ECMAScript since the standard was first published, with other well-known implementations including JScript and ActionScript.[3] Coders commonly use ECMAScript for client-side scripting on the World Wide Web, and it is increasingly being used for writing server applications and services using Node.js.



Contents


1 History

1.1 Versions
1.2 4th Edition (abandoned)
1.3 5th Edition
1.4 6th Edition - ECMAScript 2015
1.5 7th Edition - ECMAScript 2016
1.6 8th Edition - ECMAScript 2017
1.7 ES.Next


2 Features
3 Syntax
4 Implementations
5 Version correspondence
6 Conformance tests
7 See also
8 References
9 External links



History[edit]
The ECMAScript specification is a standardized specification of a scripting language developed by Brendan Eich of Netscape; initially it was named Mocha, later LiveScript, and finally JavaScript.[4] In December 1995, Sun Microsystems and Netscape announced JavaScript in a press release.[5] In March 1996, Netscape Navigator 2.0 was released, featuring support for JavaScript.
Owing to the widespread success of JavaScript as a client-side scripting language for Web pages, Microsoft developed a compatible dialect of the language, naming it JScript to avoid trademark issues. JScript added new date methods to alleviate the Year 2000 problem caused by the JavaScript methods that were based on the Java Date class.[6] JScript was included in Internet Explorer 3.0, released in August 1996.
Netscape delivered JavaScript to Ecma International for standardization and the work on the specification, ECMA-262, began in November 1996.[7] The first edition of ECMA-262 was adopted by the Ecma General Assembly in June 1997. Several editions of the language standard have been published since then. The name "ECMAScript" was a compromise between the organizations involved in standardizing the language, especially Netscape and Microsoft, whose disputes dominated the early standards sessions. Eich commented that "ECMAScript was always an unwanted trade name that sounds like a skin disease."[8]
While both JavaScript and JScript aim to be compatible with ECMAScript, they also provide additional features not described in the ECMA specifications.[9]
Versions[edit]
There are eight editions of ECMA-262 published. Work on version 8 of the standard was finalized in June 2017.[10]


Edition
Date published
Changes from prior edition
Editor


1
June 1997
First edition
Guy L. Steele Jr.


2
June 1998
Editorial changes to keep the specification fully aligned with ISO/IEC 16262 international standard
Mike Cowlishaw


3
December 1999
Added regular expressions, better string handling, new control statements, try/catch exception handling, tighter definition of errors, formatting for numeric output and other enhancements
Mike Cowlishaw


4
Abandoned
Fourth Edition was abandoned, due to political differences concerning language complexity. Many features proposed for the Fourth Edition have been completely dropped; some are proposed for ECMAScript Harmony.



5
December 2009
Adds "strict mode," a subset intended to provide more thorough error checking and avoid error-prone constructs. Clarifies many ambiguities in the 3rd edition specification, and accommodates behaviour of real-world implementations that differed consistently from that specification. Adds some new features, such as getters and setters, library support for JSON, and more complete reflection on object properties.[11]
Pratap Lakshman, Allen Wirfs-Brock


5.1
June 2011
This edition 5.1 of the ECMAScript Standard is fully aligned with third edition of the international standard ISO/IEC 16262:2011.
Pratap Lakshman, Allen Wirfs-Brock


6
June 2015[12]
The Sixth Edition, initially known as ECMAScript 6 (ES6) and later renamed to ECMAScript 2015 (ES2015)[12] adds significant new syntax for writing complex applications, including classes and modules, but defines them semantically in the same terms as ECMAScript 5 strict mode. Other new features include iterators and for/of loops, Python-style generators and generator expressions, arrow functions, binary data, typed arrays, collections (maps, sets and weak maps), promises, number and math enhancements, reflection, and proxies (metaprogramming for virtual objects and wrappers). As the first "ECMAScript Harmony" specification, it is also known as "ES6 Harmony."
Allen Wirfs-Brock


7
June 2016[13]
The Seventh Edition, also known as ECMAScript 2016,[13] intended to continue the themes of language reform, code isolation, control of effects and library/tool enabling from ES2015, includes two new features: the exponentiation operator (**) and Array.prototype.includes.
Brian Terlson


8
June 2017[10]
New features proposed include concurrency and atomics, zero-copy binary data transfer, more number and math enhancements, syntactic integration with promises (await/async), observable streams, SIMD types, better metaprogramming with classes, class and instance properties, operator overloading, value types (first-class primitive-like objects), records and tuples, and traits.[14][15]



In June 2004, Ecma International published ECMA-357 standard, defining an extension to ECMAScript, known as ECMAScript for XML (E4X). Ecma also defined a "Compact Profile" for ECMAScript – known as ES-CP, or ECMA 327 – that was designed for resource-constrained devices, which was withdrawn in 2015.[16]
4th Edition (abandoned)[edit]
The proposed fourth edition of ECMA-262 (ECMAScript 4 or ES4) would have been the first major update to ECMAScript since the third edition was published in 1999. The specification (along with a reference implementation) was originally targeted for completion by October 2008.[17] An overview of the language was released by the working group on October 23, 2007.[18]
By August 2008, the ECMAScript 4th edition proposal had been scaled back into a project codenamed ECMAScript Harmony. Features under discussion for Harmony at the time included

classes,
a module system,
optional type annotations and static typing, probably using a structural type system,
generators and iterators,
destructuring assignment, and
algebraic data types.

The intent of these features was partly to better support programming in the large, and to allow sacrificing some of the script's ability to be dynamic to improve performance. For example, Tamarin – the virtual machine for ActionScript developed and open sourced by Adobe – has just-in-time compilation (JIT) support for certain classes of scripts.
In addition to introducing new features, some ES3 bugs were proposed to be fixed in edition 4.[19][20] These fixes and others, and support for JSON encoding/decoding, have been folded into the ECMAScript, 5th Edition specification.[21]
Work started on Edition 4 after the ES-CP (Compact Profile) specification was completed, and continued for approximately 18 months where slow progress was made balancing the theory of Netscape's JavaScript 2 specification with the implementation experience of Microsoft's JScript .NET. After some time, the focus shifted to the ECMAScript for XML (E4X) standard. The update has not been without controversy. In late 2007, a debate between Eich, later the Mozilla Foundation's CTO, and Chris Wilson, Microsoft's platform architect for Internet Explorer, became public on a number of blogs. Wilson cautioned that because the proposed changes to ECMAScript made it backwards incompatible in some respects to earlier versions of the language, the update amounted to "breaking the Web,"[22] and that stakeholders who opposed the changes were being "hidden from view".[23] Eich responded by stating that Wilson seemed to be "repeating falsehoods in blogs" and denied that there was attempt to suppress dissent and challenged critics to give specific examples of incompatibility.[24] He also pointed out that Microsoft Silverlight and Adobe AIR rely on C# and ActionScript 3 respectively, both of which are larger and more complex than ECMAScript Edition 3.[25]
5th Edition[edit]
Yahoo, Microsoft, Google, and other 4th edition dissenters formed their own subcommittee to design a less ambitious update of ECMAScript 3, tentatively named ECMAScript 3.1. This edition would focus on security and library updates with a large emphasis on compatibility. After the aforementioned public sparring, the ECMAScript 3.1 and ECMAScript 4 teams agreed on a compromise: the two editions would be worked on, in parallel, with coordination between the teams to ensure that ECMAScript 3.1 remains a strict subset of ECMAScript 4 in both semantics and syntax.
However, the differing philosophies in each team resulted in repeated breakages of the subset rule, and it remained doubtful that the ECMAScript 4 dissenters would ever support or implement ECMAScript 4 in the future. After over a year since the disagreement over the future of ECMAScript within the Ecma Technical Committee 39, the two teams reached a new compromise in July 2008: Brendan Eich announced that Ecma TC39 would focus work on the ECMAScript 3.1 (later renamed to ECMAScript, 5th Edition) project with full collaboration of all parties, and vendors would target at least two interoperable implementations by early 2009.[26][27] In April 2009, Ecma TC39 published the "final" draft of the 5th edition and announced that testing of interoperable implementations was expected to be completed by mid-July.[28] On December 3, 2009, ECMA-262 5th edition was published.[29]

6th Edition - ECMAScript 2015[edit]
The 6th edition, officially known as ECMAScript 2015, was finalized in June 2015.[12][30] This update adds significant new syntax for writing complex applications, including classes and modules, but defines them semantically in the same terms as ECMAScript 5 strict mode. Other new features include iterators and for/of loops, Python-style generators and generator expressions, arrow functions, binary data, typed arrays, collections (maps, sets and weak maps), promises, number and math enhancements, reflection, and proxies (metaprogramming for virtual objects and wrappers).[31][32] The complete list is extensive.[33]
Browser support for ES2015 is still incomplete.[34] However, ES2015 code can be transpiled into ES5 code, which has more consistent support across browsers.[35] Transpiling adds an extra step to build processes whereas polyfills allow adding extra functionalities by including another JavaScript file.

7th Edition - ECMAScript 2016[edit]
The 7th edition, officially known as ECMAScript 2016, was finalized in June 2016.[13] New features include the exponentiation operator (**), Array.prototype.includes (not to be confused with ClassList.contains).
8th Edition - ECMAScript 2017[edit]
The 8th edition, officially known as ECMAScript 2017, was finalized in June 2017.[10] Includes await/async, which works using generators and promises.
ES.Next[edit]
ES.Next is a dynamic name that refers to whatever the next version is at time of writing. ES.Next features are more correctly called proposals, because, by definition, the specification has not been finalized yet.
Features[edit]




This section needs expansion. You can help by adding to it. (February 2017)



Main article: JavaScript § Features
The ECMAScript language includes structured, dynamic, functional, and prototype-based features.[36]
Syntax[edit]




This section is empty. You can help by adding to it. (February 2017)



Main article: ECMAScript syntax
Implementations[edit]
Main article: List of ECMAScript engines
ECMAScript is supported in many applications, especially Web browsers, where it is implemented by JavaScript, or, in the case of Internet Explorer, JScript. Implementations sometimes include extensions to the language, or to the standard library and related application programming interfaces (API) such as the World Wide Web Consortium (W3C) specified Document Object Model (DOM). This means that applications written in one implementation may be incompatible with another, unless they are written to use only a common subset of supported features and APIs.


Implementation
Applications
ECMAScript edition


SpiderMonkey
Firefox, the Gecko layout engine, Adobe Acrobat[d 1]
2017[37][d 2]


V8
Google Chrome, Node.js, Opera, others
2017[37][d 3]


JavaScriptCore (Nitro)
WebKit, Safari, Qt 5
2017[38]


Chakra
Microsoft Edge
5.1 and features from 2015,[d 4] 2016 and 2017[37]


JerryScript
Resource constrained IoT devices, Pebble
5.1[39]


JScript 9.0
Internet Explorer, the Trident layout engine
5.1[40]


Nashorn
Java 9
6[41]


Nashorn
Java
5.1[42]


Rhino
Java Platform, Standard Edition
3


Carakan (deprecated)
Opera 12
5.1[43][d 5]


KJS
KHTML
5.1 and features from 2015[citation needed]


Ejscript
Appweb Web Server, Samba 4
2015[44]


JScript .NET
Microsoft .NET Framework
3[d 6]


ActionScript
Adobe Flash, Adobe Flex, Adobe AIR
4[45]


ExtendScript
Adobe Creative Suite products: InDesign, Illustrator, Photoshop,
Bridge, After Effects, Premiere Pro
3[46]


InScript
iCab
3


Max/MSP engine
Max
3


QtScript (deprecated)
KDE SC 4
3


Caja

5[47]


Jsi
Javascript Interpreter Shell - Embeddable javascript interpreter[48]
5.1 and features from 6[49]





^ Adobe Acrobat X uses the SpiderMonkey 1.8 engine: JavaScript for Acrobat
^ According to the widely used compatibility table, Firefox supports the vast majority, but not all, of the features introduced in ECMAScript 2015. See Tracking bug for ECMAScript 6 in SpiderMonkey for missing features.
^ According to the widely used compatibility table, Chrome supports the vast majority, but not all, of the features introduced in ECMAScript 2015.
^ Microsoft states that Edge "supports most ES2015 features," supporting 81% of the specification as of May 2015 and 96% as of April 2017.[1][2]
^ Opera's implementation includes some JavaScript and JScript extensions: ECMAScript support in Opera Presto 2.3
^ Microsoft asserts that JScript 8.0 supports "almost all of the features of the ECMAScript Edition 3 Language Specification", but does not list the unsupported features.



Version correspondence[edit]
Items on the same line are approximately the same language.[50][51]


JavaScript
JScript
ECMAScript


1.0 (Netscape 2.0, March 1996)
1.0 (IE 3.0 – early versions, August 1996)



1.1 (Netscape 3.0, August 1996)
2.0 (IE 3.0 – later versions, January 1997)



1.2 (Netscape 4.0-4.05, June 1997)




1.3 (Netscape 4.06-4.7x, October 1998)
3.0 (IE 4.0, Oct 1997)
Edition 1 (June 1997) / Edition 2 (June 1998)


1.4 (Netscape Server only)
4.0 (Visual Studio 6, no IE release)




5.0 (IE 5.0, March 1999)




5.1 (IE 5.01)



1.5 (Netscape 6.0, Nov 2000; also
later Netscape and Mozilla releases)
5.5 (IE 5.5, July 2000)
Edition 3 (December 1999)



5.6 (IE 6.0, October 2001)



1.6 (Gecko 1.8, Firefox 1.5, November 2005)

Edition 3, with some compliant enhancements: ECMAScript for XML (E4X), Array extras (e.g. Array.prototype.forEach), Array and String generics (New in JavaScript 1.6)


1.7 (Gecko 1.8.1, Firefox 2, October 2006)

Edition 3 plus all JavaScript 1.6 enhancements, plus Pythonic generators and array comprehensions ([a*a for (a in iter)]), block scope with let, destructuring assignment (var [a,b]=[1,2]) (New in JavaScript 1.7)


1.8 (Gecko 1.9, Firefox 3, June 2008)

Edition 3 plus all JavaScript 1.7 enhancements, plus expression closures (function(x) x * x), generator expressions, and more (New in JavaScript 1.8)



JScript .NET (ASP.NET; no IE release)
(JScript .NET is said to have been designed with the participation of other Ecma members)[52]


Conformance tests[edit]
In 2010, Ecma International started developing a standards test for Ecma 262 ECMAScript.[53] Test262 is an ECMAScript conformance test suite that can be used to check how closely a JavaScript implementation follows the ECMAScript 5th Edition Specification. The test suite contains thousands of individual tests, each of which tests some specific requirements of the ECMAScript specification.
Development of test262 is a project of Ecma Technical Committee 39 (TC39). The testing framework and individual tests are created by member organizations of TC39 and contributed to Ecma for use in Test262.
Important contributions were made by Google (Sputnik testsuite) and Microsoft who both contributed thousands of tests. The Test262 testsuite already contains more than 11,000 tests and is being developed further as of 2013[update].
See also[edit]

ActionScript
Comparison of layout engines (ECMAScript)
Dart (programming language)
Document Object Model (DOM)
ECMAScript for XML (E4X)
JavaScript
JScript
List of ECMAScript engines
Qt Meta (or Modeling) Language (QML)
Server-side JavaScript
TypeScript
Gulp.js

References[edit]


^ Stefanov, Stoyan (2010). JavaScript Patterns. O'Reilly Media, Inc. p. 5. ISBN 9781449396947. Retrieved 2016-01-12. The core JavaScript programming language [...] is based on the ECMAScript standard, or ES for short. 
^ "TC39 - ECMAScript® (formerly TC39-TG1)". ecma-international.org. Ecma International. Retrieved 22 August 2015. 
^ "A Short History of JavaScript". W3C. Retrieved 31 March 2017. 
^ Krill, Paul (2008-06-23). "JavaScript creator ponders past, future". InfoWorld. Retrieved 2013-10-31. 
^ "Netscape and Sun Announce JavaScript, the Open, Cross-platform Object Scripting Language for Enterprise Networks and the Internet". Netscape. December 4, 1995. Archived from the original on 2007-09-16. Retrieved 2013-10-31. 
^ "Brendan's Roadmap Updates: Popularity". weblogs.mozillazine.org. Archived from the original on 17 May 2008. 
^ "Industry Leaders to Advance Standardization of Netscape's JavaScript at Standards Body Meeting". Netscape. November 15, 1996. Archived from the original on 1998-12-03. Retrieved 2013-10-31. 
^ "Will there be a suggested file suffix for es4?". Mail.mozilla.org. 2006-10-03. Retrieved 2013-10-31. 
^ "JScript VS JavaScript". About.com. 2015-11-25. 
^ a b c "ECMAScript 2017 Language Specification". Ecma International. June 2017. 
^ "Changes to JavaScript, Part 1: EcmaScript 5". YouTube. 2009-05-18. Retrieved 2013-10-31. 
^ a b c "ECMAScript 2015 Language Specification". Ecma International. June 2015. 
^ a b c "ECMAScript 2016 Language Specification". Ecma International. June 2016. 
^ "strawman:strawman [ES Wiki]". Wiki.ecmascript.org. 2013-09-18. Retrieved 2013-10-31. 
^ "tc39/ecma262". TC39. GitHub. Retrieved 27 December 2015. 
^ 2015-03-24 Meeting Notes. ESDiscuss. Also see Ecma withdrawn Standards. ECMA.
^ "ES4 overview paper released". Mail.mozilla.org. Retrieved 2013-10-31. 
^ "Proposed ECMAScript 4th Edition – Language Overview" (PDF). ecmascript.org. 23 October 2007. Archived from the original (PDF) on 13 July 2010. 
^ John Resig. "John Resig – Bug Fixes in JavaScript 2". Ejohn.org. Retrieved 2013-10-31. 
^ "Compatibility Between ES3 and Proposed ES4" (PDF). Ecmascript.org. Retrieved 2013-10-31. 
^ https://web.archive.org/web/20090419044026/http://www.ecma-international.org/publications/files/drafts/tc39-2009-025.pdf
^ "ECMAScript 3 and Beyond – IEBlog – Site Home – MSDN Blogs". Blogs.msdn.com. 2007-10-30. Retrieved 2013-10-31. 
^ "What I think about ES4. - Albatross! - Site Home – MSDN Blogs". Blogs.msdn.com. 2007-10-31. Retrieved 2013-10-31. 
^ "Open letter to Chris Wilson". Brendan Eich. 2007-10-31. Retrieved 2013-10-31. 
^ "JavaScript 2 and the Open Web". 2007-11-20. Retrieved 2014-01-20. 
^ "ECMAScript Harmony". Mail.mozilla.org. Retrieved 2013-10-31. 
^ "A Major Milestone in JavaScript Standardization – JScript Blog – Site Home – MSDN Blogs". Blogs.msdn.com. 2009-04-09. Retrieved 2013-10-31. 
^ "Ecma International finalises major revision of ECMAScript". Ecma International. 2009-04-09. Retrieved 2009-05-22. 
^ "Ecma latest news". Ecma-international.org. Retrieved 2013-10-31. 
^ http://www.infoworld.com/article/2937716/javascript/its-official-ecmascript-6-is-approved.html
^ http://www.wintellect.com/devcenter/nstieglitz/5-great-features-in-es6-harmony
^ https://www.smashingmagazine.com/2015/10/es6-whats-new-next-version-javascript/
^ http://es6-features.org/
^ "ECMAScript 6 compatibility table". 
^ http://wisdomgeek.com/web-development/using-es6-today-future-of-javascript/
^ "About". ECMAScript. Archived from the original on 2012-08-02. Retrieved 2009-12-17. 
^ a b c "ECMAScript 2016+ compatibility table". 
^ "Safari 10.1". Apple Developer. 24 January 2017. Support for ECMAScript 2016 and ECMAScript 2017 is available in Safari for macOS and iOS. 
^ "Samsung/jerryscript". GitHub. Retrieved 2016-11-24. 
^ "JavaScript Language Reference". Microsoft Docs. Retrieved 2017-04-24. 
^ "JEP 292: Implement Selected ECMAScript 6 Features in Nashorn". openjdk.java.net. Retrieved 2017-07-27. 
^ "Nashorn extensions". OpenJDK Wiki. Retrieved 2016-11-24. 
^ "Full ECMAScript 5.1 support in Opera 11.51+". Opera Desktop Team blog. 2011-09-13. Archived from the original on 2011-11-24. 
^ "Ejscript Overview". Embedthis Software. Retrieved 2016-11-14. 
^ Darrick Brown (May 25, 2006). "AS3 language 101 for C/C++ coders". Adobe Blogs: The Kiwi Project. 
^ http://blogs.adobe.com/wp-content/blogs.dir/48/files/2012/06/After-Effects-CS6-Scripting-Guide.pdf?file=2012/06/After-Effects-CS6-Scripting-Guide.pdf
^ "Caja Introduction". Google Developers. February 28, 2012. 
^ "Jsish". jsish.org. November 23, 2017. 
^ "Jsish Background". jsish.org. November 23, 2017. 
^ tedster (March 12, 2002). "JavaScript – JScript – ECMAScript version history". Webmasterworld.com. Retrieved 2009-12-17. 
^ "Version Information (JScript)". Msdn.microsoft.com. Archived from the original on 2009-12-17. Retrieved 2009-12-17. 
^ Andrew Clinick (July 14, 2000). "Introducing JScript .NET". Microsoft.com. Retrieved 2010-01-12. 
^ "ECMAScript Language – test262". Test262.ecmascript.org. Archived from the original on 2011-05-14. Retrieved 2013-10-31. 


External links[edit]

Official website
The World of ECMAScript: John Resig's map on ECMAScript


ISO Standard


ISO 16262


Ecma Standards


ECMA-262

ECMA-262 ECMAScript Language Specification 3rd edition (December 1999)
ECMAScript Language Specification, Edition 3 Final, 24-Mar-00
ECMA-262 ECMAScript Language Specification 5th edition (December 2009)
ECMA-262 ECMAScript Language Specification 5.1 edition (June 2011)


ECMA-290 ECMAScript Components Specification (June 1999)
ECMA-327 ECMAScript 3rd Edition Compact Profile (June 2001)
ECMA-357 ECMAScript for XML (E4X) Specification (June 2004)








v
t
e


Layout engines



Active



Blink
EdgeHTML
Gecko
Goanna
KHTML
MARTHA
Prince
QtWebEngine
Servo
WebKit





Discontinued



Amaya
Boxely
Gazelle
GtkHTML
HTMLayout
iCab
Mariner
Presto
Tasman
Tkhtml
Trident





Comparisons



HTML

non-standard HTML


HTML5

media
canvas


XML

XHTML

1.1


MathML
SVG


CSS
ECMAScript
DOM
Graphics
Typography












v
t
e


ECMAScript



Dialects



ActionScript
Caja
JavaScript

engines
asm.js


JScript
JScript .NET
QtScript
TypeScript
WMLScript





Engines
(comparison)



Carakan
Futhark
InScript
JavaScriptCore
JScript
KJS
Linear B
Narcissus
QtScript
Rhino
SpiderMonkey

TraceMonkey
JägerMonkey


Tamarin
V8
ChakraCore

Chakra


JScript .NET
Nashorn





Frameworks




Client-side



Ample SDK
Chaplin.js
Dojo
Echo
Ext JS
Google Web Toolkit
jQuery
Lively Kernel
midori
MochiKit
MooTools
Prototype
Pyjs
qooxdoo
Rialto
Rico
script.aculo.us
SmartClient
SproutCore
Spry
Wakanda Framework





Server-side



AppJet
Jaxer
Node.js
WakandaDB





Multiple



Cappuccino

Objective-J


PureMVC





Libraries



Backbone.js
SWFObject
SWFAddress
Underscore.js








People



Brendan Eich
Douglas Crockford
John Resig
Scott Isaacs





Other



DHTML
Ecma International
JSDoc
JSGI
JSHint
JSLint
JSON
JSSS
Sputnik
SunSpider
Asynchronous module definition
CommonJS








 Lists
JavaScript libraries
Ajax frameworks
 Comparisons
JavaScript frameworks
server-side JavaScript












v
t
e


Standards of Ecma International



Application interfaces



ANSI escape code
Common Language Infrastructure
Office Open XML
OpenXPS





File systems (tape)



Advanced Intelligent Tape
DDS
DLT
Super DLT
Holographic Versatile Disc
Linear Tape-Open (Ultrium-1)
VXA





File systems (disk)



CD-ROM
CD File System (CDFS)
FAT

FAT12
FAT16
FAT16B


FD
UDF
Ultra Density Optical
Universal Media Disc





Graphics



Universal 3D





Programming languages



C++/CLI
C#
Eiffel
JavaScript (E4X, ECMAScript)





Radio link interfaces



NFC
UWB





Other



ECMA-35






List of Ecma standards (1961 - Present)










v
t
e


ISO standards by standard number




List of ISO standards / ISO romanizations / IEC standards



1–9999



1
2
3
4
5
6
7
9
16
31

-0
-1
-2
-3
-4
-5
-6
-7
-8
-9
-10
-11
-12
-13


128
216
217
226
228
233
259
269
302
306
428
518
519
639

-1
-2
-3
-5
-6


646
690
732
764
843
898
965
1000
1004
1007
1073-1
1413
1538
1745
1989
2014
2015
2022
2047
2108
2145
2146
2240
2281
2709
2711
2788
2848
2852
3029
3103
3166

-1
-2
-3


3297
3307
3602
3864
3901
3977
4031
4157
4217
4909
5218
5428
5775
5776
5800
5964
6166
6344
6346
6385
6425
6429
6438
6523
6709
7001
7002
7098
7185
7200
7498
7736
7810
7811
7812
7813
7816
8000
8178
8217
8571
8583
8601
8632
8652
8691
8807
8820-5
8859

-1
-2
-3
-4
-5
-6
-7
-8
-8-I
-9
-10
-11
-12
-13
-14
-15
-16


8879
9000/9001
9075
9126
9293
9241
9362
9407
9506
9529
9564
9594
9660
9897
9899
9945
9984
9985
9995





10000–19999



10005
10006
10007
10116
10118-3
10160
10161
10165
10179
10206
10218
10303

-11
-21
-22
-28
-238


10383
10487
10585
10589
10646
10664
10746
10861
10957
10962
10967
11073
11170
11179
11404
11544
11783
11784
11785
11801
11898
11940 (-2)
11941
11941 (TR)
11992
12006
12182
12207
12234-2
13211

-1
-2


13216
13250
13399
13406-2
13450
13485
13490
13567
13568
13584
13616
14000
14031
14224
14289
14396
14443
14496

-2
-3
-6
-10
-11
-12
-14
-17
-20


14644
14649
14651
14698
14750
14764
14882
14971
15022
15189
15288
15291
15292
15398
15408
15444

-3


15445
15438
15504
15511
15686
15693
15706

-2


15707
15897
15919
15924
15926
15926 WIP
15930
16023
16262
16612-2
16750
16949 (TS)
17024
17025
17100
17203
17369
17442
17799
18000
18004
18014
18245
18629
18916
19005
19011
19092 (-1
-2)
19114
19115
19125
19136
19439
19500
19501
19502
19503
19505
19506
19507
19508
19509
19510
19600:2014
19752
19757
19770
19775-1
19794-5
19831





20000+



20000
20022
20121
20400
21000
21047
21500
21827:2002
22000
23270
23271
23360
24517
24613
24617
24707
25178
25964
26000
26300
26324
27000 series
27000
27001:2005
27001:2013
27002
27006
27729
28000
29110
29148
29199-2
29500
30170
31000
32000
38500
40500
42010
55000
80000

-1
-2
-3










 Category












v
t
e


List of International Electrotechnical Commission standards



IEC standards



IEC 60027
IEC 60034
IEC 60038
IEC 60062
IEC 60063
IEC 60068
IEC 60112
IEC 60228
IEC 60269
IEC 60297
IEC 60309
IEC 60320
IEC 60364
IEC 60446
IEC 60559
IEC 60601
IEC 60870

IEC 60870-5
IEC 60870-6


IEC 60906-1
IEC 60908
IEC 60929
IEC 60958

AES3
S/PDIF


IEC 61030
IEC 61131

IEC 61131-3


IEC 61158
IEC 61162
IEC 61334
IEC 61346
IEC 61355
IEC 61400
IEC 61499
IEC 61508
IEC 61511
IEC 61850
IEC 61851
IEC 61883
IEC 61960
IEC 61968
IEC 61970
IEC 62014-4
IEC 62056
IEC 62061
IEC 62196
IEC 62262
IEC 62264
IEC 62304
IEC 62325
IEC 62351
IEC 62365
IEC 62366
IEC 62379
IEC 62386
IEC 62455
IEC 62680
IEC 62682
IEC 62700





ISO/IEC standards



ISO/IEC 646
ISO/IEC 2022
ISO/IEC 4909
ISO/IEC 5218
ISO/IEC 6429
ISO/IEC 6523
ISO/IEC 7810
ISO/IEC 7811
ISO/IEC 7812
ISO/IEC 7813
ISO/IEC 7816
ISO/IEC 7942
ISO/IEC 8613
ISO/IEC 8632
ISO/IEC 8652
ISO/IEC 8859
ISO/IEC 9126
ISO/IEC 9293
ISO/IEC 9592
ISO/IEC 9593
ISO/IEC 9899
ISO/IEC 9945
ISO/IEC 9995
ISO/IEC 10021
ISO/IEC 10116
ISO/IEC 10165
ISO/IEC 10179
ISO/IEC 10646
ISO/IEC 10967
ISO/IEC 11172
ISO/IEC 11179
ISO/IEC 11404
ISO/IEC 11544
ISO/IEC 11801
ISO/IEC 12207
ISO/IEC 13250
ISO/IEC 13346
ISO/IEC 13522-5
ISO/IEC 13568
ISO/IEC 13818
ISO/IEC 14443
ISO/IEC 14496
ISO/IEC 14882
ISO/IEC 15288
ISO/IEC 15291
ISO/IEC 15408
ISO/IEC 15444
ISO/IEC 15445
ISO/IEC 15504
ISO/IEC 15511
ISO/IEC 15693
ISO/IEC 15897
ISO/IEC 15938
ISO/IEC 16262
ISO/IEC 17024
ISO/IEC 17025
ISO/IEC 18000
ISO/IEC 18004
ISO/IEC 18014
ISO/IEC 19752
ISO/IEC 19757
ISO/IEC 19770
ISO/IEC 19788
ISO/IEC 20000
ISO/IEC 21000
ISO/IEC 21827
ISO/IEC 23000
ISO/IEC 23003
ISO/IEC 23008
ISO/IEC 23270
ISO/IEC 23360
ISO/IEC 24707
ISO/IEC 24727
ISO/IEC 24744
ISO/IEC 24752
ISO/IEC 26300
ISO/IEC 27000
ISO/IEC 27000-series
ISO/IEC 27002
ISO/IEC 27040
ISO/IEC 29119
ISO/IEC 33001
ISO/IEC 38500
ISO/IEC 42010
ISO/IEC 80000





Related



International Electrotechnical Commission











						Retrieved from "https://en.wikipedia.org/w/index.php?title=ECMAScript&oldid=816401219"					Categories: Computer-related introductions in 1997C programming language familyComputer standardsDynamically typed programming languagesEcma standardsJavaScript dialect enginesJavaScript programming language familyObject-based programming languagesProgramming languages with an ISO standardPrototype-based programming languagesScripting languagesHidden categories: Pages using deprecated image syntaxArticles to be expanded from February 2017All articles to be expandedArticles using small message boxesArticles with empty sections from February 2017All articles with empty sectionsAll articles with unsourced statementsArticles with unsourced statements from April 2017Articles containing potentially dated statements from 2013All articles containing potentially dated statements