For the cryptography meaning, see Plaintext. For other uses, see Text (disambiguation).






This article needs additional citations for verification. Please help improve this article by adding citations to reliable sources. Unsourced material may be challenged and removed. (August 2012) (Learn how and when to remove this template message)







Text file of The Human Side of Animals by Royal Dixon, displayed by the command cat in an xterm window


In computing, plain text is the data (e.g. file contents) that represent only characters of readable material but not its graphical representation nor other objects (images, etc.). It may also include a limited number of characters that control simple arrangement of text, such as line breaks or tabulation characters. Plain text is different from formatted text, where style information is included, and from "binary files" in which some portions must be interpreted as binary objects (encoded integers, real numbers, images, etc.).
The encoding has traditionally been either ASCII, sometimes EBCDIC. Unicode-based encodings such as UTF-8 and UTF-16 are gradually replacing the older ASCII derivatives limited to 7 or 8 bit codes.



Contents


1 Plain text and rich text
2 Plain text, the Unicode definition
3 Usage
4 Encoding

4.1 Character encodings
4.2 Control codes


5 See also
6 References



Plain text and rich text[edit]
Files that contain markup or other meta-data are generally considered plain-text, as long as the entirety remains in directly human-readable form (as in HTML, XML, and so on (as Coombs, Renear, and DeRose argue,[1] punctuation is itself markup)). The use of plain text rather than bit-streams to express markup, enables files to survive much better "in the wild", in part by making them largely immune to computer architecture incompatibilities.
According to The Unicode Standard,

"Plain text is a pure sequence of character codes; plain Ue-encoded text is therefore a sequence of Unicode character codes."
styled text, also known as rich text, is any text representation containing plain text completed by information such as a language identifier, font size, color, hypertext links.[2]

For instance, rich text such as SGML, RTF, HTML, XML, wiki markup, and TeX rely on plain text.
According to The Unicode Standard, plain text has two main properties in regard to rich text:

"plain text is the underlying content stream to which formatting can be applied."
"Plain text is public, standardized, and universally readable.".[2]

Plain text, the Unicode definition[edit]
The Unicode definition of plain text:

"Plain text represents the basic, interchangeable content of text."
"Plain text represents character content only, not its appearance."
"It can be displayed in a variety of ways and requires a rendering process to make it visible with a particular appearance."
"If the same plain text sequence is given to disparate rendering processes, there is no expectation that rendered text in each instance should have the same appearance."
"Instead, the disparate rendering processes are simply required to make the text legible according to the intended reading."
"This legibility criterion constrains the range of possible appearances."
"The relationship between appearance and content of plain text may be summarized as follows: Plain text must contain enough information to permit the text to be rendered legibly, and nothing more."
"The Unicode Standard encodes plain text."
"The distinction between plain text and other forms of data in the same data stream is the function of a higher-level protocol and is not specified by the Unicode Standard itself."[3]

Usage[edit]
The purpose of using plain text today is primarily independence from programs that require their very own special encoding or formatting or file format. Plain text files can be opened, read, and edited with countless text editors and utilities.
A command-line interface allows people to give commands in plain text and get a response, also in plain text.
Many other computer programs are also capable of processing or creating plain text, such as countless programs in DOS, Windows, classic Mac OS, and Unix and its kin; as well as web browsers (a few browsers such as Lynx and the Line Mode Browser produce only plain text for display) and other e-text readers.
Plain text files are almost universal in programming; a source code file containing instructions in a programming language is almost always a plain text file. Plain text is also commonly used for configuration files, which are read for saved settings at the startup of a program.
Plain text is used for much e-mail.
A comment, a ".txt" file, or a TXT Record generally contains only plain text (without formatting) intended for humans to read.
The best format for storing knowledge persistently is plain text, rather than some binary format.[4]
Encoding[edit]
Character encodings[edit]
Main article: Character encoding
Before the early 1960s, computers were mainly used for number-crunching rather than for text, and memory was extremely expensive. Computers often allocated only 6 bits for each character, permitting only 64 characters—assigning codes for A-Z, a-z, and 0-9 would leave only 2 codes: nowhere near enough. Most computers opted not to support lower-case letters. Thus, early text projects such as Roberto Busa's Index Thomisticus, the Brown Corpus, and others had to resort to conventions such as keying an asterisk preceding letters actually intended to be upper-case.
Fred Brooks of IBM argued strongly for going to 8-bit bytes, because someday people might want to process text; and won. Although IBM used EBCDIC, most text from then on came to be encoded in ASCII, using values from 0 to 31 for (non-printing) control characters, and values from 32 to 127 for graphic characters such as letters, digits, and punctuation. Most machines stored characters in 8 bits rather than 7, ignoring the remaining bit or using it as a checksum.
The near-ubiquity of ASCII was a great help, but failed to address international and linguistic concerns. The dollar-sign ("$") was not so useful in England, and the accented characters used in Spanish, French, German, and many other languages were entirely unavailable in ASCII (not to mention characters used in Greek, Russian, and most Eastern languages). Many individuals, companies, and countries defined extra characters as needed—often reassigning control characters, or using value in the range from 128 to 255. Using values above 128 conflicts with using the 8th bit as a checksum, but the checksum usage gradually died out.
These additional characters were encoded differently in different countries, making texts impossible to decode without figuring out the originator's rules. For instance, a browser might display ¬A rather than ` if it tried to interpret one character set as another. The International Organisation for Standardisation (ISO) eventually developed several code pages under ISO 8859, to accommodate various languages. The first of these (ISO 8859-1) is also known as"Latin-1", and covers the needs of most (not all) European languages that use Latin-based characters (there was not quite enough room to cover them all). ISO 2022 then provided conventions for"switching" between different character sets in mid-file. Many other organisations developed variations on these, and for many years Windows and Macintosh computers used incompatible variations.
The text-encoding situation became more and more complex, leading to efforts by ISO and by the Unicode Consortium to develop a single, unified character encoding that could cover all known (or at least all currently known) languages. After some conflict,[citation needed] these efforts were unified. Unicode currently allows for 1,114,112 code values, and assigns codes covering nearly all modern text writing systems, as well as many historical ones and for many non-linguistic characters such as printer's dingbats, mathematical symbols, etc.
Text is considered plain-text regardless of its encoding. To properly understand or process it the recipient must know (or be able to figure out) what encoding was used; however, they need not know anything about the computer architecture that was used, or about the binary structures defined by whatever program (if any) created the data.
Perhaps the most common way of explicitly stating the specific encoding of plain text is with a MIME type. For email and http, the default MIME type is "text/plain" -- plain text without markup. Another MIME type often used in both email and http is "text/html; charset=UTF-8" -- plain text represented using UTF-8 character encoding with HTML markup. Another common MIME type is "application/json" -- plain text represented using UTF-8 character encoding with JSON markup.
When a document is received without any explicit indication of the character encoding, some applications use charset detection to attempt to guess what encoding was used.
Control codes[edit]
Main article: C0 and C1 control codes
ASCII reserves the first 32 codes (numbers 0–31 decimal) for control characters known as the "C0 set": codes originally intended not to represent printable information, but rather to control devices (such as printers) that make use of ASCII, or to provide meta-information about data streams such as those stored on magnetic tape. They include common characters like the newline and the tab character.
In 8-bit character sets such as Latin-1 and the other ISO 8859 sets, the first 32 characters of the "upper half" (128 to 159) are also control codes, known as the "C1 set". They are rarely used directly; when they turn up in documents which are ostensibly in an ISO 8859 encoding, their code positions generally refer instead to the characters at that position in a proprietary, system-specific encoding, such as Windows-1252 or Mac OS Roman, that use the codes to instead provide additional graphic characters.
Main article: Unicode control characters
Unicode defines additional control characters, including bi-directional text direction override characters (used to explicitly mark right-to-left writing inside left-to-right writing and the other way around) and variation selectors to select alternate forms of CJK ideographs, emoji and other characters.
See also[edit]

Plaintext or cleartext, most commonly used in a cryptographic context
Binary file
Text file
Source code
Word wrap

References[edit]



^ Coombs, James H.; Renear, Allen H.; DeRose, Steven J. (November 1987). "Markup systems and the future of scholarly text processing". Communications of the ACM. ACM. 30 (11): 933–947. doi:10.1145/32206.32209. 
^ a b The Unicode Standard, version 6.1, General Structure, page 14
^ The Unicode Standard, version 6.1, General Structure, page 15
^ Andrew Hunt, David Thomas. "The Pragmatic Programmer". 1999. Chapter 14: "The Power of Plain Text". p. 73.









v
t
e


Data types



Uninterpreted



Bit
Byte
Trit
Tryte
Word
Bit array





Numeric



Arbitrary-precision or bignum
Complex
Decimal
Fixed point
Floating point

Double precision
Extended precision
Half precision
Long double
Minifloat
Octuple precision
Quadruple precision
Single precision


Integer

signedness


Interval
Rational





Pointer



Address

physical
virtual


Reference





Text



Character
String

null-terminated







Composite



Algebraic data type

generalized


Array
Associative array
Class
Dependent
Equality
Inductive
List
Object

metaobject


Option type
Product
Record
Set
Union

tagged







Other



Boolean
Bottom type
Collection
Enumerated type
Exception
Function type
Opaque data type
Recursive data type
Semaphore
Stream
Top type
Type class
Unit type
Void





Related
topics



Abstract data type
Data structure
Generic
Kind

metaclass


Parametric polymorphism
Primitive data type
Protocol

interface


Subtyping
Type constructor
Type conversion
Type system






See also platform-dependent and independent units of information









						Retrieved from "https://en.wikipedia.org/w/index.php?title=Plain_text&oldid=815217901"					Categories: Text file formatsOpen formatsHidden categories: Articles needing additional references from August 2012All articles needing additional referencesAll articles with unsourced statementsArticles with unsourced statements from February 2012