"Non-free software" redirects here. It is not to be confused with Commercial software or Business software.






This article needs additional citations for verification. Please help improve this article by adding citations to reliable sources. Unsourced material may be challenged and removed. (March 2017) (Learn how and when to remove this template message)



Proprietary software is computer software for which the software's publisher or another person retains intellectual property rights—usually copyright of the source code,[1] but sometimes patent rights.[2]



Contents


1 Software becoming proprietary
2 Legal basis

2.1 Limitations


3 Exclusive rights

3.1 Use of the software
3.2 Inspection and modification of source code
3.3 Redistribution


4 Interoperability with software and hardware

4.1 Proprietary file formats and protocols
4.2 Proprietary APIs
4.3 Vendor lock-in
4.4 Software limited to certain hardware configurations


5 Abandonment by owners
6 Formerly open-source software
7 Pricing and economics
8 Examples
9 See also
10 References



Software becoming proprietary[edit]
Until the late 1960s computers—large and expensive mainframe computers, machines in specially air-conditioned computer rooms—were leased to customers rather than sold.[3][4] Service and all software available were usually supplied by manufacturers without separate charge until 1969.[citation needed] Computer vendors usually provided the source code for installed software to customers.[citation needed] Customers who developed software often made it available to others without charge.[5] Closed source means computer programs whose source code is not published. It is available to be edited only by the organization by which it is developed.
In 1969, IBM, which had antitrust lawsuits pending against it, led an industry change by starting to charge separately for mainframe software[6][7][page needed] and services, by unbundling hardware and software.[8]
Bill Gates' "Open Letter to Hobbyists" in 1976 decried computer hobbyists' rampant copyright infringement of software, particularly Microsoft's Altair BASIC interpreter, and reminded his audience that their theft from programmers hindered his ability to produce quality software.[9]
According to Brewster Kahle the legal characteristic of software changed also due to the U.S. Copyright Act of 1976.[10]
Starting in February 1983 IBM adopted an "object-code-only" model for a growing list of their software and stopped shipping source code.[11][12]
In 1983, binary software became also copyrightable in the United States by the Apple vs. Franklin law decision,[13] before that only source code was copyrightable.[14] Additionally, the growing availability of millions of computers based on the same microprocessor architecture created for the first time an unfragmented and big enough market for binary distributed software.[14]
Legal basis[edit]
Further information: Software law, Software copyright, Software patent, and End-user license agreement
Most software is covered by copyright which, along with contract law, patents, and trade secrets, provides legal basis for its owner to establish exclusive rights.[15]
A software vendor delineates the specific terms of use in an end-user license agreement (EULA). The user may agree to this contract in writing, interactively on screen (clickwrap), or by opening the box containing the software (shrink wrap licensing). License agreements are usually not negotiable.[16] Software patents grant exclusive rights to algorithms, software features, or other patentable subject matter, with coverage varying by jurisdiction. Vendors sometimes grant patent rights to the user in the license agreement.[17] The source code for a piece of software is routinely handled as a trade secret.[18] Occasionally, software is made available with fewer restrictions on licensing or source-code access; such software is known as "free" or "open-source."[19]
Limitations[edit]
Because license agreements do not override applicable copyright law or contract law, provisions in conflict with applicable law are not enforceable.[20] Some software is specifically licensed and not sold, in order to avoid limitations of copyright such as the first-sale doctrine.[21]
Exclusive rights[edit]
The owner of proprietary software exercises certain exclusive rights over the software. The owner can restrict use, inspection of source code, modification of source code, and redistribution.
Use of the software[edit]
Further information: Copy protection, Damaged good, and Price discrimination
Vendors typically limit the number of computers on which software can be used, and prohibit the user from installing the software on extra computers.[citation needed] Restricted use is sometimes enforced through a technical measure, such as product activation, a product key or serial number, a hardware key, or copy protection.
Vendors may also distribute versions that remove particular features, or versions which allow only certain fields of endeavor, such as non-commercial, educational, or non-profit use.
Use restrictions vary by license:

Windows Vista Starter is restricted to running a maximum of three concurrent applications.
The retail edition of Microsoft Office Home and Student 2007 is limited to non-commercial use on up to three devices in one household.
Windows XP can be installed on one computer, and limits the number of network file sharing connections to 10.[22] The Home Edition disables features present in Windows XP Professional.
Traditionally, Adobe licenses are limited to one user, but allow the user to install a second copy on a home computer or laptop.[23] This is no longer true with the switching to Creative Cloud.
iWork '09, Apple's productivity suite, is available in a five-user family pack, for use on up to five computers in a household.[24]

Inspection and modification of source code[edit]
See also: Open source and Anti-features
Vendors typically distribute proprietary software in compiled form, usually the machine language understood by the computer's central processing unit. They typically retain the source code, or human-readable version of the software, written in a higher level programming language.[25] This scheme is often referred to as closed source.[26]
While most proprietary software is distributed without the source code, some vendors distribute the source code or otherwise make it available to customers. For example, users who have purchased a license for the Internet forum software vBulletin can modify the source for their own site but cannot redistribute it. This is true for many web applications, which must be in source code form when being run by a web server. The source code is covered by a non-disclosure agreement or a license that allows, for example, study and modification, but not redistribution.[citation needed] The text-based email client Pine and certain implementations of Secure Shell are distributed with proprietary licenses that make the source code available.[citation needed]
Some governments fear that proprietary software may include defects or malicious features which would compromise sensitive information. In 2003 Microsoft established a Government Security Program (GSP) to allow governments to view source code and Microsoft security documentation, of which the Chinese government was an early participant.[27][28] The program is part of Microsoft's broader Shared Source Initiative which provides source code access for some products. The Reference Source License (Ms-RSL) and Limited Public License (Ms-LPL) are proprietary software licenses where the source code is made available.
Governments have also been accused of adding such malware to software themselves. According to documents released by Edward Snowden, the NSA has used covert partnerships with software companies to make commercial encryption software exploitable to eavesdropping, or to insert backdoors.[29][30]
Software vendors sometimes use obfuscated code to impede users who would reverse engineer the software.[citation needed] This is particularly common with certain programming languages.[citation needed] For example, the bytecode for programs written in Java can be easily decompiled to somewhat usable code,[citation needed] and the source code for programs written in scripting languages such as PHP or JavaScript is available at run time.[31]
Redistribution[edit]
Further information: Shareware
See also: Freely redistributable software
Proprietary software vendors can prohibit users from sharing the software with others. Another unique license is required for another party to use the software.
In the case of proprietary software with source code available, the vendor may also prohibit customers from distributing their modifications to the source code.
Shareware is closed-source software whose owner encourages redistribution at no cost, but which the user sometimes must pay to use after a trial period. The fee usually allows use by a single user or computer. In some cases, software features are restricted during or after the trial period, a practice sometimes called crippleware.
Interoperability with software and hardware[edit]
Further information: Interoperability of software
Proprietary file formats and protocols[edit]
Further information: Proprietary format and Proprietary protocol
Proprietary software often[citation needed] stores some of its data in file formats which are incompatible with other software, and may also communicate using protocols which are incompatible. Such formats and protocols may be restricted as trade secrets or subject to patents.[citation needed]
Proprietary APIs[edit]
A proprietary application programming interface (API) is a software library interface "specific to one device or, more likely to a number of devices within a particular manufacturer's product range."[32] The motivation for using a proprietary API can be vendor lock-in or because standard APIs do not support the device's functionality.[32]
The European Commission, in its March 24, 2004 decision on Microsoft's business practices,[33] quotes, in paragraph 463, Microsoft general manager for C++ development Aaron Contorer as stating in a February 21, 1997 internal Microsoft memo drafted for Bill Gates:

The Windows API is so broad, so deep, and so functional that most ISVs would be crazy not to use it. And it is so deeply embedded in the source code of many Windows apps that there is a huge switching cost to using a different operating system instead.

Early versions of the iPhone SDK were covered by a non-disclosure agreement. The agreement forbade independent developers from discussing the content of the interfaces. Apple discontinued the NDA in October 2008.[34]
Vendor lock-in[edit]
Further information: Vendor lock-in
A dependency on the future versions and upgrades for a proprietary software package can create vendor lock-in, entrenching a monopoly position.[35]
Software limited to certain hardware configurations[edit]
Proprietary software may also have licensing terms that limit the usage of that software to a specific set of hardware. Apple has such a licensing model for Mac OS X, an operating system which is limited to Apple hardware, both by licensing and various design decisions. This licensing model has been affirmed by the United States Court of Appeals.[36]
Abandonment by owners[edit]
Main article: Abandonware
Proprietary software which is no longer marketed, supported or sold by its owner is called abandonware, the digital form of orphaned works. If the proprietor of a software package should cease to exist, or decide to cease or limit production or support for a proprietary software package, recipients and users of the package may have no recourse if problems are found with the software. Proprietors can fail to improve and support software because of business problems.[37] Support for older or existing versions of a software package may be ended to force users to upgrade and pay for newer versions[38] (planned obsolescence). Sometimes another vendor or a software's community themselves can provide support for the software, or the users can migrate to either competing systems with longer support life cycles or to FOSS-based systems.[39]
Some closed-source software is released by their owner at end-of-life as open-source or source available software, often to prevent the software from becoming unsupported and unavailable abandonware.[40][41][42] 3D Realms and id Software are famous for the practice of releasing closed source software into the open source. Some of those kinds are free-of-charge downloads (freeware), some are still commercially sold (e.g. Arx Fatalis). More examples of formerly closed-source software in the List of commercial software with available source code and List of commercial video games with available source code.
Formerly open-source software[edit]
See also: List of formerly proprietary software
Some formerly open-source software was made proprietary later. Sometimes for commercialization reasons, sometimes as security or anti-cheat measurement (Security through obscurity). A famous example of such is the Doom source port ZDaemon which was prone to aimbot cheaters.[43]
Pricing and economics[edit]
See also: Commercial software
Proprietary software is not synonymous with commercial software,[44][45] although the two terms are sometimes used synonymously in articles about free software.[46][47] Proprietary software can be distributed at no cost or for a fee, and free software can be distributed at no cost or for a fee.[48] The difference is that whether or not proprietary software can be distributed, and what the fee would be, is at the proprietor's discretion. With free software, anyone who has a copy can decide whether, and how much, to charge for a copy or related services.[49]
Proprietary software that comes for no cost is called freeware.
Proponents of commercial proprietary software argue that requiring users to pay for software as a product increases funding or time available for the research and development of software. For example, Microsoft says that per-copy fees maximise the profitability of software development.[50]
Proprietary software generally creates greater commercial activity over free software, especially in regard to market revenues.[51]
Examples[edit]
Examples of proprietary software include Microsoft Windows, Adobe Flash Player, PS3 OS, iTunes, Adobe Photoshop, Google Earth, macOS (formerly Mac OS X and OS X), Skype, WinRAR, Oracle's version of Java and some versions of Unix.
Software distributions considered as proprietary may in fact incorporate a "mixed source" model including both free and non-free software in the same distribution.[52] Most if not all so-called proprietary UNIX distributions are mixed source software, bundling open-source components like BIND, Sendmail, X Window System, DHCP, and others along with a purely proprietary kernel and system utilities.[53][54]
Some free software packages are also simultaneously available under proprietary terms. Examples include MySQL, Sendmail and ssh. The original copyright holders for a work of free software, even copyleft free software, can use dual-licensing to allow themselves or others to redistribute proprietary versions. Non-copyleft free software (i.e. software distributed under a permissive free software license or released to the public domain) allows anyone to make proprietary redistributions.[55][56] Free software that depends on proprietary software is considered "trapped" by the Free Software Foundation. This includes software written only for Microsoft Windows,[57] or software that could only run on Java, before it became free software.[58]
In India, one and a half million laptops were pre-loaded with screen savers of political minister Mulayam Singh Yadav. The author of software developed for these laptops included a malicious feature that would "crash" the device if the laptop's owner attempted to change, remove, or modify this feature.[59]
See also[edit]



Look up proprietary or software in Wiktionary, the free dictionary.




Business software
Commercial off-the-shelf
Comparison of open-source and closed-source software
List of proprietary software for Linux
Proprietary hardware
Retail software


References[edit]


^ Saraswati Experts. "2.5.3". COMPUTER SCIENCE WITH C++. Saraswati House Pvt Ltd. p. 1.27. ISBN 978-93-5199-877-8. Retrieved 29 June 2017. 
^ AUUG, Inc. (March 2003). "Chapter 1. Definitions". AUUGN. AUUG, Inc. p. 51. Retrieved 29 June 2017. 
^ Ceruzzi, Paul E. (2003). A History of Modern Computing. Cambridge, MA: MIT Press. p. 128. ISBN 0-262-53203-4. Although IBM agreed to sell its machines as part of a Consent Decree effective January 1956, leasing continued to be its preferred way of doing business 
^ "The History of Equipment Leasing", Lease Genie, n.d., archived from the original on April 11, 2008, retrieved November 12, 2010, In the 1960s, IBM and Xerox recognized that substantial sums could be made from the financing of their equipment. The leasing of computer and office equipment that occurred then was a significant contribution to leasings [sic] growth, since many companies were exposed to equipment leasing for the first time when they leased such equipment. 
^ "Overview of the GNU System". GNU Operating System. Free Software Foundation. 16 June 2016. Retrieved 29 June 2017. 
^ Pugh, Emerson W. (2002). Origins of Software Bundling. IEEE Annals of the History of Computing. 24. pp. 57–58. 
^ Hamilton, Thomas W. (1969). IBM's Unbundling Decision: Consequences for Users and the Industry. Programming Sciences Corporation. 
^ IBM (n.d.). "Chronological History of IBM: 1960s". Retrieved May 28, 2016. Rather than offer hardware, services and software exclusively in packages, marketers 'unbundled' the components and offered them for sale individually. Unbundling gave birth to the multibillion-dollar software and services industries, of which IBM is today a world leader. 
^ Gates, Bill (February 3, 1976). "An Open Letter to Hobbyists". Retrieved May 28, 2016. 
^ Robert X. Cringely's interview with Brewster Kahle, 46th minute
^ Cantrill, Bryan (2014-09-17). "Corporate Open Source Anti-patterns" (video). youtube.com. Retrieved 2015-12-26. [at 3:15] 
^ Gallant, John (1985-03-18). "IBM policy draws fire - Users say source code rules hamper change". Computerworld. Retrieved 2015-12-27. While IBM's policy of withholding source code for selected software products has already marked its second anniversary, users are only now beginning to cope with the impact of that decision. But whether or not the advent of object-code-only products has affected their day-to-day DP operations, some users remain angry about IBM's decision. Announced in February 1983, IBM's object-code-only policy has been applied to a growing list of Big Blue system software products 
^ Impact of Apple vs. Franklin Decision
^ a b Landley, Rob (2009-05-23). "23-05-2009". landley.net. Retrieved 2015-12-02. So if open source used to be the norm back in the 1960's and 70's, how did this _change_? Where did proprietary software come from, and when, and how? How did Richard Stallman's little utopia at the MIT AI lab crumble and force him out into the wilderness to try to rebuild it? Two things changed in the early 80's: the exponentially growing installed base of microcomputer hardware reached critical mass around 1980, and a legal decision altered copyright law to cover binaries in 1983. Increasing volume: The microprocessor creates millions of identical computers 
^ Liberman, Michael (1995). "Overreaching Provisions in Software License Agreements". Richmond Journal of Law and Technology. 1: 4. Retrieved November 29, 2011. 
^ Limitations and Exceptions to Copyright and Neighbouring Rights in the Digital Environment: An International Library Perspective (2004). IFLA (2013-01-22). Retrieved on 2013-06-16.
^ Daniel A. Tysver (2008-11-23). "Why Protect Software Through Patents". Bitlaw.com. Retrieved 2009-06-03. In connection with software, an issued patent may prevent others from utilizing a certain algorithm (such as the GIF image compression algorithm) without permission, or may prevent others from creating software programs that perform a function in a certain way. In connection with computer software, copyright law can be used to prevent the total duplication of a software program, as well as the copying of a portion of software code. 
^ Donovan, S. (1994). "Patent, copyright and trade secret protection for software". Potentials, IEEE. 13 (3): 20. doi:10.1109/45.310923. Essentially there are only three ways to protect computer software under the law: patent it, register a copyright for it, or keep it as a trade secret. 
^ Eben Moglen (2005-02-12). "Why the FSF gets copyright assignments from contributors". Retrieved 2009-06-26. Under US copyright law, which is the law under which most free software programs have historically been first published, [...] only the copyright holder or someone having assignment of the copyright can enforce the license. 
^ White, Aoife (2012-07-03). "Oracle Can't Stop Software License Resales, EU Court Says". Bloomberg. 
^ Microsoft Corporation (2005-04-01). "End-User License Agreement for Microsoft Software: Microsoft Windows XP Professional Edition Service Pack 2" (PDF). p. Page 3. Retrieved 2009-04-29. 
^ Microsoft Corporation (2005-04-01). "End-User License Agreement for Microsoft Software: Microsoft Windows XP Professional Edition Service Pack 2" (PDF). p. Page 1. Retrieved 2009-04-29. You may install, use, access, display and run one copy of the Software on a single computer, such as a workstation, terminal or other device (“Workstation Computer”). The Software may not be used by more than two (2) processors at any one time on any single Workstation Computer. ... You may permit a maximum of ten (10) computers or other electronic devices (each a 'Device') to connect to the Workstation Computer to utilize one or more of the following services of the Software: File Services, Print Services, Internet Information Services, Internet Connection Sharing and telephony services. 
^ Adobe Systems, Adobe Software License Agreement (PDF), retrieved 2010-06-09 
^ iWork '09 Family Pack Specs (complete package) - Presentation - CNET Reviews. Reviews.cnet.com. Retrieved on 2013-06-16.
^ Heffan, Ira V. (1997). "Copyleft: Licensing Collaborative Works in the Digital Age" (PDF). Stanford Law Review. 49: 1490. Under the proprietary software model, most software developers withhold their source code from users. 
^ David A. Wheeler (2009-02-03). "Free-Libre / Open Source Software (FLOSS) is Commercial Software". Retrieved 2009-06-03. 
^ Shankland, Stephen. "Governments to see Windows code". CNET. 
^ Gao, Ken. "China to view Windows code". CNET. 
^ James Ball, Julian Borger and Glenn Greenwald (2013-09-06). "US and UK spy agencies defeat privacy and security on the internet". The Guardian. 
^ Bruce Schneier (2013-09-06). "How to remain secure against NSA surveillance". The Guardian. 
^ Tony Patton (2008-11-21). "Protect your JavaScript with obfuscation". Retrieved 2009-06-12. While the Web promotes the sharing of such code, there are times when you or a client may not want to share their JavaScript code. This may be due to the sensitive nature of data within the code, proprietary calculations, or any other scenario. 
^ a b APIs: What they are, and what they're for - Feature - Techworld.com. Features.techworld.com. Retrieved on 2013-06-16.
^ "Commission Decision of 24.03.2004 relating to a proceeding under Article 82 of the EC Treaty (Case COMP/C-3/37.792 Microsoft)" (PDF). European Commission. March 24, 2004. Archived from the original (PDF) on October 28, 2008. Retrieved June 17, 2009. 
^ Wilson, Ben (2008-10-01). "Apple Drops NDA for Released iPhone Software". CNET Reviews. Retrieved 2010-12-17. 
^ The Linux Information Project (2006-04-29). "Vendor Lock-in Definition". Retrieved 2009-06-11. Vendor lock-in, or just lock-in, is the situation in which customers are dependent on a single manufacturer or supplier for some product [...] This dependency is typically a result of standards that are controlled by the vendor [...] It can grant the vendor some extent of monopoly power [...] The best way for an organization to avoid becoming a victim of vendor lock-in is to use products that conform to free, industry-wide standards. Free standards are those that can be used by anyone and are not controlled by a single company. In the case of computers, this can usually be accomplished by using free software rather than proprietary software (i.e., commercial software). 
^ Apple wins key battle against Psystar over Mac clones (2011-09-29). "Apple court victory over Pystar". Retrieved 2011-09-30. 
^ "What happens when a proprietary software company dies?". NewsForge. October 2003. Retrieved 2007-03-05. 
^ "Microsoft Turns Up The Heat On Windows 2000 Users". InformationWeek. December 2006. Retrieved 2008-09-16. 
^ Cassia, Fernando (March 28, 2007). "Open Source, the only weapon against 'planned obsolescence'". The Inquirer. Retrieved August 2, 2012. 
^ Bell, John (October 1, 2009). "Opening the Source of Art". Technology Innovation Management Review. Archived from the original on March 30, 2014. Retrieved December 30, 2012. [...]that no further patches to the title would be forthcoming. The community was predictably upset. Instead of giving up on the game, users decided that if Activision wasn't going to fix the bugs, they would. They wanted to save the game by getting Activision to open the source so it could be kept alive beyond the point where Activision lost interest. With some help from members of the development team that were active on fan forums, they were eventually able to convince Activision to release Call to Power II's source code in October of 2003. 
^ Wen, Howard (June 10, 2004). "Keeping the Myths Alive". linuxdevcenter.com. Archived from the original on April 6, 2013. Retrieved December 22, 2012. [...]fans of the Myth trilogy have taken this idea a step further: they have official access to the source code for the Myth games. Organized under the name MythDevelopers, this all-volunteer group of programmers, artists, and other talented people devote their time to improving and supporting further development of the Myth game series. 
^ Largent, Andy (October 8, 2003). "Homeworld Source Code Released". www.insidemacgames.com. Archived from the original on October 12, 2013. Retrieved November 24, 2012. With the release of Homeworld 2 for the PC, Relic Entertainment has decided to give back to their impressive fan community by releasing the source code to the original Homeworld. 
^ ZDaemon Starting with the 1.07 release in July 2005, the ZDaemon project does not make the source code available anymore and has remained closed source from that point forward
^ Rosen, Lawrence (2004). Open Source Licensing. Upper Saddle River: Prentice Hall. pp. 52, 255, 259. ISBN 978-0-13-148787-1. 
^ Havoc Pennington (2008-03-02). "Debian Tutorial". Retrieved 2009-06-04. It is important to distinguish commercial software from proprietary software. Proprietary software is non-free software, while commercial software is software sold for money. 
^ Russell McOrmond (2000-01-04). "What is "Commercial Software"?". Retrieved 2009-05-02. 
^ Michael K. Johnson (1996-09-01). "Licenses and Copyright". Retrieved 2009-06-16. If you program for Linux, you do need to understand licensing, no matter if you are writing free software or commercial software. 
^ Eric S. Raymond (2003-12-29). "Proprietary, Jargon File". Retrieved 2009-06-12. Proprietary software should be distinguished from commercial software. It is possible for software to be commercial [...] without being proprietary. The reverse is also possible, for example in binary-only freeware. 
^ Free Software Foundation (2008-12-31). "Selling Free Software". Retrieved 2009-06-03. 
^ "The Commercial Software Model". Microsoft. May 2001. Retrieved 2007-03-05. 
^ "Open Source Versus Commercial Software: Why Proprietary Software is Here to Stay". Sams Publishing. October 2005. Retrieved 2007-03-05. 
^ Engelfriet, Arnoud (August–September 2006). "The best of both worlds". Intellectual Asset Management (IAM). New Hibernia House, Winchester Walk, London Bridge, London SE1 9AG, United Kingdom: Gavin Stewart (19). Retrieved 2008-05-19. 
^ Loftus, Jack (2007-02-19). "LinuxWorld: Managing mixed source software stacks". SearchEnterpriseLinux.com. 
^ Tan, Aaron (2006-12-28). "Novell: We're a 'mixed-source' company". CNET Networks, Inc. 
^ Rosenberg, Donald (2000). Open Source: The Unauthorized White Papers. Foster City: IDG. p. 109. ISBN 0-7645-4660-0. 
^ "Categories of Free and Non-Free Software - Free Software Foundation". 
^ Free Software Foundation (2009-05-05). "Frequently Asked Questions about the GNU Licenses". Retrieved 2009-06-25. 
^ Richard Stallman (2004-04-12). "Free But Shackled - The Java Trap". Retrieved 2009-06-25. 
^ Nelson, David (15 Mar 2013). "Indian laptops that crash if users try to remove pictures of minister". Telegraph. London. 








v
t
e


Software distribution



Licenses



Beerware
Floating licensing
Free
Free and open-source
Freely redistributable
Open source
Proprietary
Public domain





Compensation models



Adware
Commercial software

Retail software


Crippleware
Crowdfunding
Freemium
Freeware
Pay what you want

Careware
Donationware


Open core
Postcardware
Shareware

Nagware







Delivery methods



Digital distribution
File sharing
On-premises
Pre-installed
Product bundling
Retail software
Sneakernet
Software as a service





Deceptive and/or illicit



Unwanted software bundling
Malware

Spyware
Trojan horse
Worm
Ransomware


Scareware
Shovelware
Vaporware





Software release life cycle



Abandonware
End-of-life
Long-term support
Software maintenance
Software maintainer
Software publisher





Copy protection



Digital rights management
Software protection dongle
Hardware restrictions
License manager
Product activation
Product key
Software copyright
Software patent
Torrent poisoning












v
t
e


Free and open-source software



General



Alternative terms for free software
Comparison of open-source and closed-source software
Comparison of source code hosting facilities
Free software
Free software project directories
Gratis versus libre
Long-term support
Open-source software
Open-source software development
Outline





Software
packages



Audio
Bioinformatics
Codecs
Collaboration
Configuration management
Device drivers

Graphics
Wireless


Geophysics
Health
Mathematics
Operating systems
Programming languages
Routing
Statistics
Television
Video games
Web applications

Content management systems
E-commerce


Word processors
Android apps
iOS apps
Commercial
Trademarked
Formerly proprietary





Community



Free software movement
History
Open-source software movement
Organizations
Events





Licenses



AFL
Apache
APSL
Artistic
Beerware
Boost
BSD
CC0
CDDL
EPL
GNU GPL
GNU LGPL
ISC
MIT
MPL
Ms-PL/RL
Python
Python Software Foundation
Sleepycat
Unlicense
WTFPL
zlib





License types
and standards



Comparison of free and open-source software licenses
Contributor License Agreement
Copyfree
Copyleft
Debian Free Software Guidelines
Definition of Free Cultural Works
Free license
The Free Software Definition
The Open Source Definition
Open-source license
Permissive software licence
Public domain
Viral license





Challenges



Binary blob
Digital rights management
Hardware restrictions
License proliferation
Mozilla software rebranding
Proprietary software
SCO/Linux controversies
Secure boot
Software patents
Software security
Trusted Computing





Related topics



The Cathedral and the Bazaar
Forking
Microsoft Open Specification Promise
Revolution OS








 Book
 Category
 Commons
 Portal











						Retrieved from "https://en.wikipedia.org/w/index.php?title=Proprietary_software&oldid=813737232"					Categories: Proprietary softwareSoftware licensesHidden categories: Articles needing additional references from March 2017All articles needing additional referencesAll articles with unsourced statementsArticles with unsourced statements from March 2017Wikipedia articles needing page number citations from May 2016Articles with unsourced statements from March 2012Articles with unsourced statements from November 2010