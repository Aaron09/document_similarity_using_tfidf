



Time-keeping on this clock uses arithmetic modulo 12.


In mathematics, modular arithmetic is a system of arithmetic for integers, where numbers "wrap around" upon reaching a certain value—the modulus (plural moduli). The modern approach to modular arithmetic was developed by Carl Friedrich Gauss in his book Disquisitiones Arithmeticae, published in 1801.
A familiar use of modular arithmetic is in the 12-hour clock, in which the day is divided into two 12-hour periods. If the time is 7:00 now, then 8 hours later it will be 3:00. Usual addition would suggest that the later time should be 7 + 8 = 15, but this is not the answer because clock time "wraps around" every 12 hours. Because the hour number starts over after it reaches 12, this is arithmetic modulo 12. According to the definition below, 12 is congruent not only to 12 itself, but also to 0, so the time called "12:00" could also be called "0:00", since 12 is congruent to 0 modulo 12.



Contents


1 Definition of congruence relation

1.1 Examples


2 Properties
3 Congruence classes
4 Residue systems

4.1 Reduced residue systems


5 Integers modulo n
6 Applications
7 Computational complexity
8 Example implementations
9 See also
10 Notes
11 References
12 External links



Definition of congruence relation[edit]
This section is about the (mod n) notation. For the binary mod operation, see modulo operation.
Modular arithmetic can be handled mathematically by introducing a congruence relation on the integers that is compatible with the operations on integers: addition, subtraction, and multiplication. For a positive integer n, two numbers a and b are said to be congruent modulo n, if their difference a − b is an integer multiple of n (that is, if there is an integer k such that a − b = kn). This congruence relation is typically considered when a and b are integers, and is denoted





a
≡
b


(
mod

n
)

.


{\displaystyle a\equiv b{\pmod {n}}.}



(some authors use = instead of ≡; in this case, if the parentheses are omitted, this generally means that "mod" denotes the modulo operation, that is, that 0 ≤ a < n).
The number n is called the modulus of the congruence.
The congruence relation may be rewritten as





a
=
k
n
+
b
,


{\displaystyle a=kn+b,}



explicitly showing its relationship with Euclidean division. However, b need not be the remainder of the division of a by n. More precisely, what the statement a ≡ b mod n asserts is that a and b have the same remainder when divided by n. That is,





a
=
p
n
+
r
,


{\displaystyle a=pn+r,}






b
=
q
n
+
r
,


{\displaystyle b=qn+r,}



where 0 ≤ r < n is the common remainder. Subtracting these two expressions, we recover the previous relation:





a
−
b
=
k
n
,


{\displaystyle a-b=kn,}



by setting k = p − q.
Examples[edit]
For example,





38
≡
14


(
mod

12
)




{\displaystyle 38\equiv 14{\pmod {12}}\,}



because 38 − 14 = 24, which is a multiple of 12.
The same rule holds for negative values:









−
8



≡
7


(
mod

5
)





2



≡
−
3


(
mod

5
)





−
3



≡
−
8


(
mod

5
)

.






{\displaystyle {\begin{aligned}-8&\equiv 7{\pmod {5}}\\2&\equiv -3{\pmod {5}}\\-3&\equiv -8{\pmod {5}}.\end{aligned}}}



Equivalently, a ≡ b mod n can also be thought of as asserting that the remainders of the division of both a and b by n are the same. For instance:





38
≡
14


(
mod

12
)




{\displaystyle 38\equiv 14{\pmod {12}}\,}



because both 38 and 14 have the same remainder 2 when divided by 12. It is also the case that 38 − 14 = 24 is an integer multiple of 12, which agrees with the prior definition of the congruence relation.
A remark on the notation: Because it is common to consider several congruence relations for different moduli at the same time, the modulus is incorporated in the notation. In spite of the ternary notation, the congruence relation for a given modulus is binary. This would have been clearer if the notation a ≡n b had been used, instead of the common traditional notation.
Properties[edit]
The congruence relation satisfies all the conditions of an equivalence relation:

Reflexivity: a ≡ a (mod n)
Symmetry: a ≡ b (mod n) if and only if b ≡ a (mod n)
Transitivity: If a ≡ b (mod n) and b ≡ c (mod n), then a ≡ c (mod n)

If a1 ≡ b1 (mod n) and a2 ≡ b2 (mod n), or if a ≡ b (mod n), then:

a + k ≡ b + k (mod n) for any integer k (compatibility with translation)
k a ≡ k b (mod n) for any integer k (compatibility with scaling)
a1 + a2 ≡ b1 + b2 (mod n) (compatibility with addition)
a1 – a2 ≡ b1 – b2 (mod n) (compatibility with subtraction)
a1 a2 ≡ b1 b2 (mod n) (compatibility with multiplication)
ak ≡ bk (mod n) for any non-negative integer k (compatibility with exponentiation)
p(a) ≡ p(b) (mod n), for any polynomial p(x) with integer coefficients (compatibility with polynomial evaluation)

If a ≡ b (mod n), then it is false, in general, that ka ≡ kb (mod n). However, one has:

If c ≡ d (mod φ(n)), where φ is Euler's totient function, then ac ≡ ad (mod n) provided a is coprime with n

For cancellation of common terms, we have the following rules:

If a + k ≡ b + k (mod n) for any integer k, then a ≡ b (mod n)
If k a ≡ k b (mod n) and k is coprime with n, then a ≡ b (mod n)

The modular multiplicative inverse is defined by the following rules:

Existence: there exists an integer denoted a–1 such that aa–1 ≡ 1 (mod n) if and only if a is coprime with n. This integer a–1 is called a modular multiplicative inverse of a modulo n.
If a ≡ b (mod n) and a–1 exists, then a–1 ≡ b–1 (mod n) (compatibility with multiplicative inverse, and, if a = b, uniqueness modulo n)
If a x ≡ b (mod n) and a is coprime to n, the solution to this linear congruence is given by x ≡ a–1b (mod n)

In particular, if p is a prime number then a is coprime with p for every a such that 0 < a < p. Thus, a multiplicative inverse exists for all a that are not congruent to zero modulo p.
Some of the more advanced properties of congruence relations are the following:

Fermat's little theorem: If p is prime, then a p – 1 ≡ 1 (mod p) for 0 < a < p
Euler's theorem: If a and n are coprime, then a φ(n) ≡ 1 (mod n), where φ is Euler's totient function
A simple consequence of Fermat's little theorem is that if p is prime, then a−1 ≡ a p − 2 (mod p) is the multiplicative inverse of 0 < a < p. More generally, from Euler's theorem, if a and n are coprime, then a−1 ≡ a φ(n) − 1 (mod n).
Another simple consequence is that if a ≡ b (mod φ(n)), where φ is Euler's totient function, then ka ≡ kb (mod n) provided k is coprime with n
Wilson's theorem: p is prime if and only if (p − 1)! ≡ −1 (mod p)
Chinese remainder theorem: If x ≡ a (mod m) and x ≡ b (mod n) such that m and n are co-prime, then x ≡ b mn–1 m + a nm–1 n (mod mn) where mn−1 is the inverse of m modulo n and nm−1 is the inverse of n modulo m
Lagrange's theorem: The congruence f (x) ≡ 0 (mod p), where p is prime, and f (x) = a0 xn + ... + an is a polynomial with integer coefficients such that a0 ≠ 0 (mod p), has at most n roots.
Primitive root modulo n: A number g is a primitive root modulo n if, for every integer a co-prime to n, there is an integer k such that gk ≡ a (mod n). A primitive root modulo n exists if and only if n is equal to 2, 4, pk or 2pk, where p is an odd prime number. If a primitive root modulo n exists, then there are exactly φ(φ(n)) such primitive roots, where φ is the Euler's totient function.
Quadratic residue: An integer a is a quadratic residue modulo n, if there exists an integer x such that x2 ≡ a (mod n). Euler's criterion asserts that, if p is an odd prime, then a is a quadratic residue modulo p if and only if









a



p
−
1

2



≡
1


(
mod

p
)

.


{\displaystyle a^{\frac {p-1}{2}}\equiv 1{\pmod {p}}.}





Congruence classes [edit]
Like any congruence relation, congruence modulo n is an equivalence relation, and the equivalence class of the integer a, denoted by an, is the set {… , a − 2n, a − n, a, a + n, a + 2n, …}. This set, consisting of the integers congruent to a modulo n, is called the congruence class or residue class or simply residue of the integer a, modulo n. When the modulus n is known from the context, that residue may also be denoted [a].
Residue systems[edit]
Each residue class modulo n may be represented by any one of its members, although we usually represent each residue class by the smallest nonnegative integer which belongs to that class (since this is the proper remainder which results from division). Any two members of different residue classes modulo n are incongruent modulo n. Furthermore, every integer belongs to one and only one residue class modulo n.[1]
The set of integers {0, 1, 2, …, n − 1} is called the least residue system modulo n. Any set of n integers, no two of which are congruent modulo n, is called a complete residue system modulo n.
It is clear that the least residue system is a complete residue system, and that a complete residue system is simply a set containing precisely one representative of each residue class modulo n.[2] The least residue system modulo 4 is {0, 1, 2, 3}. Some other complete residue systems modulo 4 are:

{1, 2, 3, 4}
{13, 14, 15, 16}
{−2, −1, 0, 1}
{−13, 4, 17, 18}
{−5, 0, 6, 21}
{27, 32, 37, 42}

Some sets which are not complete residue systems modulo 4 are:

{−5, 0, 6, 22} since 6 is congruent to 22 modulo 4.
{5, 15} since a complete residue system modulo 4 must have exactly 4 incongruent residue classes.

Reduced residue systems[edit]
Main article: Reduced residue system
Any set of φ(n) integers that are relatively prime to n and that are mutually incongruent modulo n, where φ(n) denotes Euler's totient function, is called a reduced residue system modulo n.[3] The example above, {5,15} is an example of a reduced residue system modulo 4.
Integers modulo n[edit]
The set of all congruence classes of the integers for a modulus n is called the ring of integers modulo n,[4] and is denoted 




Z


/

n

Z



{\displaystyle \mathbb {Z} /n\mathbb {Z} }

, 




Z


/

n


{\displaystyle \mathbb {Z} /n}

, or 





Z


n




{\displaystyle \mathbb {Z} _{n}}

. The notation 





Z


n




{\displaystyle \mathbb {Z} _{n}}

 is, however, not recommended because it can be confused with the set of n-adic integers. The set is defined as follows.






Z


/

n

Z

=

{



a
¯



n



|

a
∈

Z

}

.


{\displaystyle \mathbb {Z} /n\mathbb {Z} =\left\{{\overline {a}}_{n}|a\in \mathbb {Z} \right\}.}



When n ≠ 0, 




Z


/

n

Z



{\displaystyle \mathbb {Z} /n\mathbb {Z} }

 has n elements, and can be written as:






Z


/

n

Z

=

{



0
¯



n


,



1
¯



n


,



2
¯



n


,
…
,




n
−
1

¯



n


}

.


{\displaystyle \mathbb {Z} /n\mathbb {Z} =\left\{{\overline {0}}_{n},{\overline {1}}_{n},{\overline {2}}_{n},\ldots ,{\overline {n-1}}_{n}\right\}.}



When n = 0, 




Z


/

n

Z



{\displaystyle \mathbb {Z} /n\mathbb {Z} }

 does not have zero elements; rather, it is isomorphic to 




Z



{\displaystyle \mathbb {Z} }

, since a0 = {a}.
We can define addition, subtraction, and multiplication on 




Z


/

n

Z



{\displaystyle \mathbb {Z} /n\mathbb {Z} }

 by the following rules:








a
¯



n


+



b
¯



n


=




(
a
+
b
)

¯



n




{\displaystyle {\overline {a}}_{n}+{\overline {b}}_{n}={\overline {(a+b)}}_{n}}









a
¯



n


−



b
¯



n


=




(
a
−
b
)

¯



n




{\displaystyle {\overline {a}}_{n}-{\overline {b}}_{n}={\overline {(a-b)}}_{n}}









a
¯



n





b
¯



n


=




(
a
b
)

¯



n


.


{\displaystyle {\overline {a}}_{n}{\overline {b}}_{n}={\overline {(ab)}}_{n}.}



The verification that this is a proper definition uses the properties given before.
In this way, 




Z


/

n

Z



{\displaystyle \mathbb {Z} /n\mathbb {Z} }

 becomes a commutative ring. For example, in the ring 




Z


/

24

Z



{\displaystyle \mathbb {Z} /24\mathbb {Z} }

, we have








12
¯



24


+



21
¯



24


=



9
¯



24




{\displaystyle {\overline {12}}_{24}+{\overline {21}}_{24}={\overline {9}}_{24}}



as in the arithmetic for the 24-hour clock.
The notation 




Z


/

n

Z



{\displaystyle \mathbb {Z} /n\mathbb {Z} }

 is used, because it is the quotient ring of 




Z



{\displaystyle \mathbb {Z} }

 by the ideal 



n

Z



{\displaystyle n\mathbb {Z} }

 containing all integers divisible by n, where 



0

Z



{\displaystyle 0\mathbb {Z} }

 is the singleton set {0}. Thus 




Z


/

n

Z



{\displaystyle \mathbb {Z} /n\mathbb {Z} }

 is a field when 



n

Z



{\displaystyle n\mathbb {Z} }

 is a maximal ideal, that is, when n is prime.
In terms of groups, the residue class an is the coset of a in the quotient group 




Z


/

n

Z



{\displaystyle \mathbb {Z} /n\mathbb {Z} }

, a cyclic group.[5]
The set 




Z


/

n

Z



{\displaystyle \mathbb {Z} /n\mathbb {Z} }

 has a number of important mathematical properties that are foundational to various branches of mathematics.
Rather than excluding the special case n = 0, it is more useful to include 




Z


/

0

Z



{\displaystyle \mathbb {Z} /0\mathbb {Z} }

 (which, as mentioned before, is isomorphic to the ring 




Z



{\displaystyle \mathbb {Z} }

 of integers), for example, when discussing the characteristic of a ring.
The ring of integers modulo n is a finite field if and only if n is prime (that is, if n is prime, every nonzero element of the ring has a multiplicative inverse). If n is a non-prime prime power, there exists a unique (up to isomorphism) finite field GF(n) with n elements, which must not be confused with the ring of integers modulo n, although they have the same number of elements.
Applications[edit]
Modular arithmetic is referenced in number theory, group theory, ring theory, knot theory, abstract algebra, computer algebra, cryptography, computer science, chemistry and the visual and musical arts.
It is one of the foundations of number theory, touching on almost every aspect of its study, and provides key examples for group theory, ring theory and abstract algebra.
Modular arithmetic is often used to calculate checksums that are used within identifiers. International Standard Book Number (ISBN) uses modulo 11 (if issued before 1 January, 2007) or modulo 10 (if issued on or after 1 January, 2007) arithmetic for error detection. Likewise, International Bank Account Numbers (IBANs), for example, make use of modulo 97 arithmetic to trap user input errors in bank account numbers. In chemistry, the last digit of the CAS registry number (a number which is unique for each chemical compound) is a check digit, which is calculated by taking the last digit of the first two parts of the CAS registry number times 1, the previous digit times 2, the previous digit times 3 etc., adding all these up and computing the sum modulo 10.
In cryptography, modular arithmetic directly underpins public key systems such as RSA and Diffie–Hellman, and provides finite fields which underlie elliptic curves, and is used in a variety of symmetric key algorithms including Advanced Encryption Standard (AES), International Data Encryption Algorithm (IDEA), and RC4. RSA and Diffie–Hellman use modular exponentiation.
In computer algebra, modular arithmetic is commonly used to limit the size of integer coefficients in intermediate calculations and data. It is used in polynomial factorization, a problem for which all known efficient algorithms use modular arithmetic. It is used by the most efficient implementations of polynomial greatest common divisor, exact linear algebra and Gröbner basis algorithms over the integers and the rational numbers.
In computer science, modular arithmetic is often applied in bitwise operations and other operations involving fixed-width, cyclic data structures. The modulo operation, as implemented in many programming languages and calculators, is an application of modular arithmetic that is often used in this context. XOR is the sum of 2 bits, modulo 2.
In music, arithmetic modulo 12 is used in the consideration of the system of twelve-tone equal temperament, where octave and enharmonic equivalency occurs (that is, pitches in a 1∶2 or 2∶1 ratio are equivalent, and C-sharp is considered the same as D-flat).
The method of casting out nines offers a quick check of decimal arithmetic computations performed by hand. It is based on modular arithmetic modulo 9, and specifically on the crucial property that 10 ≡ 1 (mod 9).
Arithmetic modulo 7 is used in algorithms that determine the day of the week for a given date. In particular, Zeller's congruence and the Doomsday algorithm make heavy use of modulo-7 arithmetic.
More generally, modular arithmetic also has application in disciplines such as law (see for example, apportionment), economics, (see for example, game theory) and other areas of the social sciences, where proportional division and allocation of resources plays a central part of the analysis.
Computational complexity[edit]
Since modular arithmetic has such a wide range of applications, it is important to know how hard it is to solve a system of congruences. A linear system of congruences can be solved in polynomial time with a form of Gaussian elimination, for details see linear congruence theorem. Algorithms, such as Montgomery reduction, also exist to allow simple arithmetic operations, such as multiplication and exponentiation modulo n, to be performed efficiently on large numbers.
Some operations, like finding a discrete logarithm or a quadratic congruence appear to be as hard as integer factorization and thus are a starting point for cryptographic algorithms and encryption. These problems might be NP-intermediate.
Solving a system of non-linear modular arithmetic equations is NP-complete.[6]
Example implementations[edit]
Below are three reasonably fast C functions, two for performing modular multiplication and one for modular exponentiation on unsigned integers not larger than 63 bits, without overflow of the transient operations.
An algorithmic way to compute 



a
⋅
b


(
mod

m
)



{\displaystyle a\cdot b{\pmod {m}}}

:


uint64_t mul_mod(uint64_t a, uint64_t b, uint64_t m)
{
   uint64_t d = 0, mp2 = m >> 1;
   int i;
   if (a >= m) a %= m;
   if (b >= m) b %= m;
   for (i = 0; i < 64; ++i)
   {
       d = (d > mp2) ? (d << 1) - m : d << 1;
       if (a & 0x8000000000000000ULL)
           d += b;
       if (d > m) d -= m;
       a <<= 1;
   }
   return d;
}

On computer architectures where an extended precision format with at least 64 bits of mantissa is available (such as the long double type of most x86 C compilers), the following routine is faster than any algorithmic solution, by employing the trick that, by hardware, floating-point multiplication results in the most significant bits of the product kept, while integer multiplication results in the least significant bits kept:


uint64_t mul_mod(uint64_t a, uint64_t b, uint64_t m)
{
   long double x;
   uint64_t c;
   int64_t r;
   if (a >= m) a %= m;
   if (b >= m) b %= m;
   x = a;
   c = x * b / m;
   r = (int64_t)(a * b - c * m) % (int64_t)m;
   return r < 0 ? r + m : r;
}

Below is C functions for performing modular exponentiation, that uses mul_mod function implemented above.
An algorithmic way to compute 




a

b




(
mod

m
)



{\displaystyle a^{b}{\pmod {m}}}

:


uint64_t pow_mod(uint64_t a, uint64_t b, uint64_t m)
{
    uint64_t r = 1;
    while (b > 0) {
        if(b % 2 == 1)
            r = mul_mod(r, a, m);
        b = b >> 1;
        a = mul_mod(a, a, m);
    }
    return r;
}

However, for all above routines to work, m must not exceed 63 bits.
See also[edit]


Boolean ring
Circular buffer
Congruence relation
Division (mathematics)
Finite field
Legendre symbol
Modular exponentiation
Modulo operation
Number theory
Pisano period (Fibonacci sequences modulo n)
Primitive root modulo n
Quadratic reciprocity
Quadratic residue
Rational reconstruction (mathematics)
Reduced residue system
Serial number arithmetic (a special case of modular arithmetic)
Two-element Boolean algebra
Topics relating to the group theory behind modular arithmetic:

Cyclic group
Multiplicative group of integers modulo n


Other important theorems relating to modular arithmetic:

Carmichael's theorem
Chinese remainder theorem
Euler's theorem
Fermat's little theorem (a special case of Euler's theorem)
Lagrange's theorem
Thue's lemma




Notes[edit]



^ Pettofrezzo & Byrkit (1970, p. 90)
^ Long (1972, p. 78)
^ Long (1972, p. 85)
^ It is a ring, as shown below.
^ Sengadir T., Discrete Mathematics and Combinatorics, p. 293, at Google Books
^ Garey, M. R.; Johnson, D. S. (1979). Computers and Intractability, a Guide to the Theory of NP-Completeness. W. H. Freeman. ISBN 0716710447. 



References[edit]

John L. Berggren. "modular arithmetic". Encyclopædia Britannica.
Apostol, Tom M. (1976), Introduction to analytic number theory, Undergraduate Texts in Mathematics, New York-Heidelberg: Springer-Verlag, ISBN 978-0-387-90163-3, MR 0434929, Zbl 0335.10001 . See in particular chapters 5 and 6 for a review of basic modular arithmetic.
Maarten Bullynck "Modular Arithmetic before C.F. Gauss. Systematisations and discussions on remainder problems in 18th-century Germany"
Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, and Clifford Stein. Introduction to Algorithms, Second Edition. MIT Press and McGraw-Hill, 2001. ISBN 0-262-03293-7. Section 31.3: Modular arithmetic, pp. 862–868.
Anthony Gioia, Number Theory, an Introduction Reprint (2001) Dover. ISBN 0-486-41449-3.
Long, Calvin T. (1972). Elementary Introduction to Number Theory (2nd ed.). Lexington: D. C. Heath and Company. LCCN 77171950. 
Pettofrezzo, Anthony J.; Byrkit, Donald R. (1970). Elements of Number Theory. Englewood Cliffs: Prentice Hall. LCCN 71081766. 
Sengadir, T. (2009). Discrete Mathematics and Combinatorics. Chennai, India: Pearson Education India. ISBN 978-81-317-1405-8. OCLC 778356123. 

External links[edit]

Hazewinkel, Michiel, ed. (2001) [1994], "Congruence", Encyclopedia of Mathematics, Springer Science+Business Media B.V. / Kluwer Academic Publishers, ISBN 978-1-55608-010-4 
In this modular art article, one can learn more about applications of modular arithmetic in art.
Weisstein, Eric W. "Modular Arithmetic". MathWorld. 
An article on modular arithmetic on the GIMPS wiki
Modular Arithmetic and patterns in addition and multiplication tables
Whitney Music Box—an audio/video demonstration of integer modular math






						Retrieved from "https://en.wikipedia.org/w/index.php?title=Modular_arithmetic&oldid=818309649"					Categories: Modular arithmeticFinite ringsGroup theory