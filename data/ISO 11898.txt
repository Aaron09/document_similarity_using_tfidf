A Controller Area Network (CAN bus) is a robust vehicle bus standard designed to allow microcontrollers and devices to communicate with each other in applications without a host computer. It is a message-based protocol, designed originally for multiplex electrical wiring within automobiles to save on copper, but is also used in many other contexts.



Contents


1 History
2 Applications

2.1 Automotive
2.2 Other


3 Architecture
4 Data transmission
5 ID allocation
6 Bit timing
7 Layers
8 Frames

8.1 Data frame

8.1.1 Base frame format
8.1.2 Extended frame format


8.2 Remote frame
8.3 Error frame
8.4 Overload frame


9 ACK slot
10 Interframe spacing
11 Bit stuffing
12 CAN lower-layer standards
13 CAN-based higher-layer protocols

13.1 Standardized approaches
13.2 Other approaches


14 CANopen Lift
15 Security
16 Development tools
17 Licensing
18 See also
19 References
20 External links



History[edit]
Development of the CAN bus started in 1983 at Robert Bosch GmbH.[1] The protocol was officially released in 1986 at the Society of Automotive Engineers (SAE) conference in Detroit, Michigan. The first CAN controller chips, produced by Intel and Philips, came on the market in 1987. Released in 1991 the Mercedes-Benz W140 was the first production vehicle to feature a CAN-based multiplex wiring system.[2][3]
Bosch published several versions of the CAN specification and the latest is CAN 2.0 published in 1991. This specification has two parts; part A is for the standard format with an 11-bit identifier, and part B is for the extended format with a 29-bit identifier. A CAN device that uses 11-bit identifiers is commonly called CAN 2.0A and a CAN device that uses 29-bit identifiers is commonly called CAN 2.0B. These standards are freely available from Bosch along with other specifications and white papers.[4]
In 1993, the International Organization for Standardization (ISO) released the CAN standard ISO 11898 which was later restructured into two parts; ISO 11898-1 which covers the data link layer, and ISO 11898-2 which covers the CAN physical layer for high-speed CAN. ISO 11898-3 was released later and covers the CAN physical layer for low-speed, fault-tolerant CAN. The physical layer standards ISO 11898-2 and ISO 11898-3 are not part of the Bosch CAN 2.0 specification. These standards may be purchased from the ISO.
Bosch is still active in extending the CAN standards. In 2012, Bosch released CAN FD 1.0 or CAN with Flexible Data-Rate. This specification uses a different frame format that allows a different data length as well as optionally switching to a faster bit rate after the arbitration is decided. CAN FD is compatible with existing CAN 2.0 networks so new CAN FD devices can coexist on the same network with existing CAN devices.
CAN bus is one of five protocols used in the on-board diagnostics (OBD)-II vehicle diagnostics standard. The OBD-II standard has been mandatory for all cars and light trucks sold in the United States since 1996. The EOBD standard has been mandatory for all petrol vehicles sold in the European Union since 2001 and all diesel vehicles since 2004.[5]
Applications[edit]
Automotive[edit]
The modern automobile may have as many as 70 electronic control units (ECU) for various subsystems.[6] Typically the biggest processor is the engine control unit. Others are used for transmission, airbags, antilock braking/ABS, cruise control, electric power steering, audio systems, power windows, doors, mirror adjustment, battery and recharging systems for hybrid/electric cars, etc. Some of these form independent subsystems, but communications among others are essential. A subsystem may need to control actuators or receive feedback from sensors. The CAN standard was devised to fill this need. One key advantage is that interconnection between different vehicle systems can allow a wide range of safety, economy and convenience features to be implemented using software alone - functionality which would add cost and complexity if such features were "hard wired" using traditional automotive electrics. Examples include:

Auto start/stop: Various sensor inputs from around the vehicle (speed sensors, steering angle, air conditioning on/off, engine temperature) are collated via the CAN bus to determine whether the engine can be shut down when stationary for improved fuel economy and emissions.
Electric park brakes: The "hill hold" functionality takes input from the car's tilt sensor (also used by the burglar alarm) and the road speed sensors (also used by the ABS, engine control and traction control) via the CAN bus to determine if the car is stopped on an incline. Similarly, inputs from seat belt sensors (part of the airbag controls) are fed from the CAN bus to determine if the seat belts are fastened, so that the parking brake will automatically release upon moving off.
Parking assist systems: when the driver engages reverse gear, the transmission control unit can send a signal via the CAN bus to activate both the parking sensor system, and the door control module for the passenger side door mirror to tilt downwards to show the position of the curb. The CAN bus also takes inputs from the rain sensor to trigger the rear windscreen wiper when reversing.
Auto lane assist/collision avoidance systems: The inputs from the parking sensors are also used by the CAN bus to feed outside proximity data to driver assist systems such as Lane Departure warning, and more recently, these signals travel through the CAN bus to actuate brake by wire in active collision avoidance systems.
Auto brake wiping: Input is taken from the rain sensor (used primarily for the automatic windscreen wipers) via the CAN bus to the ABS module to initiate an imperceptible application of the brakes whilst driving to clear moisture from the brake rotors. Some high performance Audi and BMW models incorporate this feature.

In recent years, the LIN bus standard has been introduced to complement CAN for non-critical subsystems such as air-conditioning and infotainment, where data transmission speed and reliability are less critical.
Other[edit]

The CAN bus protocol has been used on the Shimano DI2 electronic gear shift system for road bicycles since 2009, and is also used by the Ansmann and BionX systems in their direct drive motor.
The CAN bus is also used as a fieldbus in general automation environments, primarily due to the low cost of some CAN controllers and processors.
Manufacturers including NISMO aim to use CAN bus data to recreate real-life racing laps in the videogame Gran Turismo 6 using the game's GPS Data Logger function, which would then allow players to race against real laps.[7]
Johns Hopkins University's Applied Physics Laboratory's Modular Prosthetic Limb (MPL) uses a local CAN bus to facilitate communication between servos and microcontrollers in the prosthetic arm.

Architecture[edit]
CAN is a multi-master serial bus standard for connecting Electronic Control Units [ECUs] also known as nodes. Two or more nodes are required on the CAN network to communicate. The complexity of the node can range from a simple I/O device up to an embedded computer with a CAN interface and sophisticated software. The node may also be a gateway allowing a standard computer to communicate over a USB or Ethernet port to the devices on a CAN network.
All nodes are connected to each other through a two wire bus. The wires are 120 Ω nominal twisted pair.
ISO 11898-2, also called high speed CAN, uses a linear bus terminated at each end with 120 Ω resistors.




High Speed CAN Network. ISO 11898-2


High speed CAN signaling drives the CAN high wire towards 5 V and the CAN low wire towards 0 V when transmitting a dominant (0), and does not drive either wire when transmitting a recessive (1). The dominant differential voltage is a nominal 2 V. The termination resistor passively returns the two wires to a nominal differential voltage of 0 V. The dominant common mode voltage must be within 1.5 to 3.5 V of common and the recessive common mode voltage must be within +/-12 of common.




High Speed CAN Signaling. ISO 11898-2


ISO 11898-3, also called low speed or fault tolerant CAN, uses a linear bus, star bus or multiple star buses connected by a linear bus and is terminated at each node by a fraction of the overall termination resistance. The overall termination resistance should be about 100 Ω, but not less than 100 Ω.




Low Speed Fault Tolerant CAN Network. ISO 11898-3


Low speed/Fault tolerant CAN signaling drives the CAN high wire towards 5 V and the CAN low wire towards 0 V when transmitting a dominant (0), and does not drive either wire when transmitting a recessive (1). The dominant differential voltage must be greater than 2.3 V (with a 5 V Vcc) and the recessive differential voltage must be less than 0.6 V The termination resistors passively return the CAN low wire to RTH where RTH is a minimum of 4.7 V (Vcc - 0.3 V where Vcc is 5 V nominal) and the CAN high wire to RTL where RTL is a maximum of 0.3 V. Both wires must be able to handle -27 to 40 V without damage.




Low Speed CAN Signaling. ISO 11898-3


With both high speed and low speed CAN, the speed of the transition is faster when a recessive to dominant transition occurs since the CAN wires are being actively driven. The speed of the dominant to recessive transition depends primarily on the length of the CAN network and the capacitance of the wire used.
High speed CAN is usually used in automotive and industrial applications where the bus runs from one end of the environment to the other. Fault tolerant CAN is often used where groups of nodes need to be connected together.
The ISO specifications require the bus be kept within a minimum and maximum common mode bus voltage, but do not define how to keep the bus within this range.
The CAN bus must be terminated. The termination resistors are needed to suppress reflections as well as return the bus to its recessive or idle state.
High speed CAN uses a 120 Ω resistor at each end of a linear bus. Low speed CAN uses resistors at each node. Other types of terminations may be used such as the Terminating Bias Circuit defined in ISO11783 [8]
A terminating bias circuit provides power and ground in addition to the CAN signaling on a four-wire cable. This provides automatic electrical bias and termination at each end of each bus segment. An ISO11783 network is designed for hot plug-in and removal of bus segments and ECUs.




CANbus Node


Each node requires a:

Central processing unit, microprocessor, or host processor

The host processor decides what the received messages mean and what messages it wants to transmit.
Sensors, actuators and control devices can be connected to the host processor.


CAN controller; often an integral part of the microcontroller

Receiving: the CAN controller stores the received serial bits from the bus until an entire message is available, which can then be fetched by the host processor (usually by the CAN controller triggering an interrupt).
Sending: the host processor sends the transmit message(s) to a CAN controller, which transmits the bits serially onto the bus when the bus is free.


Transceiver Defined by ISO 11898-2/3 Medium Access Unit [MAU] standards

Receiving: it converts the data stream from CANbus levels to levels that the CAN controller uses. It usually has protective circuitry to protect the CAN controller.
Transmitting: it converts the data stream from the CAN controller to CANbus levels.



Each node is able to send and receive messages, but not simultaneously. A message or Frame consists primarily of the ID (identifier), which represents the priority of the message, and up to eight data bytes. A CRC, acknowledge slot [ACK] and other overhead are also part of the message. The improved CAN FD extends the length of the data section to up to 64 bytes per frame. The message is transmitted serially onto the bus using a non-return-to-zero (NRZ) format and may be received by all nodes.
The devices that are connected by a CAN network are typically sensors, actuators, and other control devices. These devices are connected to the bus through a host processor, a CAN controller, and a CAN transceiver.
Data transmission[edit]
CAN data transmission uses a lossless bitwise arbitration method of contention resolution. This arbitration method requires all nodes on the CAN network to be synchronized to sample every bit on the CAN network at the same time. This is why some call CAN synchronous. Unfortunately the term synchronous is imprecise since the data is transmitted without a clock signal in an asynchronous format.
The CAN specifications use the terms "dominant" bits and "recessive" bits where dominant is a logical 0 (actively driven to a voltage by the transmitter) and recessive is a logical 1 (passively returned to a voltage by a resistor). The idle state is represented by the recessive level (Logical 1). If one node transmits a dominant bit and another node transmits a recessive bit then there is a collision and the dominant bit "wins". This means there is no delay to the higher-priority message, and the node transmitting the lower priority message automatically attempts to re-transmit six bit clocks after the end of the dominant message. This makes CAN very suitable as a real time prioritized communications system.
The exact voltages for a logical 0 or 1 depend on the physical layer used, but the basic principle of CAN requires that each node listens to the data on the CAN network including the transmitting node(s) itself (themselves). If a logical 1 is transmitted by all transmitting nodes at the same time, then a logical 1 is seen by all of the nodes, including both the transmitting node(s) and receiving node(s). If a logical 0 is transmitted by all transmitting node(s) at the same time, then a logical 0 is seen by all nodes. If a logical 0 is being transmitted by one or more nodes, and a logical 1 is being transmitted by one or more nodes, then a logical 0 is seen by all nodes including the node(s) transmitting the logical 1. When a node transmits a logical 1 but sees a logical 0, it realizes that there is a contention and it quits transmitting. By using this process, any node that transmits a logical 1 when another node transmits a logical 0 "drops out" or loses the arbitration. A node that loses arbitration re-queues its message for later transmission and the CAN frame bit-stream continues without error until only one node is left transmitting. This means that the node that transmits the first 1 loses arbitration. Since the 11 (or 29 for CAN 2.0B) bit identifier is transmitted by all nodes at the start of the CAN frame, the node with the lowest identifier transmits more zeros at the start of the frame, and that is the node that wins the arbitration or has the highest priority.
For example, consider an 11-bit ID CAN network, with two nodes with IDs of 15 (binary representation, 00000001111) and 16 (binary representation, 00000010000). If these two nodes transmit at the same time, each will first transmit the start bit then transmit the first six zeros of their ID with no arbitration decision being made.



Start
Bit
ID Bits
The Rest of the Frame


10
9
8
7
6
5
4
3
2
1
0


Node 15
0
0
0
0
0
0
0
0
1
1
1
1


Node 16
0
0
0
0
0
0
0
1
Stopped Transmitting


CAN Data
0
0
0
0
0
0
0
0
1
1
1
1


When the 7th bit is transmitted, the node with the ID of 16 transmits a 1 (recessive) for its ID, and the node with the ID of 15 transmits a 0 (dominant) for its ID. When this happens, the node with the ID of 16 knows it transmitted a 1, but sees a 0 and realizes that there is a collision and it lost arbitration. Node 16 stops transmitting which allows the node with ID of 15 to continue its transmission without any loss of data. The node with the lowest ID will always win the arbitration, and therefore has the highest priority.
Bit rates up to 1 Mbit/s are possible at network lengths below 40 m. Decreasing the bit rate allows longer network distances (e.g., 500 m at 125 kbit/s). The improved CAN FD standard allows increasing the bit rate after arbitration and can increase the speed of the data section by a factor of up to eight of the arbitration bit rate.
ID allocation[edit]
Message IDs must be unique on a single CAN bus, otherwise two nodes would continue transmission beyond the end of the arbitration field (ID) causing an error.
In the early 1990s, the choice of IDs for messages was done simply on the basis of identifying the type of data and the sending node; however, as the ID is also used as the message priority, this led to poor real-time performance. In those scenarios, a low CAN bus utilization of circa 30% was commonly required to ensure that all messages would meet their deadlines. However, if IDs are instead determined based on the deadline of the message, the lower the numerical ID and hence the higher the message priority, then bus utilizations of 70 to 80% can typically be achieved before any message deadlines are missed.
Bit timing[edit]
All nodes on the CAN network must operate at the same nominal bit rate, but noise, phase shifts, oscillator tolerance and oscillator drift mean that the actual bit rate may not be the same as the nominal bit rate.[9] Since a separate clock signal is not used, a means of synchronizing the nodes is necessary. Synchronization is important during arbitration since the nodes in arbitration must be able to see both their transmitted data and the other nodes' transmitted data at the same time. Synchronization is also important to ensure that variations in oscillator timing between nodes do not cause errors.
Synchronization starts with a hard synchronization on the first recessive to dominant transition after a period of bus idle (the start bit). Resynchronization occurs on every recessive to dominant transition during the frame. The CAN controller expects the transition to occur at a multiple of the nominal bit time. If the transition does not occur at the exact time the controller expects it, the controller adjusts the nominal bit time accordingly.
The adjustment is accomplished by dividing each bit into a number of time slices called quanta, and assigning some number of quanta to each of the four segments within the bit: synchronization, propagation, phase segment 1 and phase segment 2.



An example CAN bit timing with 10 time quanta per bit.



The number of quanta the bit is divided into can vary by controller, and the number of quanta assigned to each segment can be varied depending on bit rate and network conditions.
A transition that occurs before or after it is expected causes the controller to calculate the time difference and lengthen phase segment 1 or shorten phase segment 2 by this time. This effectively adjusts the timing of the receiver to the transmitter to synchronize them. This resynchronization process is done continuously at every recessive to dominant transition to ensure the transmitter and receiver stay in sync. Continuously resynchronizing reduces errors induced by noise, and allows a receiving node that was synchronized to a node which lost arbitration to resynchronize to the node which won arbitration.
Layers[edit]
The CAN protocol, like many networking protocols, can be decomposed into the following abstraction layers:

Application layer
Object layer


Message filtering
Message and status handling


Transfer layer

Most of the CAN standard applies to the transfer layer. The transfer layer receives messages from the physical layer and transmits those messages to the object layer. The transfer layer is responsible for bit timing and synchronization, message framing, arbitration, acknowledgement, error detection and signaling, and fault confinement. It performs:

Fault Confinement
Error Detection
Message Validation
Acknowledgement
Arbitration
Message Framing
Transfer Rate and Timing
Information Routing


Physical layer





CAN bus electrical sample topology with terminator resistors


CAN bus (ISO 11898-1:2003) originally specified the link layer protocol with only abstract requirements for the physical layer, e.g., asserting the use of a medium with multiple-access at the bit level through the use of dominant and recessive states. The electrical aspects of the physical layer (voltage, current, number of conductors) were specified in ISO 11898-2:2003, which is now widely accepted. However, the mechanical aspects of the physical layer (connector type and number, colors, labels, pin-outs) have yet to be formally specified. As a result, an automotive ECU will typically have a particular—often custom—connector with various sorts of cables, of which two are the CAN bus lines. Nonetheless, several de facto standards for mechanical implementation have emerged, the most common being the 9-pin D-sub type male connector with the following pin-out:

pin 2: CAN-Low (CAN−)
pin 3: GND (Ground)
pin 7: CAN-High (CAN+)
pin 9: CAN V+ (Power)





A male DE-9 connector (Plug).


This de facto mechanical standard for CAN could be implemented with the node having both male and female 9-pin D-sub connectors electrically wired to each other in parallel within the node. Bus power is fed to a node's male connector and the bus draws power from the node's female connector. This follows the electrical engineering convention that power sources are terminated at female connectors. Adoption of this standard avoids the need to fabricate custom splitters to connect two sets of bus wires to a single D connector at each node. Such nonstandard (custom) wire harnesses (splitters) that join conductors outside the node reduce bus reliability, eliminate cable interchangeability, reduce compatibility of wiring harnesses, and increase cost.
The absence of a complete physical layer specification (mechanical in addition to electrical) freed the CAN bus specification from the constraints and complexity of physical implementation. However it left CAN bus implementations open to interoperability issues due to mechanical incompatibility. In order to improve interoperability, many car-makers have generated specifications describing a set of allowed CAN transceivers in combination with requirements on the parasitic capacitance on the line. The allowed parasitic capacitance includes both capacitors as well as ESD protection (ESD[10] against ISO 7637-3). In addition to parasitic capacitance, 12V and 24V systems do not have the same requirements in terms of line maximum voltage. Indeed, during jump start events light vehicles lines can go up to 24V while truck systems can go as high as 36V. New solutions are coming on the market allowing to use same component for CAN as well as CAN FD (see [11]).
Noise immunity on ISO 11898-2:2003 is achieved by maintaining the differential impedance of the bus at a low level with low-value resistors (120 ohms) at each end of the bus. However, when dormant, a low-impedance bus such as CAN draws more current (and power) than other voltage-based signaling busses. On CAN bus systems, balanced line operation, where current in one signal line is exactly balanced by current in the opposite direction in the other signal provides an independent, stable 0 V reference for the receivers. Best practice determines that CAN bus balanced pair signals be carried in twisted pair wires in a shielded cable to minimize RF emission and reduce interference susceptibility in the already noisy RF environment of an automobile.
ISO 11898-2 provides some immunity to common mode voltage between transmitter and receiver by having a 0 V rail running along the bus to maintain a high degree of voltage association between the nodes. Also, in the de facto mechanical configuration mentioned above, a supply rail is included to distribute power to each of the transceiver nodes. The design provides a common supply for all the transceivers. The actual voltage to be applied by the bus and which nodes apply to it are application-specific and not formally specified. Common practice node design provides each node with transceivers which are optically isolated from their node host and derive a 5 V linearly regulated supply voltage for the transceivers from the universal supply rail provided by the bus. This usually allows operating margin on the supply rail sufficient to allow interoperability across many node types. Typical values of supply voltage on such networks are 7 to 30 V. However, the lack of a formal standard means that system designers are responsible for supply rail compatibility.
ISO 11898-2 describes the electrical implementation formed from a multi-dropped single-ended balanced line configuration with resistor termination at each end of the bus. In this configuration a dominant state is asserted by one or more transmitters switching the CAN− to supply 0 V and (simultaneously) switching CAN+ to the +5 V bus voltage thereby forming a current path through the resistors that terminate the bus. As such the terminating resistors form an essential component of the signalling system and are included not just to limit wave reflection at high frequency.
During a recessive state the signal lines and resistor(s) remain in a high impedances state with respect to both rails. Voltages on both CAN+ and CAN− tend (weakly) towards a voltage midway between the rails. A recessive state is only present on the bus when none of the transmitters on the bus is asserting a dominant state.
During a dominant state the signal lines and resistor(s) move to a low impedance state with respect to the rails so that current flows through the resistor. CAN+ voltage tends to +5 V and CAN− tends to 0 V.
Irrespective of signal state the signal lines are always in low impedance state with respect to one another by virtue of the terminating resistors at the end of the bus.
This signalling strategy differs significantly from other balanced line transmission technologies such as RS-422/3, RS-485, etc. which employ differential line drivers/ receivers and use a signalling system based on the differential mode voltage of the balanced line crossing a notional 0 V. Multiple access on such systems normally relies on the media supporting three states (active high, active low and inactive tri-state) and is dealt with in the time domain. Multiple access on CAN bus is achieved by the electrical logic of the system supporting just two states that are conceptually analogous to a ‘wired AND’ network.
Frames[edit]
A CAN network can be configured to work with two different message (or "frame") formats: the standard or base frame format (described in CAN 2.0 A and CAN 2.0 B), and the extended frame format (only described by CAN 2.0 B). The only difference between the two formats is that the "CAN base frame" supports a length of 11 bits for the identifier, and the "CAN extended frame" supports a length of 29 bits for the identifier, made up of the 11-bit identifier ("base identifier") and an 18-bit extension ("identifier extension"). The distinction between CAN base frame format and CAN extended frame format is made by using the IDE bit, which is transmitted as dominant in case of an 11-bit frame, and transmitted as recessive in case of a 29-bit frame. CAN controllers that support extended frame format messages are also able to send and receive messages in CAN base frame format. All frames begin with a start-of-frame (SOF) bit that denotes the start of the frame transmission.
CAN has four frame types:

Data frame: a frame containing node data for transmission
Remote frame: a frame requesting the transmission of a specific identifier
Error frame: a frame transmitted by any node detecting an error
Overload frame: a frame to inject a delay between data or remote frame

Data frame[edit]
The data frame is the only frame for actual data transmission. There are two message formats:

Base frame format: with 11 identifier bits
Extended frame format: with 29 identifier bits

The CAN standard requires the implementation must accept the base frame format and may accept the extended frame format, but must tolerate the extended frame format.
Base frame format[edit]



CAN-Frame in base format with electrical levels without stuffbits



The frame format is as follows: The bit values are described for CAN-LO signal.


Field name
Length (bits)
Purpose


Start-of-frame
1
Denotes the start of frame transmission


Identifier (green)
11
A (unique) identifier which also represents the message priority


Remote transmission request (RTR) (blue)
1
Must be dominant (0) for data frames and recessive (1) for remote request frames (see Remote Frame, below)


Identifier extension bit (IDE)
1
Must be dominant (0) for base frame format with 11-bit identifiers


Reserved bit (r0)
1
Reserved bit. Must be dominant (0), but accepted as either dominant or recessive.


Data length code (DLC) (yellow)
4
Number of bytes of data (0–8 bytes)[a]


Data field (red)
0–64 (0-8 bytes)
Data to be transmitted (length in bytes dictated by DLC field)


CRC
15
Cyclic redundancy check


CRC delimiter
1
Must be recessive (1)


ACK slot
1
Transmitter sends recessive (1) and any receiver can assert a dominant (0)


ACK delimiter
1
Must be recessive (1)


End-of-frame (EOF)
7
Must be recessive (1)





^ It is physically possible for a value between 9–15 to be transmitted in the 4-bit DLC, although the data is still limited to eight bytes. Certain controllers allow the transmission or reception of a DLC greater than eight, but the actual data length is always limited to eight bytes.



Extended frame format[edit]
The frame format is as follows:


Field name
Length (bits)
Purpose


Start-of-frame
1
Denotes the start of frame transmission


Identifier A (green)
11
First part of the (unique) identifier which also represents the message priority


Substitute remote request (SRR)
1
Must be recessive (1)


Identifier extension bit (IDE)
1
Must be recessive (1) for extended frame format with 29-bit identifiers


Identifier B (green)
18
Second part of the (unique) identifier which also represents the message priority


Remote transmission request (RTR) (blue)
1
Must be dominant (0) for data frames and recessive (1) for remote request frames (see Remote Frame, below)


Reserved bits (r1, r0)
2
Reserved bits which must be set dominant (0), but accepted as either dominant or recessive


Data length code (DLC) (yellow)
4
Number of bytes of data (0–8 bytes)[a]


Data field (red)
0–64 (0-8 bytes)
Data to be transmitted (length dictated by DLC field)


CRC
15
Cyclic redundancy check


CRC delimiter
1
Must be recessive (1)


ACK slot
1
Transmitter sends recessive (1) and any receiver can assert a dominant (0)


ACK delimiter
1
Must be recessive (1)


End-of-frame (EOF)
7
Must be recessive (1)





^ It is physically possible for a value between 9–15 to be transmitted in the 4-bit DLC, although the data is still limited to eight bytes. Certain controllers allow the transmission or reception of a DLC greater than eight, but the actual data length is always limited to eight bytes.



The two identifier fields (A & B) combine to form a 29-bit identifier.
Remote frame[edit]

Generally data transmission is performed on an autonomous basis with the data source node (e.g., a sensor) sending out a Data Frame. It is also possible, however, for a destination node to request the data from the source by sending a Remote Frame.
There are two differences between a Data Frame and a Remote Frame. Firstly the RTR-bit is transmitted as a dominant bit in the Data Frame and secondly in the Remote Frame there is no Data Field. The DLC field indicates the data length of the requested message (not the transmitted one)

i.e.,

RTR = 0 ; DOMINANT in data frame
RTR = 1 ; RECESSIVE in remote frame

In the event of a Data Frame and a Remote Frame with the same identifier being transmitted at the same time, the Data Frame wins arbitration due to the dominant RTR bit following the identifier.
Error frame[edit]
The error frame consists of two different fields:

The first field is given by the superposition of ERROR FLAGS (6–12 dominant/recessive bits) contributed from different stations.
The following second field is the ERROR DELIMITER (8 recessive bits).

There are two types of error flags:

Active Error Flag
six dominant bits – Transmitted by a node detecting an error on the network that is in error state "error active".
Passive Error Flag
six recessive bits – Transmitted by a node detecting an active error frame on the network that is in error state "error passive".

There are two error counters in CAN:

    1. Transmit error counter (TEC) 
    2. Receive error counter (REC)


When TEC or REC is lesser than 128, Active Error frame will be transmitted in the bus.
When TEC or REC is greater than 127 and lesser than 255, Passive Error frame will be transmitted in the bus.
When TEC is greater than 255, then the node enters into Bus Off state, where no frames will be transmitted.

Overload frame[edit]
The overload frame contains the two bit fields Overload Flag and Overload Delimiter. There are two kinds of overload conditions that can lead to the transmission of an overload flag:

The internal conditions of a receiver, which requires a delay of the next data frame or remote frame.
Detection of a dominant bit during intermission.

The start of an overload frame due to case 1 is only allowed to be started at the first bit time of an expected intermission, whereas overload frames due to case 2 start one bit after detecting the dominant bit. Overload Flag consists of six dominant bits. The overall form corresponds to that of the active error flag. The overload flag’s form destroys the fixed form of the intermission field. As a consequence, all other stations also detect an overload condition and on their part start transmission of an overload flag. Overload Delimiter consists of eight recessive bits. The overload delimiter is of the same form as the error delimiter.
ACK slot[edit]
The acknowledge slot is used to acknowledge the receipt of a valid CAN frame. Each node that receives the frame without finding an error, transmits a dominant level in the ACK slot and thus overrides the recessive level of the transmitter. If a transmitter detects a recessive level in the ACK slot it knows that no receiver found a valid frame. A receiving node may transmit a recessive to indicate that it did not receive a valid frame, but another node that did receive a valid frame may override this with a dominant. The transmitting node cannot know that the message has been received by all of the nodes on the CAN network.
Interframe spacing[edit]
Data frames and remote frames are separated from preceding frames by a bit field called interframe space. Interframe space consists of at least three consecutive recessive (1) bits. Following that, if a dominant bit is detected, it will be regarded as the "Start of frame" bit of the next frame. Overload frames and error frames are not preceded by an interframe space and multiple overload frames are not separated by an interframe space. Interframe space contains the bit fields intermission and bus idle, and suspend transmission for error passive stations, which have been transmitter of the previous message.[12]
Bit stuffing[edit]



CAN-Frame before and after the addition of stuffbits (in purple)



To ensure enough transitions to maintain synchronization, a bit of opposite polarity is inserted after five consecutive bits of the same polarity. This practice is called bit stuffing, and is necessary due to the non-return to zero (NRZ) coding used with CAN. The stuffed data frames are destuffed by the receiver.
All fields in the frame are stuffed with the exception of the CRC delimiter, ACK field and end of frame which are a fixed size and are not stuffed. In the fields where bit stuffing is used, six consecutive bits of the same type (111111 or 000000) are considered an error. An active error flag can be transmitted by a node when an error has been detected. The active error flag consists of six consecutive dominant bits and violates the rule of bit stuffing.
Bit stuffing means that data frames may be larger than one would expect by simply enumerating the bits shown in the tables above. The maximum increase in size of a CAN frame (base format) after bit stuffing is in the case

11111000011110000...

which is stuffed as (stuffing bits in bold):

111110000011111000001...

The size is bounded by





8
n
+
47
+

⌊



34
+
8
n
−
1

4


⌋



{\displaystyle 8n+47+\left\lfloor {\frac {34+8n-1}{4}}\right\rfloor }



since 



8
n
+
47


{\displaystyle 8n+47}

 is the size of the frame before stuffing, in the worst case one bit will be added every four original bits after the first one (hence the -1 at the numerator) and, because of the layout of the bits of the header, only 34 out of 47 of them can be subject to bit stuffing.[13]
CAN lower-layer standards[edit]
ISO 11898 series specifies physical and data link layer (levels 1 and 2 of the ISO/OSI model) of serial communication technology called Controller Area Network that supports distributed real-time control and multiplexing for use within road vehicles.[14]
There are several CAN physical layer and other standards:
ISO 11898-1:2015 specifies the data link layer (DLL) and physical signalling of the controller area network (CAN).[15] This document describes the general architecture of CAN in terms of hierarchical layers according to the ISO reference model for open systems interconnection (OSI) established in ISO/IEC 7498-1 and provides the characteristics for setting up an interchange of digital information between modules implementing the CAN DLL with detailed specification of the logical link control (LLC) sublayer and medium access control (MAC) sublayer.
ISO 11898-2:2003 specifies the high-speed (transmission rates of up to 1 Mbit/s) medium access unit (MAU), and some medium dependent interface (MDI) features (according to ISO 8802-3), which comprise the physical layer of the controller area network. ISO 11898-2 uses a two-wire balanced signalling scheme. It is the most used physical layer in car powertrain applications and industrial control networks.
ISO 11898-3:2006 specifies low-speed, fault-tolerant, medium-dependent interface for setting up an interchange of digital information between electronic control units of road vehicles equipped with the CAN at transmission rates above 40 kBit/s up to 125 kBit/s.
ISO 11898-4:2004 specifies time-triggered communication in the CAN (TTCAN). It is applicable to setting up a time-triggered interchange of digital information between electronic control units (ECU) of road vehicles equipped with CAN, and specifies the frame synchronisation entity that coordinates the operation of both logical link and media access controls in accordance with ISO 11898-1, to provide the time-triggered communication schedule.
ISO 11898-5:2007 specifies the CAN physical layer for transmission rates up to 1 Mbit/s for use within road vehicles. It describes the medium access unit functions as well as some medium dependent interface features according to ISO 8802-2. This represents an extension of ISO 11898-2, dealing with new functionality for systems requiring low-power consumption features while there is no active bus communication.
ISO 11898-6:2013 specifies the CAN physical layer for transmission rates up to 1 Mbit/s for use within road vehicles. It describes the medium access unit functions as well as some medium dependent interface features according to ISO 8802-2. This represents an extension of ISO 11898-2 and ISO 11898-5, specifying a selective wake-up mechanism using configurable CAN frames.
ISO 16845-1:2004 provides the methodology and abstract test suite necessary for checking the conformance of any CAN implementation of the CAN specified in ISO 11898-1.
ISO 16845-2:2014 establishes test cases and test requirements to realize a test plan verifying if the CAN transceiver with implemented selective wake-up functions conform to the specified functionalities. The kind of testing defined in ISO 16845-2:2014 is named as conformance testing.
CAN-based higher-layer protocols[edit]
As the CAN standard does not include tasks of application layer protocols, such as flow control, device addressing, and transportation of data blocks larger than one message, and above all, application data, many implementations of higher layer protocols were created. Several are standardized for a business area, although all can be extended by each manufacturer. For passenger cars, each manufacturer has its own standard. Among these implementations are:
Standardized approaches[edit]

ARINC 812 or ARINC 825 (for the aviation industry)
CANopen - EN 50325-4 (used for industrial automation)
DeviceNet (used for industrial automation)
EnergyBus - CiA 454 (used for light electrical vehicles)
ISOBUS - ISO 11783 (agriculture)
ISO-TP - ISO 15765-2 (Transport protocol for automotive diagnostic)
SAE J1939 (In-vehicle network for buses and trucks)
MilCAN
NMEA 2000 - IEC 61162-3 (marine industry)
Unified Diagnostic Services (UDS) - ISO 14229 (automotive diagnostics)

Other approaches[edit]

CANaerospace - Stock (for the aviation industry)
CAN Kingdom - Kvaser (embedded control system)
CCP/XCP (automotive ECU calibration)
GMLAN - General Motors (for General Motors)
RV-C - RVIA (used for recreational vehicles)
SafetyBUS p - Pilz (used for industrial automation)
UAVCAN (aerospace and robotics)

CANopen Lift[edit]
The CANopen Special Interest Group (SIG) "Lift Control", which was founded in 2001, develops the CANopen application profile CiA 417 for lift control systems. The first version of CiA 417 was published in summer 2003. The version 2.0 has been available on CiA's website since February 2010. The SIG works on extending the features for CANopen lift systems, improves technical content and ensures that the current legal standards for lift control systems are met. The version 2.1.0 was published in July 2012 and version 2.2.0 (available for CiA members) was published in December 2015 as Draft Standard Proposal. At the moment (2016) the SIG is working on version 2.3.0 (available for CiA members)
Jörg Hellmich (ELFIN GmbH) is the chairman of this SIG and manages a wiki of the CANopen lift community with content about CANopen lift.
Security[edit]
CAN is a low-level protocol and does not support any security features intrinsically. There is also no encryption in standard CAN implementations, which leaves these networks open to man-in-the-middle packet interception. In most implementations, applications are expected to deploy their own security mechanisms; e.g., to authenticate incoming commands or the presence of certain devices on the network. Failure to implement adequate security measures may result in various sorts of attacks if the opponent manages to insert messages on the bus.[16] While passwords exist for some safety-critical functions, such as modifying firmware, programming keys, or controlling antilock brake actuators, these systems are not implemented universally and have a limited number of seed/key pairs.
Development tools[edit]
When developing or troubleshooting the CAN bus, examination of hardware signals can be very important. Logic analyzers and bus analyzers are tools which collect, analyse, decode and store signals so people can view the high-speed waveforms at their leisure. There are also specialist tools as well as CAN bus monitors.
A CAN bus monitor is an analysis tool, often a combination of hardware and software, used during development of hardware making use of the CAN bus.
Typically the CAN bus monitor will listen to the traffic on the CAN bus in order to display it in a user interface. Often the CAN bus monitor offers the possibility to simulate CAN bus activity by sending CAN frames to the bus. The CAN bus monitor can therefore be used to validate expected CAN traffic from a given device or to simulate CAN traffic in order to validate the reaction from a given device connected to the CAN bus. ...
Licensing[edit]
Bosch holds patents on the technology, and manufacturers of CAN-compatible microprocessors pay license fees to Bosch, which are normally passed on to the customer in the price of the chip. Manufacturers of products with custom ASICs or FPGAs containing CAN-compatible modules need to pay a fee for the CAN Protocol License.[17]
See also[edit]

Byteflight
Car audio
CAN bus monitor
CANopen - Communication protocol for embedded systems
CANpie – Open Source device driver for CAN
CAN FD – New implementation of CAN with a faster transmission
can4linux – Open Source Linux device driver for CAN
FlexCAN – An alternative implementation.
FlexRay – A possible future direction
List of network buses
Local Interconnect Network – A low cost alternative.
MOST bus
OBD-II PIDs – List of Parameter IDs
OSEK
SAE J1939 - Communication protocol for trucks and busses
SocketCAN – A set of open source CAN drivers and a networking stack contributed by Volkswagen Research to the Linux kernel.
ESD protection[permanent dead link] for CAN bus and CAN FD

References[edit]


^ "CAN History". CAN in Automation. 
^ "Mercedes-Benz S-Class W 140". mercedes-benz.com. 23 February 2016. Retrieved 27 October 2017. 
^ "CAN in Automation - Mercedes W140: First car with CAN". can-newsletter.org. Retrieved 27 October 2017. 
^ Bosch Semiconductor CAN Literature
^ Building Adapter for Vehicle On-board Diagnostic, obddiag.net, accessed 2009-09-09
^ Comparison of Event-Triggered and Time-Triggered Concepts with Regard to Distributed Control Systems A. Albert, Robert Bosch GmbH Embedded World, 2004, Nürnberg
^ "NISMO Increases GT6 GPS Data Logger Functionality and Track Count". www.gtplanet.net. 
^ ISO11783 a Standardized Tractor – Implement Interface
^ Understanding Microchip’s CAN Module Bit Timing
^ "ISO7637-3 diodes protection for CAN bus". 
^ "CAN bus ESD protection". 
^ "CAN BUS MESSAGE FRAMES – Overload Frame, Interframe Space". 
^ * Nolte, Thomas; Hansson, Hans; Norström, Christer; Punnekkat, Sasikumar (2001). "Using bit-stuffing distributions in CAN analysis". IEEE Real-Time Embedded Systems Workshop at the Real-Time Systems Symposium. 
^ "Controller Area Network (CAN)". Vector Group. Retrieved 25 Sep 2013. 
^ "ISO 11898-1:2003 - Road vehicles -- Controller area network (CAN) -- Part 1: Data link layer and physical signalling". ISO. 
^ "We Drove a Car While It Was Being Hacked". motherboard.vice.com. 
^ License Conditions CAN Protocol and CAN FD Protocol


External links[edit]

Wiki on CAN technology and products
Bosch specification (old document — slightly ambiguous/unclear in some points, superseded by the standard [1])
Bosch CAN FD Specification Version 1.0
Controller Area Network (CAN) Schedulability Analysis: Refuted, Revisited and Revised
Pinouts for common CAN bus connectors
Independent discussion platform CANLIST
A webpage about CAN in automotive
Controller Area Network (CAN) Schedulability Analysis with FIFO Queues
Controller Area Network (CAN) Implementation Guide
Free Tutorial: Controller Area Network (CAN) Introduction and Fundamentals
Freeware Bit-Timing calculator for Windows, supports a lot of microcontrollers, e.g. Atmel, STM32, Microchip, Renesas, ... (ZIPfile)
CAN and CAN-FD protection in automotive
Free e-learning module "Introduction to CAN"
ARINC-825 Tutorial (video) from Excalibur Systems Inc.
ISO - International Organization for Standardization
Understanding and Using the Controller Area Network from UC Berkeley







v
t
e


Technical and de facto standards for wired computer buses



General



System bus
Front-side bus
Back-side bus
Daisy chain
Control bus
Address bus
Bus contention
Network on a chip
Plug and play
List of bus bandwidths





Standards



SS-50 bus
S-100 bus
Multibus
Unibus
VAXBI
MBus
STD Bus
SMBus
Q-Bus
Europe Card Bus
ISA
STEbus
Zorro II
Zorro III
CAMAC
FASTBUS
LPC
HP Precision Bus
EISA
VME
VXI
VXS
NuBus
TURBOchannel
MCA
SBus
VLB
PCI
PXI
HP GSC bus
InfiniBand
UPA
PCI Extended (PCI-X)
AGP
PCI Express (PCIe)
Direct Media Interface (DMI)
RapidIO
Intel QuickPath Interconnect
NVLink
HyperTransport

Infinity Fabric


Intel UltraPath Interconnect





Storage



ST-506
ESDI
IPI
SMD
Parallel ATA (PATA)
SSA
DSSI
HIPPI
Serial ATA (SATA)
SCSI

Parallel
SAS


Fibre Channel
SATAe
PCI Express (via AHCI or NVMe logical device interface)





Peripheral



Apple Desktop Bus
DCB
HP-IL
HIL
MIDI
RS-232
RS-422
RS-423
RS-485
DMX512-A
IEEE-488 (GPIB)
IEEE-1284 (parallel port)
UNI/O
ACCESS.bus
1-Wire
D²B
I²C
SPI
Parallel SCSI
Profibus
IEEE 1394 (FireWire)
USB
Camera Link
External PCIe
Thunderbolt





Audio



ADAT Lightpipe
AES3
Intel HD Audio
I²S
MADI
McASP
S/PDIF
TOSLINK





Portable



PC Card
ExpressCard





Embedded



Multidrop bus
CoreConnect
AMBA
Wishbone
SLIMbus






Interfaces are listed by their speed in the (roughly) ascending order, so the interface at the end of each section should be the fastest.
 Category










v
t
e


Automation protocols



Process automation



AS-i
BSAP
CC-Link Industrial Networks
CIP
CAN bus

CANopen
DeviceNet


ControlNet
DF-1
DirectNET
EtherCAT
Ethernet Global Data (EGD)
Ethernet Powerlink
EtherNet/IP
Factory Instrumentation Protocol
FINS
FOUNDATION fieldbus

H1
HSE


GE SRTP
HART Protocol
Honeywell SDS
HostLink
INTERBUS
MECHATROLINK
MelsecNet
Modbus
Optomux
PieP
Profibus
PROFINET IO
RAPIEnet
SERCOS interface
SERCOS III
Sinec H1
SynqNet
TTEthernet





Industrial control system



MTConnect
OPC DA
OPC HDA
OPC UA





Building automation



1-Wire
BACnet
C-Bus
CEBus
DALI
DSI
DyNet
Factory Instrumentation Protocol
KNX
LonTalk
Modbus
oBIX
VSCP
X10
xAP
xPL
ZigBee





Power-system automation



IEC 60870

IEC 60870-5
IEC 60870-6


DNP3
Factory Instrumentation Protocol
IEC 61850
IEC 62351
Modbus
Profibus





Automatic meter reading



ANSI C12.18
IEC 61107
DLMS/IEC 62056
M-Bus
Modbus
ZigBee





Automobile / Vehicle



AFDX
ARINC 429
CAN bus

ARINC 825
SAE J1939
NMEA 2000
FMS


Factory Instrumentation Protocol
FlexRay
IEBus
J1587
J1708
Keyword Protocol 2000
Unified Diagnostic Services
LIN
MOST
VAN









Authority control



GND: 4338572-2











						Retrieved from "https://en.wikipedia.org/w/index.php?title=CAN_bus&oldid=816297918#Standards"					Categories: CAN busComputer networksSerial busesIndustrial computingIndustrial automationRobert Bosch GmbHHidden categories: All articles with dead external linksArticles with dead external links from July 2017Articles with permanently dead external linksWikipedia articles with GND identifiers