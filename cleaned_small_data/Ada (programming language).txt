


paradigm
multiparadigm


designed


milstd1815ada jean ichbiah
tucker taft
2005 tucker taft
2012 tucker taft




first appeared
february 1980 years 198002





stable release

2012 tc112 february 2016 months 20160201



preview release

2012 tc13 april 2015 years 201504






typing discipline
static strong safe nominative



crossplatform multiplatform


filename extensions



website
wwwadaicorg


major implementations


adacore gnat free download httplibreadacorecomdownload
green hills software optimising compiler
apexada objectada
ddci score


dialects


spark ravenscar profile


influenced


algol pascal smalltalk modula2 java 2005 eiffel 2012


influenced


chapel5 eiffel java plsql plpgsql ruby rust6 seed7 sqlpsm vhdl




programming wikibooks




structured statically typed imperative widespectrum objectoriented highlevel computer programming language extended pascal languages builtin language support designbycontract extremely strong typing explicit concurrency offering tasks synchronous message passing protected objects nondeterminism improves code safety maintainability using compiler find errors favor runtime errors international standard current version known 20127 defined isoiec 865220128
originally designed team jean ichbiah honeywell bull contract united states department defense 1977 1983 supersede programming languages used time9 named lovelace 1815–1852 credited first computer programmer10



contents


features
history
standardization
language constructs

hello world
data types
control structures
packages procedures functions
concurrency
pragmas
spark differences


also
references

international standards
rationale
books
archives


external links



featuresedit
originally targeted embedded realtime systems revision designed tucker taft intermetrics 1992 1995 improved support systems numerical financial objectoriented programming
features include strong typing modularity mechanisms packages runtime checking parallel processing tasks synchronous message passing protected objects nondeterministic select statements exception handling generics added support objectoriented programming including dynamic dispatch
syntax minimizes choices ways perform basic operations prefers english keywords else symbols uses basic arithmetical operators avoids using symbols code blocks delimited words declare begin cases followed identifier block closes loop loop case conditional blocks avoids dangling else could pair wrong nested ifexpression languages like java
designed development large software systems packages compiled separately package specifications package interface also compiled separately without implementation check consistency makes possible detect problems early design phase implementation starts
large number compiletime checks supported help avoid bugs would detectable runtime languages would require explicit checks added source code example syntax requires explicitly named closing blocks prevent errors mismatched tokens adherence strong typing allows detection many common software errors wrong parameters range violations invalid references mismatched types either compiletime otherwise runtime concurrency part language specification compiler cases detect potential deadlockscitation needed compilers also commonly check misspelled identifiers visibility packages redundant declarations provide warnings useful suggestions error
also supports runtime checks protect access unallocated memory buffer overflow errors range violations offbyone errors array access errors detectable bugs checks disabled interest runtime efficiency often compiled efficiently also includes facilities help program verification reasons widely used critical systems anomaly might lead serious consequences accidental death injury severe financial loss examples systems used include avionics railways banking military space technology1112
adas dynamic memory management highlevel typesafe generic untyped pointers implicitly declare pointer type instead dynamic memory allocation deallocation must take place explicitly declared access types access type associated storage pool handles lowlevel details memory management programmer either default storage pool define ones particularly relevant nonuniform memory access even possible declare several different access types designate type different storage pools also language provides accessibility checks compile time time ensures access value cannot outlive type object points
though semantics language allow automatic garbage collection inaccessible objects implementations support default would cause unpredictable behaviour realtime systems support limited form regionbased memory management also creative storage pools provide limited form automatic garbage collection since destroying storage pool also destroys objects pool
designed resemble english language syntax comments doubledash resembling dash denotes comment text comments stop line danger unclosed comments accidentally voiding whole sections source code prefixing line column skip code clearly denoted column repeated page limit nesting comments thereby allowing prior code commentedout sections commentedout even larger sections unicode characters allowed comments symbolic formulas e0m×c² compiler doubledash treated endofline allowing continued parsing language contextfree grammar
semicolon statement terminator null nooperation statement null single without statement terminate allowed
unlike standards language definition known reference manual sometimes language reference manual free content thus common reference programmers programmers implementing compilers apart reference manual also extensive rationale document explains language design various language constructs document also widely used programmers language revised rationale document written
notable free software tool used many programmers writing source code gnat programming studio
historyedit
1970s department defense concerned number different programming languages used embedded computer system projects many obsolete hardwaredependent none supported safe modular programming 1975 working group high order language working group holwg formed intent reduce number finding creating programming language generally suitable departments ministry defence requirements many iterations beginning original straw proposal eventual programming language named total number highlevel programming languages projects fell 1983 1996
holwg working group crafted steelman language requirements series documents stating requirements felt programming language satisfy many existing languages formally reviewed team concluded 1977 existing language specifications
requests proposals programming language issued four contractors hired develop proposals names intermetrics benjamin brosgol green honeywell bull jean ichbiah blue softech john goodenough13 yellow international spitzen april 1978 public scrutiny green proposals passed next phase 1979 green proposal designed jean ichbiah honeywell bull chosen given name ada—after augusta countess lovelace proposal influenced programming language ichbiah group developed 1970s preliminary reference manual published sigplan notices june 1979 military standard reference manual approved december 1980 lovelaces birthday given number milstd1815 honor lovelaces birth year 1981 hoare took advantage turing award speech criticize overly complex hence unreliable14 subsequently seemed recant foreword wrote textbook15
attracted much attention programming community whole early days backers others predicted might become dominant language general purpose programming defenserelated work16 ichbiah publicly stated within years programming languages would remain lisp17 early compilers struggled implement large complex language compiletime runtime performance tended slow tools primitive16 compiler vendors expended efforts passing massive languageconformancetesting governmentrequired acvc validation suite required another novel feature language effort17
first validated implementation adaed translator18 certified april 1983 adaed implemented highlevel language setl19 number commercial companies began offering compilers associated development tools including alsys telesoft ddci advanced computer techniques tartan laboratories systems verdix others20




augusta king countess lovelace


1991 department defense began require mandate software21 though exceptions rule often granted16 department defense mandate effectively removed 1997 began embrace cots technology16 similar requirements existed nato countries required nato systems involving command control functions mandated preferred language defenserelated applications countries sweden germany canada22
late 1980s early 1990s compilers improved performance still barriers full exploitation adas abilities including tasking model different realtime programmers used to17
adas safetycritical support features used military applications also commercial projects software severe consequences avionics traffic control commercial rockets ariane satellites space systems railway transport banking12 example airplane information management system flybywire system software boeing written ada2324 developed honeywell transport systems collaboration consultants ddci became arguably bestknown project civilian military2324 canadian automated traffic system written million lines sloc count featured advanced distributed processing distributed database objectoriented design also used traffic systems uk’s nextgeneration interim future area control tools support ifacts traffic control system designed implemented using spark ada25 also used french incab signalling system highspeed rail system metro suburban trains paris london hong kong york city1226
standardizationedit
language became ansi standard 1983 ansimilstd 1815a without changes became standard 1987 iso86521987 version language commonly known date adoption ansi sometimes referred also date adoption
joint isoansi standard iso86521995 published february 1995 making first standard objectoriented programming language help standard revision future acceptance force funded development gnat compiler presently gnat compiler part compiler collection
work continued improving updating technical content programming language technical corrigendum published october 2001 major amendment isoiec 86521995amd 12007 published march 2007 adaeurope 2012 conference stockholm resource association adaeurope announced completion design latest version programming language submission reference manual international organization standardization approval isoiec 86522012 published december 20128
related standards include 865131988 information processing systems—computer graphics—graphical kernel system language bindings—part
language constructsedit
algollike programming language featuring control structures reserved words else however also many data structuring facilities abstractions included original algol type definitions records pointers enumerations constructs part inherited inspired pascal
hello world adaedit
common example languages syntax hello world program helloadb


adatextio adatextio
procedure hello
begin
putline hello world
hello

program compiled using freely available open source compiler gnat executing


gnatmake helloadb

data typesedit
adas type system based predefined primitive types allows users declare types declaration turn based internal representation type describing goal achieved allows compiler determine suitable memory size type check violations type definition compile time time range violations buffer overruns type consistency supports numerical types defined range modulo types aggregate types records arrays enumeration types access types define reference instance specified type untyped pointers permitted special types provided language task types protected types
example date might represented


type daytype range
type monthtype range
type yeartype range 1800 2100
type hours
type weekday monday tuesday wednesday thursday friday saturday sunday

type date
record
daytype
month monthtype
year yeartype
record

types refined declaring subtypes


subtype workinghours hours range hours work
subtype workingday weekday range monday friday days work

workload constant arrayworkingday workinghours implicit type declaration
friday monday others lookup table working hours initialization

types modifiers limited abstract private private types accessed limited types modified copied within scope package defines them27 adds additional features objectoriented extension types
control structuresedit
structured programming language meaning flow control structured standard statements standard constructs deep level early exit supported also supported commands seldom needed


equal loop
loop
adatextioputline waiting
loop


adatextioputline condition
else
adatextioputline condition


loop
adatextioput iteration
adatextioput
adatextioputline
loop

loop

exit
loop

case
adatextioput zero
adatextioput
adatextioput
case statements cover possible cases
others adatextioput none
case

aweekday weekdayrange loop loop enumeration
putline weekdayimageaweekday output string representation enumeration
aweekday workingday check subtype enumeration
putline work
workinghoursimage workloadaweekday access lookup table

loop

packages procedures functionsedit
among parts program packages procedures functions
example package specification exampleads


package example
type number range
procedure printandincrement number
example

package body exampleadb


adatextio
package body example

number numberfirst

procedure printandincrement number

function next number return number
begin
return
next

begin
adatextioputline total numberimagej
next
printandincrement

package initialization executed package elaborated
begin
numberlast loop
printandincrement
loop
example

program compiled using freely available open source compiler gnat executing


gnatmake exampleadb

packages procedures functions nest depth also logical outermost block
package procedure function declarations constants types variables procedures functions packages declared order
concurrencyedit
language support taskbased concurrency fundamental concurrent unit task builtin limited type tasks specified parts task declaration defines task interface similar type declaration task body specifies implementation task depending implementation tasks either mapped operating system threads processes scheduled internally runtime
tasks entries synchronisation form synchronous message passing task entries declared task specification task entry accept statements within task body control flow task reaches accept statement task blocked corresponding entry called another task similarly calling task blocked called task reaches corresponding accept statement task entries parameters similar procedures allowing tasks synchronously exchange data conjunction select statements possible define guards accept statements similar dijkstras guarded commands
also offers protected objects mutual exclusion protected objects monitorlike construct guards instead conditional variables signaling similar conditional critical regions protected objects combine data encapsulation safe mutual exclusion monitors entry guards conditional critical regions main advantage classical monitors conditional variables required signaling avoiding potential deadlocks incorrect locking semantics like tasks protected object builtin limited type also declaration part body
protected object consists encapsulated private data accessed within protected object procedures functions entries guaranteed mutually exclusive exception functions required side effect free therefore concurrently functions task calling protected object blocked another task currently executing inside protected object released task leaves protected object blocked tasks queued protected object ordered time arrival
protected object entries similar procedures additionally guards guard evaluates false calling task blocked added queue entry another task admitted protected object task currently executing inside protected object guards reevaluated whenever task leaves protected object time evaluation guards changed
calls entries requeued entries signature task requeued blocked added queue target entry means protected object released allows admission another task
select statement used implement nonblocking entry calls accepts nondeterministic selection entries also guards timeouts aborts
following example illustrates concepts concurrent programming


adatextio adatextio

procedure traffic

type airplaneid range airplanes

task type airplane airplaneid task representing airplanes initialisation parameter
type airplaneaccess access airplane reference type airplane

protected type runway shared runway protected allow concurrent access
entry assignaircraft airplaneid entries guaranteed mutually exclusive
entry clearedrunway airplaneid
entry waitforclear
private
clear boolean true protected private data generally flag
runway
type runwayaccess access runway

traffic controller task takes requests takeoff landing
task type controller myrunway runwayaccess
task entries synchronous message passing
entry requesttakeoff airplaneid takeoff runwayaccess
entry requestapproachid airplaneid approach runwayaccess
controller

allocation instances
runway1 aliased runway instantiate runway
controller1 controller runway1access controller manage

implementations types
protected body runway
entry assignaircraft airplaneid
clear entry guard calling tasks blocked condition true
begin
clear false
putline airplaneidimage runway


entry clearedrunway airplaneid
clear
begin
clear true
putline airplaneidimage cleared runway


entry waitforclear
clear
begin
null need anything task enter clear true

runway

task body controller
begin
loop
myrunwaywaitforclear wait runway available blocking call
select wait types requests whichever runnable first
requestapproachcount guard statement accept tasks queuing requestapproach
accept requesttakeoff airplaneid takeoff runwayaccess
start synchronized part
myrunwayassignaircraft reserve runway potentially blocking call protected object busy entry guard false
takeoff myrunway assign parameter value tell airplane runway
requesttakeoff synchronised part

accept requestapproach airplaneid approach runwayaccess
myrunwayassignaircraft
approach myrunway
requestapproach
terminate tasks left could call
terminate
select
loop


task body airplane
runwayaccess
begin
controller1requesttakeoff call blocks controller task accepts completes accept block
putline airplaneidimage taking
delay
rwyclearedrunway call block clear false tasks inside protected object
delay around
loop
select request runway
controller1requestapproach blocking call controller reaching accept block return completion
exit call returned clear landing leave select block proceed

delay timeout answer seconds something else everything following block
putline airplaneidimage holding pattern simply print message
select
loop
delay landing approach
putline airplaneidimage touched
rwyclearedrunway notify runway done


newairplane airplaneaccess

begin
airplaneidrange loop create airplane tasks
newairplane airplane start running directly creation
delay
loop
traffic

pragmasedit
pragma compiler directive conveys information compiler allow specific manipulation compiled output28 certain pragmas built language29 implementationspecific
examples common usage compiler pragmas would disable certain features runtime type checking array subscript boundary checking instruct compiler insert object code lieu function call inline functions
spark differencesedit
spark language consists welldefined robust safer subset language uses contracts describe specification components form suitable static dynamic verification
spark83952005 contracts encoded comments ignored standard compiler processed spark examiner associated tools
spark 2014 contrast uses 2012s builtin aspect syntax express contracts bringing core language
main tool spark 2014 gnatprove based gnatgcc infrastructure reuses almost entirety gnat 2012 frontend
alsoedit

apse specification programming environment support software development
ravenscar profile subset tasking features designed safetycritical hard realtime computing
spark programming language programming language consisting highly restricted subset annotated meta information describing desired component behavior individual runtime requirements

referencesedit



technical corrigendum 2012 published resource association 20160129 retrieved 20160223
consolidated 2012 language reference manual conformity assessment authority archived original 20160303 retrieved 20160223
technical corrigendum 2012 conformity assessment authority archived original 20160302 retrieved 20160223
objectada ptccom retrieved 20140127
chapel spec acknowledgements cray 20151001 retrieved 20160114
stackallocation subsetspecifier 1693 february 2012 retrieved february 2016
ganssle jack 20130529 resource association news resource programming language adaicorg retrieved 20130614
isoiec 86522012 information technology programming languages international organization standardization retrieved 20121223
programming language university mich retrieved 2016
fuegi francis lovelace babbage creation 1843 notes annals history computing october–december 2003 1626 doi101109mahc20031253887
tucker taft florence olsen 19990630 helps churn lessbuggy code government computer news retrieved 20100914
feldman michael whos using sigada education working group
john goodenough staff profile seicmuedu retrieved 20140127
hoare emperors clothes communications 1981
watt wichmann findlay language methodology prenticehall 1987
sward ricky november 2010 rise fall persistence sigada proceedings sigada annual international conference sigada 71–74 doi10114518790631879081
rosen paradoxes letters sigada august 2009 2835
softech waltham 19830411 compiler validation summary report adaed version v001 retrieved 20101216 maint uses authors parameter link
dewar robert fisher gerald schonberg edmond froelich robert bryant stephen goss clinton burke michael november 1980 translator interpreter sigplan notices proceedings acmsigplan symposium programming language 194–201 doi101145948632948659 isbn 0897910303
validated compilers list information clearinghouse july 1992 1–36
information clearinghouse 19830411 congressional mandate archived original 20160304 retrieved 20150607
babiak nicholas 1989 weapon system computer language panacea calamity university united states force 39–40
rehmer karl 2009 hads team stellman andrew greene jennifer beautiful teams inspiring cautionary tales veteran team leaders sebastopol california oreilly 299–312
wolfe alexander october 2004 theres still life left queue also httpdeliveryacmorg10114510400001035608p28wolfepdfpermanent dead link
adacore gnat chosen next generation system
adacore look whos using
syntax card archived original july 2011 retrieved february 2011
pragmas archiveadaiccom retrieved 20140127
appendixannex predefined language pragmas archiveadaiccom archived original 20120206 retrieved 20140127



international standardsedit

isoiec 8652 information technology—programming languages—ada
isoiec 15291 information technology—programming languages—ada semantic interface specification asis
isoiec 18009 information technology—programming languages—ada conformity assessment language processor acats
ieee standard 10035b1996 posix binding
language mapping specification corba mapping

rationaleedit
documents published various forms including print

ichbiah jean barnes john firth robert woodger mike 1986 rationale design programming language archived original 20070202
barnes john 1995 rationale language standard libraries
barnes john 2006 2005 rationale 2005

booksedit


booch grady 1987 software engineering california benjamincummings publishing company isbn 0805306048
skansholm beginning addisonwesley isbn 0201403765
geoff gilpin guided tour tutorial prentice hall isbn 9780130040459
john barnes programming 2005 addisonwesley 2006 isbn 0321340787
john barnes programming plus language reference manual addisonwesley isbn 0201565390
john barnes programming addisonwesley isbn 0201342936
john barnes high integrity spark approach addisonwesley 1997 isbn 0201175177
john barnes high integrity software spark approach safety security addisonwesley 2003 isbn 0321136160
john beidler data structures algorithms objectoriented approach using springerverlag 1997 isbn 0387948341
dean gonzalez programmers handbook benjamincummings publishing company 1991 isbn 0805325298
benari software engineers john wiley sons 1998 isbn 0471979120
norman cohen second language mcgrawhill scienceengineeringmath isbn 0070116075
alan burns andy wellings realtime systems programming languages realtime java realtime posix addisonwesley isbn 0201729881
alan burns andy wellings concurrency cambridge university press 1995 isbn 052162911x
colin atkinson objectoriented reuse concurrency distribution adabased approach addisonwesley isbn 0201565277
grady booch doug bryan software engineering addisonwesley isbn 0805306080
dowhile jones action practical programming examples john wiley sons isbn 0471607088
daniel stubbs neil webre data structures abstract data types brooks cole isbn 0534144489
pascal ledru distributed programming protected objects dissertationcom isbn 1581120346
fintan culwin developmental approach prentice hall isbn 0132646803
john english fintan culwin craft object oriented programming prentice hall isbn 0132303507
david wheeler springerverlag isbn 0387948015
david musser alexander stepanov generic library linear list processing packages springerverlag isbn 0387971335
michael feldman software construction data structures addisonwesley isbn 0201887959
simon johnston programmers addisonwesley isbn 0201403633
problem solving program design feldman michael koffman elliot isbn 0201522799 addisonwesley publishing company 1992 1993 pages
michael feldman elliot koffman addisonwesley isbn 020136123x
nell dale chip weems john mccormick programming problem solving jones bartlett publishers isbn 0763702935
nell dale john mccormick plus data structures objectoriented approach edition jones bartlett publishers isbn 0763737941
bruce krell developing lifecycle methods bantam dell group isbn 0553091026
judy bishop distributed developments experiences cambridge university press isbn 0521392519
sanden software systems construction examples prentice hall isbn 013030834x
bruce hillam introduction abstract data types using prentice hall isbn 0130459496
david rudd introduction software design development brooks cole isbn 0314028293
pyle developing safety systems guide using prentice hall isbn 0132042983
louis baker artificial intelligence mcgrawhill isbn 0070033501
alan burns andy wellings hrthood structured design method hard realtime systems northholland isbn 0444821643
walter savitch charles peterson introduction science programming benjamincummings publishing company isbn 0805370706
mark allen weiss data structures algorithm analysis benjamincummings publishing company isbn 0805390553
henry ledgard introduction second edition springerverlag isbn 0387908145
dines bjørner oest towards formal description london springerverlag 1980 isbn 3540102833


archivesedit

programming language materials 1981–1990 charles babbage institute university minnesota includes literature software products designed language government publications including project reports technical reports working papers newsletters user group information

external linksedit



wikimedia commons media related programming language





wikibooks book topic programming





wikisource several original texts related





wikiversity learning resources



programming language programming language curlie based dmoz
sigada
adaeurope organization
isoiecjtc1sc22wg9 home standards
interview stucker taft maintainer












pascal programming language family



dialects



pascal
object pascal
pascal script
oxygene
clascal
concurrent pascal
superpascal








compilers




current



delphi
oxygene
pocketstudio
pascal
pascal
free pascal lazarus
pascalabcnet
pascal
turbo51
midletpascal
micro pascal






historic



virtual pascal
apple pascal
turbo pascal
microsoft pascal
ucsd pascal

pascalmt














firemonkey

object windows library
openwire

turbo vision
visual component library








comparison pascal
comparison pascal delphi


related
algol 1958
modula2 1977
1983
oberon 1986
modula3 1988
oberon2 1991
component pascal 1991

















programming languages






comparison
timeline
history








assembly
basic



cobol
fortran

groovy
haskell
java
javascript
kotlin
lisp

objectivec
pascal
perl

python
rexx
ruby
shell
smalltalk
swift
visual basic vbnet
vbscript









category
lists

alphabetical
categorical
generational
nonenglishbased











authority control



40004302
xx531014

















embedded systems



general terms



embedded software
original equipment manufacturer
embedded database
embedded hypervisor
consumer electronics
microcontroller
asicfpgasoc
memory footprint
singleboard computer

board support package
cross compiler
embedded
bootloader





firmware controls



custom firmware
rooting android
jailbreaking
playstation jailbreak
closed platform
vendor lockin
defective design
hacking consumer electronics
homebrew video games
crippleware





software libraries



uclibc
dietlibc
embedded glibc
musl





development tools



bitbake
buildroot
busybox
yocto project
almquist shell
standalone shell
openembedded





operating systems



linux embedded systems
linux mobile devices
lightweight linux
windows iotwin
realtime operating system





programming languages




assembly language
capl
embedded
misra
nesc
embedded
embedded java








lightweight browsers
opensource computing hardware
opensource robotics











retrieved httpsenwikipediaorgwindexphptitleadaprogramminglanguageoldid818336919 categories programming languagesada programming languageavionics programming languagesembedded systemshigh integrity programming languagemultiparadigm programming languagesprogramming language standardsprogramming languages created 1980programming languages standardstatically typed programming languagessystems programming languageshidden categories maint uses authors parameterall articles dead external linksarticles dead external links june 2017articles permanently dead external linksall articles unsourced statementsarticles unsourced statements march 2016articles dmoz linkswikipedia articles identifiers
