

software development


core activities




processes
requirements
design
engineering
construction
testing
debugging
deployment
maintenance




paradigms models




agile
cleanroom
incremental
prototyping
spiral
waterfall




methodologies frameworks




devops
dsdm


kanban
lean




safe
scrum
semat


vmodel





supporting disciplines




configuration management
documentation
software quality assurance
project management
user experience




practices




atdd






standup





tools




compiler
debugger
profiler
designer
modeling

build automation
release automation
infrastructure code
testing




standards boks




cmmi
ieee standards
9001
isoiec standards
swebok
pmbok
babok















software testing investigation conducted provide stakeholders information quality software product service test1 software testing also provide objective independent view software allow business appreciate understand risks software implementation test techniques include process executing program application intent finding software bugs errors defects verifying software product
software testing involves execution software component system component evaluate properties interest general properties indicate extent component system test

meets requirements guided design development
responds correctly kinds inputs
performs functions within acceptable time
sufficiently usable
installed intended environments
achieves general result stakeholders desire

number possible tests even simple software components practically infinite software testing uses strategy select tests feasible available time resources result software testing typically exclusively attempts execute program application intent finding software bugs errors defects testing iterative process fixed illuminate deeper bugs even create ones
software testing provide objective independent information quality software risk failure users sponsors1
software testing conducted soon executable software even partially complete exists overall approach software development often determines testing conducted example phased process testing occurs system requirements defined implemented testable programs contrast agile approach requirements programming testing often done concurrently



contents


overview

defects failures
input combinations preconditions
economics
roles


history
testing methods

static dynamic testing
approach

whitebox testing
blackbox testing

3221 visual testing


greybox testing




testing levels

unit testing
integration testing
component interface testing
system testing
operational acceptance testing


testing types techniques tactics

installation testing
compatibility testing
smoke sanity testing
regression testing
acceptance testing
alpha testing
beta testing
functional nonfunctional testing
continuous testing
destructive testing
software performance testing
usability testing
accessibility testing
security testing
internationalization localization
development testing
testing
concurrent testing
conformance testing type testing


testing process

traditional waterfall development model
agile extreme development model


sample testing cycle
automated testing

testing tools


measurement software testing

hierarchy testing difficulty


testing artifacts
certifications
controversy
related processes

software verification validation
software quality assurance


also
references
reading
external links



overviewedit
although testing determine correctness software assumption specific hypotheses hierarchy testing difficulty testing cannot identify defects within software2 instead furnishes criticism comparison compares state behavior product test oracles—principles mechanisms someone might recognize problem oracles include limited specifications contracts3 comparable products past versions product inferences intended expected purpose user customer expectations relevant standards applicable laws criteria
primary purpose testing detect software failures defects discovered corrected testing cannot establish product functions properly conditions function properly specific conditions4 scope software testing often includes examination code well execution code various environments conditions well examining aspects code supposed needs current culture software development testing organization separate development team various roles testing team members information derived software testing used correct process software developed541–43
every software product target audience example audience video game software completely different banking software therefore organization develops otherwise invests software product assess whether software product acceptable users target audience purchasers stakeholders software testing aids process attempting make assessment
defects failuresedit
software defects caused coding errors common source expensive defects requirement gaps unrecognized requirements result errors omission program designer5426 requirement gaps often nonfunctional requirements testability scalability maintainability usability performance security
software faults occur following processes programmer makes error mistake results defect fault software source code defect executed certain situations system produce wrong results causing failure6 defects necessarily result failures example defects dead code never result failures defect turn failure environment changed examples changes environment include software computer hardware platform alterations source data interacting different software6 single defect result wide range failure symptoms
input combinations preconditionsedit
fundamental problem software testing testing combinations inputs preconditions initial state feasible even simple product417–187 means number defects software product large defects occur infrequently difficult find testing significantly nonfunctional dimensions quality supposed versus supposed do—usability scalability performance compatibility reliability—can highly subjective something constitutes sufficient value person intolerable another
software developers cant test everything combinatorial test design identify minimum number tests needed coverage want combinatorial test design enables users greater test coverage fewer tests whether looking speed test depth combinatorial test design methods build structured variation test cases8
economicsedit
study conducted nist 2002 reports software bugs cost economy billion annually third cost could avoided better software testing performed9dubious discuss
outsourcing software testing costs common china philippines india preferred destinations10
rolesedit
software testing done dedicated software testers 1980s term software tester used generally later also seen separate profession regarding periods different goals software testing11 different roles established test manager test lead test analyst test designer tester automation developer test administrator software testing also performed nondedicated software testers12
historyedit
separation debugging testing initially introduced glenford myers 197913 although attention breakage testing successful test case detects asyet undiscovered error1316 illustrated desire software engineering community separate fundamental development activities debugging verification
testing methodsedit






scientific article needs additional citations secondary tertiary sources review articles monographs textbooks please references provide context establish relevance primary research articles cited unsourced material challenged removed march 2015



static dynamic testingedit
many approaches available software testing reviews walkthroughs inspections referred static testing whereas actually executing programmed code given test cases referred dynamic testing static testing often implicit proofreading plus programming toolstext editors check source code structure compilers precompilers check syntax data flow static program analysis dynamic testing takes place program dynamic testing begin program complete order test particular sections code applied discrete functions modules typical techniques either using stubsdrivers execution debugger environment
static testing involves verification whereas dynamic testing also involves validation together help improve software quality among techniques static analysis mutation testing used ensure test cases detect errors introduced mutating source code
approachedit
software testing methods traditionally divided white blackbox testing approaches used describe point view test engineer takes designing test cases
whitebox testingedit
main article whitebox testing
whitebox testing also known clear testing glass testing transparent testing structural testing seeing source code tests internal structures workings program opposed functionality exposed enduser whitebox testing internal perspective system well programming skills used design test cases tester chooses inputs exercise paths code determine appropriate outputs analogous testing nodes circuit incircuit testing
whitebox testing applied unit integration system levels software testing process usually done unit level test paths within unit paths units integration subsystems system–level test though method test design uncover many errors problems might detect unimplemented parts specification missing requirements
techniques used whitebox testing include

testing testing application using public private apis application programming interfaces
code coverage creating tests satisfy criteria code coverage test designer create tests cause statements program executed least
fault injection methods intentionally introducing faults gauge efficacy testing strategies
mutation testing methods
static testing methods

code coverage tools evaluate completeness test suite created method including blackbox testing allows software team examine parts system rarely tested ensures important function points tested14 code coverage software metric reported percentage



function coverage reports functions executed
statement coverage reports number lines executed complete test
decision coverage reports whether true false branch given test executed



statement coverage ensures code paths branches terms control flow executed least helpful ensuring correct functionality sufficient since code process different inputs correctly incorrectly
blackbox testingedit
main article blackbox testing




black diagram


blackbox testing treats software black examining functionality without knowledge internal implementation without seeing source code testers aware software supposed it15 blackbox testing methods include equivalence partitioning boundary value analysis allpairs testing state transition tables decision table testing fuzz testing modelbased testing case testing exploratory testing specificationbased testing
specificationbased testing aims test functionality software according applicable requirements16 level testing usually requires thorough test cases provided tester simply verify given input output value behavior either expected value specified test case test cases built around specifications requirements application supposed uses external descriptions software including specifications requirements designs derive test cases tests functional nonfunctional though usually functional
specificationbased testing necessary assure correct functionality insufficient guard complex highrisk situations17
advantage black technique programming knowledge required whatever biases programmers tester likely different emphasize different areas functionality hand blackbox testing said like walk dark labyrinth without flashlight18 examine source code situations tester writes many test cases check something could tested test case leaves parts program untested
method test applied levels software testing unit integration system acceptance typically comprises testing higher levels also dominate unit testing well
visual testingedit
visual testing provide developers ability examine happening point software failure presenting data developer easily find information requires information expressed clearly1920
core visual testing idea showing someone problem test failure rather describing greatly increases clarity understanding visual testing therefore requires recording entire test process capturing everything occurs test system video format output videos supplemented realtime tester input pictureinapicture webcam audio commentary microphones
visual testing provides number advantages quality communication increased drastically testers show problem events leading developer opposed describing need replicate test failures cease exist many cases developer evidence requires test failure instead focus cause fault fixed
visual testing particularly wellsuited environments deploy agile methods development software since agile methods require greater communication testers developers collaboration within small teamscitation needed
testing exploratory testing important methodologies checking software integrity require less preparation time implement important bugs found quickly adhoc testing testing takes place improvised impromptu ability test tool visually record everything occurs system becomes important order document steps taken uncover bugclarification neededcitation needed
visual testing gathering recognition customer acceptance usability testing test used many individuals involved development processcitation needed customer becomes easy provide detailed reports feedback program users visual testing record user actions screen well voice image provide complete picture time software failure developers
information graphical user interface testing
greybox testingedit
main article gray testing
greybox testing american spelling graybox testing involves knowledge internal data structures algorithms purposes designing tests executing tests user blackbox level tester required full access softwares source code15not citation given manipulating input data formatting output qualify greybox input output clearly outside black calling system test distinction particularly important conducting integration testing modules code written different developers interfaces exposed test
however tests require modifying backend data repository database file qualify greybox user would normally able change data repository normal production operationscitation needed greybox testing also include reverse engineering determine instance boundary values error messages
knowing underlying concepts software works tester makes betterinformed testing choices testing software outside typically greybox tester permitted isolated testing environment activities seeding database tester observe state product tested performing certain actions executing statements database executing queries ensure expected changes reflected greybox testing implements intelligent test scenarios based limited information particularly apply data type handling exception handling on21
testing levelsedit
generally four recognized levels tests unit testing integration testing component interface testing system testing tests frequently grouped added software development process level specificity test main levels development process defined swebok guide unit integration system testing distinguished test target without implying specific process model22 test levels classified testing objective22
different levels tests perspective customers lowlevel testing highlevel testing group tests different level components software application product group tests whole software application productcitation needed
unit testingedit
main article unit testing
unit testing refers tests verify functionality specific section code usually function level objectoriented environment usually class level minimal unit tests include constructors destructors23
types tests usually written developers work code whitebox style ensure specific function working expected function might multiple tests catch corner cases branches code unit testing alone cannot verify functionality piece software rather used ensure building blocks software work independently
unit testing software development process involves synchronized application broad spectrum defect prevention detection strategies order reduce software development risks time costs performed software developer engineer construction phase software development lifecycle unit testing aims eliminate construction errors code promoted additional testing strategy intended increase quality resulting software well efficiency overall development process
depending organizations expectations software development unit testing might include static code analysis dataflow analysis metrics analysis peer code reviews code coverage analysis software testing practices
integration testingedit
main article integration testing
integration testing type software testing seeks verify interfaces components software design software components integrated iterative together bang normally former considered better practice since allows interface issues located quickly fixed
integration testing works expose defects interfaces interaction integrated components modules progressively larger groups tested software components corresponding elements architectural design integrated tested software works system24
component interface testingedit
practice component interface testing used check handling data passed various units subsystem components beyond full integration testing units2526 data passed considered message packets range data types checked data generated unit tested validity passed another unit option interface testing keep separate file data items passed often timestamp logged allow analysis thousands cases data passed units days weeks tests include checking handling extreme data values interface variables passed normal values25 unusual data values interface help explain unexpected performance next unit component interface testing variation blackbox testing26 focus data values beyond related actions subsystem component
system testingedit
main article system testing
system testing tests completely integrated system verify system meets requirements27 example system test might involve testing logon interface creating editing entry plus sending printing results followed summary processing deletion archiving entries logoff
operational acceptance testingedit
main article operational acceptance testing
operational acceptance used conduct operational readiness prerelease product service system part quality management system common type nonfunctional software testing used mainly software development software maintenance projects type testing focuses operational readiness system supported become part production environment hence also known operational readiness testing operations readiness assurance testing functional testing within limited tests required verify nonfunctional aspects system
addition software testing ensure portability system well working expected also damage partially corrupt operating environment cause processes within environment become inoperative28
testing types techniques tacticsedit
different labels ways grouping testing testing types software testing tactics techniques29




testingcup polish championship software testing katowice 2016


installation testingedit
main article installation testing
software systems installation procedures needed used main purpose testing procedures achieve installed software system used known installation testing
compatibility testingedit
main article compatibility testing
common cause software failure real perceived lack compatibility application software operating systems operating system versions target environments differ greatly original terminal application intended desktop required become application must render browser example case lack backward compatibility occur programmers develop test software latest version target environment users running results unintended consequence latest work function earlier versions target environment older hardware earlier versions target environment capable using sometimes issues fixed proactively abstracting operating system functionality separate program module library
smoke sanity testingedit
sanity testing determines whether reasonable proceed testing
smoke testing consists minimal attempts operate software designed determine whether basic problems prevent working tests used build verification test
regression testingedit
main article regression testing
regression testing focuses finding defects major code change occurred specifically seeks uncover software regressions degraded lost features including bugs come back regressions occur whenever software functionality previously working correctly stops working intended typically regressions occur unintended consequence program changes newly developed part software collides previously existing code common methods regression testing include rerunning previous sets test cases checking whether previously fixed faults reemerged depth testing depends phase release process risk added features either complete changes added late release deemed risky shallow consisting positive tests feature changes early release deemed risk regression testing typically largest test effort commercial software development30 checking numerous details prior software features even software developed using test cases test parts design ensure prior functionality still supported
acceptance testingedit
main article acceptance testing
acceptance testing mean things

smoke test used build acceptance test prior testing integration regression
acceptance testing performed customer often environment hardware known user acceptance testing acceptance testing performed part handoff process phases developmentcitation needed

alpha testingedit
alpha testing simulated actual operational testing potential userscustomers independent test team developers site alpha testing often employed offtheshelf software form internal acceptance testing software goes beta testing31
beta testingedit
beta testing comes alpha testing considered form external user acceptance testing versions software known beta versions released limited audience outside programming team known beta testers software released groups people testing ensure product faults bugs beta versions made available open public increase feedback field maximal number future users deliver value earlier extended even indefinite period time perpetual betacitation needed
functional nonfunctional testingedit
functional testing refers activities verify specific action function code usually found code requirements documentation although development methodologies work cases user stories functional tests tend answer question user particular feature work
nonfunctional testing refers aspects software related specific function user action scalability performance behavior certain constraints security testing determine breaking point point extremes scalability performance leads unstable execution nonfunctional requirements tend reflect quality product particularly context suitability perspective users
continuous testingedit
main article continuous testing
continuous testing process executing automated tests part software delivery pipeline obtain immediate feedback business risks associated software release candidate3233 continuous testing includes validation functional requirements nonfunctional requirements scope testing extends validating bottomup requirements user stories assessing system requirements associated overarching business goals34343536
destructive testingedit
main article destructive testing
destructive testing attempts cause software subsystem fail verifies software functions properly even receives invalid unexpected inputs thereby establishing robustness input validation errormanagement routinescitation needed software fault injection form fuzzing example failure testing various commercial nonfunctional testing tools linked software fault injection page also numerous opensource free software tools available perform destructive testing
information exception handling recovery testing
software performance testingedit
main article software performance testing
performance testing generally executed determine system subsystem performs terms responsiveness stability particular workload also serve investigate measure validate verify quality attributes system scalability reliability resource usage
load testing primarily concerned testing system continue operate specific load whether large quantities data large number users generally referred software scalability related load testing activity performed nonfunctional activity often referred endurance testing volume testing test software functions even certain components example file database increase radically size stress testing test reliability unexpected rare workloads stability testing often referred load endurance testing checks software continuously function well acceptable period
little agreement specific goals performance testing terms load testing performance testing scalability testing volume testing often used interchangeably
realtime software systems strict timing constraints test timing constraints realtime testing used
usability testingedit
usability testing check user interface easy understand concerned mainly application
accessibility testingedit
accessibility testing include compliance standards

americans disabilities 1990
section amendment rehabilitation 1973
accessibility initiative world wide consortium

security testingedit
security testing essential software processes confidential data prevent system intrusion hackers
international organization standardization defines type testing conducted evaluate degree test item associated data information protected unauthorised persons systems cannot read modify authorized persons systems denied access them37
internationalization localizationedit
general ability software internationalized localized automatically tested without actual translation using pseudolocalization verify application still works even translated language adapted culture different currencies time zones38
actual translation human languages must tested possible localization failures include

software often localized translating list strings context translator choose wrong translation ambiguous source string
technical terminology become inconsistent project translated several people without proper coordination translator imprudent
literal wordforword translations sound inappropriate artificial technical target language
untranslated messages original language left hard coded source code
messages created automatically time resulting string ungrammatical functionally incorrect misleading confusing
software keyboard shortcut function source languages keyboard layout used typing characters layout target language
software lack support character encoding target language
fonts font sizes appropriate source language inappropriate target language example characters become unreadable font small
string target language longer software handle make string partly invisible user cause software crash malfunction
software lack proper support reading writing bidirectional text
software display images text localized
localized operating systems differently named system configuration files environment variables different formats date currency

development testingedit
main article development testing
development testing software development process involves synchronized application broad spectrum defect prevention detection strategies order reduce software development risks time costs performed software developer engineer construction phase software development lifecycle development testing aims eliminate construction errors code promoted testing strategy intended increase quality resulting software well efficiency overall development process
depending organizations expectations software development development testing might include static code analysis data flow analysis metrics analysis peer code reviews unit testing code coverage analysis traceability software testing practices
testingedit
main article testing
testing basically comparison outputs generally variable changed test change thing test compare results useful smallscale situations useful finetuning program complex projects multivariant testing done
concurrent testingedit
main article concurrent testing
concurrent testing focus performance continuously running normal input normal operational conditions opposed stress testing fuzz testing memory leak well basic faults easier find method
conformance testing type testingedit
main article conformance testing
software testing conformance testing verifies product performs according specified standards compilers instance extensively tested determine whether meet recognized standard language
testing processedit
traditional waterfall development modeledit
common practice software testing testing performed independent group testers functionality developed shipped customer39 practice often results testing phase used project buffer compensate project delays thereby compromising time devoted testing13145–146
another practice start software testing moment project starts continuous process project finishes40
information capability maturity model integration waterfall model
agile extreme development modeledit
contrast emerging software disciplines extreme programming agile software development movement adhere testdriven software development model process unit tests written first software engineers often pair programming extreme programming methodology tests expected fail initially code written tests pass incrementally larger portions test suites test suites continuously updated failure conditions corner cases discovered integrated regression tests developed unit tests maintained along rest software source code generally integrated build process inherently interactive tests relegated partially manual build acceptance process ultimate goal test process achieve continuous integration software updates published public frequently4142
methodology increases testing effort done development reaching formal testing team development models test execution occurs requirements defined coding process completed
sample testing cycleedit
although variations exist organizations typical cycle testing43 sample common among organizations employing waterfall development model practices commonly found development models might clear explicit

requirements analysis testing begin requirements phase software development life cycle design phase testers work determine aspects design testable parameters tests work
test planning test strategy test plan testbed creation since many activities carried testing plan needed
test development test procedures test scenarios test cases test datasets test scripts testing software
test execution testers execute software based plans test documents report errors found development team
test reporting testing completed testers generate metrics make final reports test effort whether software tested ready release
test result analysis defect analysis done development team usually along client order decide defects assigned fixed rejected found software working properly deferred dealt later
defect retesting defect dealt development team retested testing team
regression testing common small test program built subset tests integration modified fixed software order ensure latest delivery ruined anything software product whole still working correctly
test closure test meets exit criteria activities capturing outputs lessons learned results logs documents related project archived used reference future projects

automated testingedit
main article test automation
many programming groups relying automated testing especially groups testdriven development many frameworks write tests continuous integration software tests automatically every time code checked version control system
automation cannot reproduce everything human ways think useful regression testing however require welldeveloped test suite testing scripts order truly useful
testing toolsedit
program testing fault detection aided significantly testing tools debuggers testingdebug tools include features

program monitors permitting full partial monitoring program code including

instruction simulator permitting complete instruction level monitoring trace facilities
hypervisor permitting complete control execution program code including
program animation permitting stepbystep execution conditional breakpoint source level machine code
code coverage reports


formatted dump symbolic debugging tools allowing inspection program variables error chosen points
automated functional graphical user interface testing tools used repeat systemlevel tests
benchmarks allowing runtime performance comparisons made
performance analysis profiling tools help highlight spots resource usage

features incorporated single composite tool integrated development environment
measurement software testingedit
main article software quality
quality measures include topics correctness completeness security isoiec 9126 requirements capability reliability efficiency portability maintainability compatibility usability
number frequently used software metrics measures used assist determining state software adequacy testing
hierarchy testing difficultyedit
based amount test cases required construct complete test suite context test suite applied implementation test collect enough information precisely determine whether system correct incorrect according specification hierarchy testing difficulty proposed44 includes following testability classes

class exists finite complete test suite
class partial distinguishing rate incomplete capability distinguish correct systems incorrect systems reached finite test suite
class exists countable complete test suite
class exists complete test suite
class cases

proved class strictly included next instance testing assume behavior implementation test denoted deterministic finitestate machine known finite sets inputs outputs known number states belongs class subsequent classes however number states known belongs classes class implementation test must deterministic finitestate machine failing specification single trace continuations number states unknown belongs classes class testing temporal machines transitions triggered inputs produced within realbounded interval belongs classes class whereas testing many nondeterministic systems belongs class even belong class inclusion class require simplicity assumed computation model testing cases involving implementations written programming language testing implementations defined machines depending continuous magnitudes proved class elaborated cases testing framework matthew hennessy must semantics temporal machines rational timeouts belong class
testing artifactsedit
software testing process produce several artifacts actual artifacts produced factor development model used stakeholder organisational needs

test plan
test plan document detailing objectives target market internal beta team processes specific beta test developers well aware test plans executed information made available management developersclarification needed idea make cautious developing code making additional changesclarification neededcitation needed companies higherlevel document called test strategy






article confusing unclear readers particular test strategy information test plan higherlevel test plan test plan circles known master test plan test strategy held separate artifact please help clarify article might discussion talk page december 2017 learn remove template message






traceability matrix
traceability matrix table correlates requirements design documents test documents used change tests related source documents changed select test cases execution planning regression tests considering requirement coverage


test case
test case normally consists unique identifier requirement references design specification preconditions events series steps also known actions follow input output expected result actual result clinically defined test case input expected result46 terse condition derived result although normally test cases describe detail input scenario results might expected occasionally series steps often steps contained separate test procedure exercised multiple test cases matter economy expected result expected outcome optional fields test case test step order execution number related requirements depth test category author check boxes whether test automatable automated larger test cases also contain prerequisite states steps descriptions test case also contain place actual result steps stored word processor document spreadsheet database common repositories database system also able past test results generated results system configuration used generate results past results would usually stored separate table


test script
test script procedure programming code replicates user actions initially term derived product work created automated regression test tools test case baseline create test scripts using tool program


test suite
common term collection test cases test suite test suite often also contains detailed instructions goals collection test cases definitely contains section tester identifies system configuration used testing group test cases also contain prerequisite states steps descriptions following tests


test fixture test data
cases multiple sets values data used test functionality particular feature test values changeable environmental components collected separate files stored test data also useful provide data client product project


test harness
software tools samples data input output configurations referred collectively test harness

certificationsedit
several certification programs exist support professional aspirations software testers quality assurance specialists certification offered actually requires applicant show ability test software certification based widely accepted body knowledge declare testing field ready certification47 certification cannot measure individuals productivity skill practical knowledge cannot guarantee competence professionalism tester48

software testing certification types
exambased formalized exams need passed also learned selfstudy istqb qai49
educationbased instructorled sessions course passed international institute software testing iistcitation needed


testing certifications



iseb offered information systems examinations boardcitation needed
istqb certified tester foundation level ctfl offered international software testing qualification board5051
istqb certified tester advanced level ctal offered international software testing qualification board5051
isqi certified agile tester offered international software quality institute52


quality assurance certifications
csqe offered american society quality asq53
cqia offered american society quality asq53

controversyedit
major software testing controversies include

agile traditional
testers learn work conditions uncertainty constant change process maturity agile testing movement received growing popularity since 2006 mainly commercial circles5455 whereas government military56 software providers methodology also traditional testlast models waterfall modelcitation needed


manual testing automated
writers believe test automation expensive relative value used sparingly57 test automation considered capture implement requirements general rule larger system greater complexity greater test automation also investment tools expertise amortized multiple projects right level knowledge sharing within organization


existence 29119 software testing standard justified
significant opposition formed ranks contextdriven school software testing 29119 standard professional testing associations international society software testing attempted standard withdrawn5859


studies used show relative expense fixing defects
opposing views applicability studies used show relative expense fixing defects depending introduction detection example


commonly believed earlier defect found cheaper following table shows cost fixing defect depending stage found60 example problem requirements found postrelease would cost 10–100 times already found requirements review advent modern continuous deployment practices cloudbased services cost redeployment maintenance lessen time


cost defect
time detected


requirements
architecture
construction
system test
postrelease


time introduced
requirements


5–10×

10–100×


architecture




25–100×


construction




10–25×




data table extrapolated scant laurent bossavit says analysis

smaller projects curve turns teams firstyear students sample size small extrapolating smaller projects general totally indefensible study explain data came projects large small paper cited bell labs safeguard project specifically disclaims collected finegrained data boehms data points suggest study fagans paper contains claims seem contradict boehms graph numerical results clearly correspond data points
boehm doesnt even cite paper data except writing making software 2010 cited original 1976 article exists large study conducted right time boehm cite paper doesnt contain sort data would support boehms claims61


related processesedit
software verification validationedit
main articles verification validation software software quality control
software testing used association verification validation62

verification built software right implement requirements
validation built right software deliverables satisfy customer

terms verification validation commonly used interchangeably industry also common terms defined contradictory definitions according ieee standard glossary software engineering terminology

verification process evaluating system component determine whether products given development phase satisfy conditions imposed start phase
validation process evaluating system component development process determine whether satisfies specified requirements

according 9000 standard

verification confirmation examination provision objective evidence specified requirements fulfilled
validation confirmation examination provision objective evidence requirements specific intended application fulfilled

contradiction caused concepts requirements specified requirements different meanings
case ieee standards specified requirements mentioned definition validation problems needs wants stakeholders software must solve satisfy requirements documented software requirements specification products mentioned definition verification output artifacts every phase software development process products fact specifications architectural design specification detailed design specification also specification cannot verified least sense used subject
9000 specified requirements specifications mentioned must verified specification previously explained product software development process phase receives another specification input specification verified successfully correctly implements input specification specifications verified except first validated though examples design specification must implement construction phase artifacts must implement design specification
words defined common terms apparent contradiction disappears
software must validated validated statically consulting stakeholders nevertheless running partial implementation software prototype kind dynamic testing obtaining positive feedback increase certainty correctly formulated hand software final running product artifacts documents including source code must validated dynamically stakeholders executing software
might argue input words stakeholders therefore validation verification thinking advisable causes confusion better think verification process involving formal technical input document
software quality assurance sqaedit
software testing considered part software quality assurance process4347 software process specialists auditors concerned software development process rather artefacts documentation code systems examine change software engineering process reduce number faults delivered software socalled defect rate constitutes acceptable defect rate depends nature software flight simulator video game would much higher defect tolerance software actual airplane although close links testing departments often exist independently function companiescitation needed
software testing activity investigate software test order provide qualityrelated information stakeholders contrast quality assurance implementation policies procedures intended prevent defects reaching customers
alsoedit





book software testing





data validation
dynamic program analysis
formal verification
independent test organization
manual testing
orthogonal array testing
pair testing
reverse semantic traceability
software testing tactics
test management tools
testing

referencesedit



kaner november 2006 exploratory testing quality assurance institute worldwide annual software testing conference orlando retrieved november 2014
jiantao spring 1999 software testing coursework carnegie mellon university retrieved november 2017
leitner andreas ciupa ilinca oriol manuel meyer bertrand fiva arno september 2007 contract driven development test driven development writing test cases esecfse07 european software engineering conference sigsoft symposium foundations software engineering 2007 dubrovnik croatia retrieved december 2017
kaner falk jack nguyen hung quoc 1999 testing computer software york john wiley sons isbn 0471358460
kolawa adam huizinga dorota 2007 automated defect prevention best practices software management wileyieee computer society press isbn 0470042125
certified tester foundation level syllabus international software testing qualifications board march 2011 section retrieved december 2017
certified tester foundation level syllabus international software testing qualifications board july 2005 principle section retrieved december 2017
ramler rudolf kopetzky theodorich platz wolfgang april 2012 combinatorial test design tosca testsuite lessons learned practical implications ieee fifth international conference software testing validation icst montreal canada doi101109icst2012142
economic impacts inadequate infrastructure software testing national institute standards technology 2002 retrieved december 2017
sharma bharadwaj april 2016 ardentia technologies providing cutting edge software solutions comprehensive testing services review india retrieved december 2017
gelperin david hetzel bill june 1988 growth software testing communications 687–695 doi1011456295962965
gregory janet crispin lisa 2014 agile testing addisonwesley professional 23–39 isbn 9780133749564
myers glenford 1979 software testing john wiley sons isbn 0471043281
cornett steve 1996 code coverage analysis bullseye testing technology introduction retrieved november 2017
patton 2005 software testing indianapolis sams publishing isbn 9780672327988
laycock gilbert 1993 theory practice specification based software testing dissertation department computer science university sheffield retrieved january 2018
bach james june 1999 risk requirementsbased testing computer 113–114 retrieved august 2008
savenkov roman 2008 become software tester roman savenkov consulting isbn 9780615233727
lönnberg october 2003 visual testing software helsinki university technology retrieved january 2012
chima raspal visual testing test magazine archived original july 2012 retrieved january 2012
testing tools black white gray white paper crosscheck networks retrieved december 2012
bourque pierre fairley richard chapter guide software engineering body knowledge ieee computer society isbn 0769551661 retrieved january 2018
binder robert 1999 testing objectoriented systems objects patterns tools addisonwesley professional isbn 0201809389
beizer boris 1990 software testing techniques second york nostrand reinhold 21430 isbn 0442206720
clapp judith 1995 software quality control error analysis testing isbn 0815513631
mathur aditya 2008 foundations software testing purdue university isbn 9788131716601
ieee 1990 ieee standard computer dictionary compilation ieee standard computer glossaries york ieee isbn 1559370793
whitepaper operational acceptance application 29119 software testing standard 2015 anthony woods capgemini
kaner bach pettichord 2001 lessons learned software testing contextdriven approach wiley 31–43 isbn 9780471081128
ammann paul offutt jeff january 2008 introduction software testing cambridge university press isbn 9780521880381 retrieved november 2017
veenendaal erik standard glossary terms used software testing retrieved january 2013
part pipeline continuous testing essential adam auerbach techwell insights august 2015
relationship risk continuous testing interview wayne ariola cameron philippedmonds stickyminds december 2015
devops pushing bugs clients faster wayne ariola cynthia dunlop pnsqc october 2015
devops what’s real cost quality ericka chickowski devopscom june 2015
shift left quality first adam auerbach techwell insights october 2014
isoiecieee 2911912013 software systems engineering software testing part concepts definitions section
globalization stepbystep worldready approach testing microsoft developer network msdnmicrosoftcom retrieved january 2012
etestinghubonline free software testing tutorial etesting phase software testing etestinghubcom retrieved january 2012
dustin elfriede 2002 effective software testing addison wesley isbn 0201794292
marchenko artem november 2007 practice continuous integration retrieved november 2009
gurses levent february 2007 agile continuous integration archived original january 2009 retrieved november 2009 maint originalurl status unknown link
jiantao spring 1999 software testing 18849b dependable embedded systems topics dependable embedded systems electrical computer engineering department carnegie mellon university
rodríguez ismael llana luis rabanal pablo 2014 general testability theory classes properties complexity testing reductions ieee transactions software engineering 862–894 doi101109tse20142331690 issn 00985589
rodríguez ismael 2009 general testability theory concur 2009 concurrency theory 20th international conference concur 2009 bologna italy september 2009 proceedings 572–586 doi101007978364204081838 isbn 9783642040801
ieee 1998 ieee standard software test documentation york ieee isbn 073811443x
kaner 2001 grant proposal foundation significant improvements quality academic commercial courses software testing
kaner 2003 measuring effectiveness software testers
black december 2008 advanced software testing guide istqb advanced certification advanced test manager santa barbara rocky nook publisher isbn 1933952369
istqb
istqb
certified agile tester
american society quality asqorg retrieved january 2012
part story david strom july 2009 archived august 2009 wayback machine
ieee xplore sign ieeeorg
willison john april 2004 agile software development agile force crosstalk stsc april 2004 archived original october 2005
example mark fewster dorothy graham software test automation addison wesley 1999 isbn 0201331403
stop29119 commonsensetestingorg archived original october 2014
paul krill august 2014 software testers balk 29119 standards proposal infoworld
mcconnell steve 2004 code complete microsoft press isbn 0735619670
bossavit laurent november 2013 leprechauns software engineering folklore turns fact chapter leanpub
tran eushiuan 1999 verificationvalidationcertification koopman topics dependable embedded systems carnegie mellon university retrieved august 2008



readingedit

meyer bertrand august 2008 seven principles software testing computer 99–101 doi101109mc2008306 retrieved november 2017

external linksedit



wikimedia commons media related software testing





wikiversity learn teach others software testing department software testing



software testing tools products curlie based dmoz
software makes software better economistcom












major fields computer science




note template roughly follows 2012 computing classification system



hardware



printed circuit board
peripheral
integrated circuit
verylargescale integration
energy consumption
electronic design automation





computer systems
organization



computer architecture
embedded system
realtime computing
dependability





networks



network architecture
network protocol
network components
network scheduler
network performance evaluation
network service





software organization



interpreter
middleware
virtual machine
operating system
software quality





software notations
tools



programming paradigm
programming language
compiler
domainspecific language
modeling language
software framework
integrated development environment
software configuration management
software library
software repository





software development



software development process
requirements analysis
software design
software construction
software deployment
software maintenance
programming team
opensource model





theory computation



model computation
formal language
automata theory
computational complexity theory
logic
semantics





algorithms



algorithm design
analysis algorithms
randomized algorithm
computational geometry





mathematics
computing



discrete mathematics
probability
statistics
mathematical software
information theory
mathematical analysis
numerical analysis





information
systems



database management system
information storage systems
enterprise information system
social information systems
geographic information system
decision support system
process control system
multimedia information system
data mining
digital library
computing platform
digital marketing
world wide
information retrieval





security



cryptography
formal methods
security services
intrusion detection system
hardware security
network security
information security
application security





human–computer
interaction



interaction design
social computing
ubiquitous computing
visualization
accessibility





concurrency



concurrent computing
parallel computing
distributed computing
multithreading
multiprocessing





artificial
intelligence



natural language processing
knowledge representation reasoning
computer vision
automated planning scheduling
search methodology
control method
philosophy artificial intelligence
distributed artificial intelligence





machine learning



supervised learning
unsupervised learning
reinforcement learning
multitask learning
crossvalidation





graphics



animation
rendering
image manipulation
graphics processing unit
mixed reality
virtual reality
image compression
solid modeling





applied
computing



ecommerce
enterprise software
computational mathematics
computational physics
computational chemistry
computational biology
computational social science
computational engineering
computational healthcare
digital
electronic publishing
cyberwarfare
electronic voting
video game
word processing
operations research
educational technology
document management








book
category
portal
wikiproject
commons

















software engineering



fields



computer programming
requirements engineering
software deployment
software design
software maintenance
software testing
systems analysis
formal methods





concepts



data modeling
enterprise architecture
functional specification
modeling language
orthogonality
programming paradigm
software
software archaeology
software architecture
software configuration management
software development methodology
software development process
software quality
software quality assurance
software verification validation
structured analysis





orientations



agile
aspectoriented
object orientation
ontology
service orientation
sdlc





models




developmental



agile

executable
incremental model
iterative model
prototype model


scrum
spiral model
vmodel
waterfall model










spice
cmmi
data model
model
function model
information model
metamodeling
object model
systems model
view model





languages



idef


sysml









software
engineers




victor basili
kent beck
grady booch
fred brooks
barry boehm
peter chen
danese cooper
ward cunningham
demarco
edsger dijkstra
delores etter
martin fowler
adele goldstine
margaret hamilton
hoare
lois haibt
mary jean harrold
grace hopper
watts humphrey
michael jackson
ivar jacobson
alan
nancy leveson
stephen mellor
bertrand meyer
david parnas
trygve reenskaug
winston royce
james rumbaugh
mary shaw
peri tarr
elaine weyuker
niklaus wirth
edward yourdon





related fields



computer science
computer engineering
project management
risk management
systems engineering








category
commons








software testing portal





authority control



01179782











retrieved httpsenwikipediaorgwindexphptitlesoftwaretestingoldid818320332 categories software testingcomputer occupationshidden categories maint originalurl status unknownwebarchive template wayback linksuse dates december 2017all accuracy disputesarticles disputed statements september 2014articles lacking reliable references march 2015all articles lacking reliable referencesall articles unsourced statementsarticles unsourced statements november 2011wikipedia articles needing clarification november 2011all articles failed verificationarticles failed verification september 2011articles unsourced statements march 2013articles unsourced statements 2016articles unsourced statements january 2008articles unsourced statements march 2008articles unsourced statements july 2012wikipedia articles needing clarification december 2017articles unsourced statements december 2017all wikipedia articles needing clarificationarticles unsourced statements july 2014articles unsourced statements february 2011pages containing citation needed template deprecated parametersarticles dmoz links
