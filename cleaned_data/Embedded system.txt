



picture interior adsl modemrouter modern example embedded system labelled parts include microprocessor flash memory


embedded system computer system dedicated function within larger mechanical electrical system often realtime computing constraints12 embedded part complete device often including hardware mechanical parts embedded systems control many devices common today3 ninetyeight percent microprocessors manufactured components embedded systems4
examples properties typical embedded computers compared generalpurpose counterparts power consumption small size rugged operating ranges perunit cost comes price limited processing resources make significantly difficult program interact however building intelligence mechanisms hardware taking advantage possible existing sensors existence network embedded units optimally manage available resources unit network levels well provide augmented functions well beyond available5 example intelligent techniques designed manage power consumption embedded systems6
modern embedded systems often based microcontrollers cpus integrated memory peripheral interfaces7 ordinary microprocessors using external chips memory peripheral interface circuits also common especially morecomplex systems either case processors used types ranging general purpose specialized certain class computations even custom designed application hand common standard class dedicated processors digital signal processor
since embedded system dedicated specific tasks design engineers optimize reduce size cost product increase reliability performance embedded systems massproduced benefiting economies scale
embedded systems range portable devices digital watches players large stationary installations like traffic lights factory controllers largely complex systems like hybrid vehicles avionics complexity varies single microcontroller chip high multiple units peripherals networks mounted inside large chassis enclosure



contents


history
applications
characteristics

user interface
processors embedded systems

readymade computer boards
asic fpga solutions


peripherals
tools


debugging

tracing
reliability
high volume


embedded software architectures

simple control loop
interruptcontrolled system
cooperative multitasking
preemptive multitasking multithreading
microkernels exokernels
monolithic kernels
additional software components


also
notes
references
reading
external links



historyedit
first recognizably modern embedded systems apollo guidance computer developed charles stark draper instrumentation laboratory projects inception apollo guidance computer considered riskiest item apollo project employed newly developed monolithic integrated circuits reduce size weight early massproduced embedded system autonetics guidance computer minuteman missile released 1961 minuteman went production 1966 replaced computer first highvolume integrated circuits
since early applications 1960s embedded systems come price dramatic rise processing power functionality early microprocessor example intel 4004 designed calculators small systems still required external memory support chips 1978 national engineering manufacturers association released standard programmable microcontrollers including almost computerbased controllers single board computers numerical eventbased controllers
cost microprocessors microcontrollers fell became feasible replace expensive knobbased analog components potentiometers variable capacitors updown buttons knobs read microprocessor even consumer products early 1980s memory input output system components integrated chip processor forming microcontroller microcontrollers find applications generalpurpose computer would costly
comparatively lowcost microcontroller programmed fulfill role large number separate components although context embedded system usually complex traditional solution complexity contained within microcontroller additional components needed design effort software software prototype test quicker compared design construction circuit using embedded processor
applicationsedit




embedded computer subassembly accupoll electronic voting machine8


embedded systems commonly found consumer cooking industrial automotive medical commercial military applications
telecommunications systems employ numerous embedded systems telephone switches network cell phones user computer networking uses dedicated routers network bridges route data
consumer electronics include players mobile phones videogame consoles digital cameras receivers printers household appliances microwave ovens washing machines dishwashers include embedded systems provide flexibility efficiency features advanced hvac systems networked thermostats accurately efficiently control temperature change time season home automation uses wired wirelessnetworking used control lights climate security audiovisual surveillance embedded devices sensing controlling
transportation systems flight automobiles increasingly embedded systems airplanes contain advanced avionics inertial guidance systems receivers also considerable safety requirements various electric motors brushless motors induction motors motors electricelectronic motor controllers automobiles electric vehicles hybrid vehicles increasingly embedded systems maximize efficiency reduce pollution automotive safety systems include antilock braking system electronic stability control escesp traction control automatic fourwheel drive
medical equipment uses embedded systems vital signs monitoring electronic stethoscopes amplifying sounds various medical imaging spect noninvasive internal inspections embedded systems within medical equipment often powered industrial computers9
embedded systems used transportation fire safety safety security medical applications life critical systems systems isolated hacking thus reliable unless connected wired wireless networks onchip cellular methods monitoring control purposescitation needed fire safety systems designed greater ability handle higher temperatures continue operate dealing security embedded systems selfsufficient able deal electrical communication systems
class miniature wireless devices called motes networked wireless sensors wireless sensor networking makes miniaturization made possible advanced design couple full wireless subsystems sophisticated sensors enabling people companies measure myriad things physical world information monitoring control systems motes completely selfcontained typically battery source years batteries need changed charged
embedded wifi modules provide simple means wirelessly enabling device communicates serial port
characteristicsedit
embedded systems designed specific task rather generalpurpose computer multiple tasks also realtime performance constraints must reasons safety usability others performance requirements allowing system hardware simplified reduce costs
embedded systems always standalone devices many embedded systems consist small parts within larger device serves general purpose example gibson robot guitar features embedded system tuning strings overall purpose robot guitar course play music10 similarly embedded system automobile provides specific function subsystem




econ systems esom270 esom300 computer modules


program instructions written embedded systems referred firmware stored readonly memory flash memory chips limited computer hardware resources little memory small nonexistent keyboard screen
user interfaceedit




embedded system text user interface using microvganb


embedded systems range user interface systems dedicated task complex graphical user interfaces resemble modern computer desktop operating systems simple embedded devices buttons leds graphic character lcds hd44780 example simple menu system
sophisticated devices graphical screen touch sensing screenedge buttons provide flexibility minimizing space used meaning buttons change screen selection involves natural behavior pointing desired handheld systems often screen joystick button pointing device
systems provide user interface remotely help serial rs232 network ethernet connection approach gives several advantages extends capabilities embedded system avoids cost display simplifies allows build rich user interface good example combination embedded server running embedded device camera network router user interface displayed browser connected device therefore needing software installed
processors embedded systemsedit
embedded processors broken broad categories ordinary microprocessors separate integrated circuits memory peripherals microcontrollers onchip peripherals thus reducing power consumption size cost contrast personal computer market many different basic architectures used since software customdeveloped application commodity product installed user neumann well various degrees harvard architectures used risc well nonrisc processors found word lengths vary 4bit 64bits beyond although typical remain 816bit architectures come large number different variants shapes many also manufactured several different companies
numerous microcontrollers developed embedded systems generalpurpose microprocessors also used embedded systems generally require support circuitry microcontrollers
readymade computer boardsedit
pc104 pc104 examples standards readymade computer boards intended small lowvolume embedded ruggedized systems mostly x86based often physically small compared standard although still quite large compared simple 816bit embedded systems often linux netbsd embedded realtime operating system microcosii vxworks sometimes boards nonx86 processors
certain applications small size power efficiency primary concerns components used compatible used general purpose personal computers boards epia range help bridge pccompatible highly integrated physically smaller attributes making attractive embedded engineers advantage approach lowcost commodity components used along software development tools used general software development systems built still regarded embedded since integrated larger devices fulfill single role examples devices adopt approach atms arcade machines contain code specific application
however readymade embedded systems boards pccentered buses systemonachip processor involved little benefit standarized connecting discrete components environment hardware software tools different
common design style uses small system module perhaps size business card holding high density chips armbased systemonachip processor peripherals external flash memory storage dram runtime memory module vendor usually provide boot software make sure selection operating systems usually including linux real time choices modules manufactured high volume organizations familiar specialized testing issues combined much lower volume custom mainboards applicationspecific external peripherals
implementation embedded systems advanced embedded systems easily implemented already made boards based worldwide accepted platform platforms include limited arduino raspberry
asic fpga solutionsedit
common array veryhighvolume embedded systems system chip contains complete system consisting multiple processors multipliers caches interfaces single chip socs implemented applicationspecific integrated circuit asic using fieldprogrammable gate array fpga
peripheralsedit




closeup smsc lan91c110 smsc chip embedded ethernet chip


embedded systems talk outside world peripherals

serial communication interfaces rs232 rs422 rs485
synchronous serial communication interface essi enhanced synchronous serial interface
universal serial
multi media cards cards compact flash
networks ethernet lonworks
fieldbuses canbus linbus profibus
timers plls capturecompare time processing units
discrete general purpose inputoutput gpio
analog digitaldigital analog adcdac
debugging jtag icsp port bitp ports

toolsedit
software embedded system designers compilers assemblers debuggers develop embedded system software however also specific tools

circuit debuggers emulators next section
utilities checksum program embedded system check program valid
systems using digital signal processing developers math workbench simulate mathematics
system level modeling simulation tools help designers construct simulation models system hardware components processors memories interfaces buses software behavior flow state diagram flow diagram using configurable library blocks simulation conducted select right components performing power performance tradeoff reliability analysis bottleneck analysis typical reports helps designer make architecture decisions includes application latency device throughput device utilization power consumption full system well devicelevel power consumption
modelbased development tool creates simulate graphical data flow state chart diagrams components like digital filters motor controllers communication protocol decoding multirate tasks
custom compilers linkers used optimize specialized hardware
embedded system special language design tool enhancements existing language forth basic
another alternative realtime operating system embedded operating system
modeling code generating tools often based state machines

software tools come several sources

software companies specialize embedded market
ported software development tools
sometimes development tools personal computer used embedded processor close relative common processor

complexity embedded systems grows higher level tools operating systems migrating machinery makes sense example cellphones personal digital assistants consumer computers often need significant software purchased provided person manufacturer electronics systems open programming environment linux netbsd osgi embedded java required thirdparty software provider sell large market
embedded systems commonly found consumer cooking industrial automotive medical applications examples embedded systems players mobile phones videogame consoles digital cameras players household appliances microwave ovens washing machines dishwashers include embedded systems provide flexibility efficiency
debuggingedit
embedded debugging performed different levels depending facilities available different metrics characterize different forms embedded debugging slow main application close debugged system application actual system application expressive triggers debugging want inspect memory particular program counter value reached inspect debugging process memory memory registers
simplest sophisticated roughly grouped following areas

interactive resident debugging using simple shell provided embedded operating system forth basic
external debugging using logging serial port output trace operation using either monitor flash using debug server like remedy debugger even works heterogeneous multicore systems
incircuit debugger hardware device connects microprocessor jtag nexus interface11 allows operation microprocessor controlled externally typically restricted specific debugging capabilities processor
incircuit emulator replaces microprocessor simulated equivalent providing full control aspects microprocessor
complete emulator provides simulation aspects hardware allowing controlled modified allowing debugging normal downsides expense slow operation cases times slower final system
designs typical approach verify debug design fpga prototype board tools certus12 used insert probes fpga make signals available observation used debug hardware firmware software interactions across multiple fpga capabilities similar logic analyzer
softwareonly debuggers benefit need hardware modification carefully control record order conserve time storage space13

unless restricted external debugging programmer typically load software tools view code running processor start stop operation view code sourcecode assembly code mixture
embedded system often composed wide variety elements debugging strategy vary instance debugging software microprocessor centric embedded system different debugging embedded system processing performed peripherals fpga coprocessor increasing number embedded systems today single processor core common problem multicore development proper synchronization software execution case embedded system design wish check data traffic busses processor cores requires lowlevel debugging signalbus level logic analyzer instance
tracingedit
realtime operating systems rtos often supports tracing operating system events graphical view presented host tool based recording system behavior trace recording performed software rtos special tracing hardware rtos tracing allows developers understand timing performance issues software system gives good understanding highlevel system behaviors commercial tools like rtxc quadros systems exists
reliabilityedit
embedded systems often reside machines expected continuously years without errors cases recover error occurs therefore software usually developed tested carefully personal computers unreliable mechanical moving parts disk drives switches buttons avoided
specific reliability issues include

system cannot safely shut repair inaccessible repair examples include space systems undersea cables navigational beacons borehole systems automobiles
system must kept running safety reasons limp modes less tolerable often backups selected operator examples include aircraft navigation reactor control systems safetycritical chemical factory controls train signals
system lose large amounts money shut telephone switches factory controls bridge elevator controls funds transfer market making automated sales service

variety techniques used sometimes combination recover errors—both software bugs memory leaks also soft errors hardware

watchdog timer resets computer unless software periodically notifies watchdog subsystems redundant spares switched software limp modes provide partial function
designing trusted computing base architecture14 ensures highly secure reliable system environment
hypervisor designed embedded systems able provide secure encapsulation subsystem component compromised software component cannot interfere subsystems privilegedlevel system software encapsulation keeps faults propagating subsystem another improving reliability also allow subsystem automatically shut restarted fault detection
immunity aware programming

high volumeedit
high volume systems portable music players mobile phones minimizing cost usually primary design consideration engineers typically select hardware “good enough” implement necessary functions
lowvolume prototype embedded systems general purpose computers adapted limiting programs replacing operating system realtime operating system
embedded software architecturesedit
main article embedded software
several different types software architecture common
simple control loopedit
design software simply loop loop calls subroutines manages part hardware software hence called simple control loop control loop
interruptcontrolled systemedit
embedded systems predominantly controlled interrupts means tasks performed system triggered different kinds events interrupt could generated example timer predefined frequency serial port controller receiving byte
kinds systems used event handlers need latency event handlers short simple usually kinds systems simple task main loop also task sensitive unexpected delays
sometimes interrupt handler longer tasks queue structure later interrupt handler finished tasks executed main loop method brings system close multitasking kernel discrete processes
cooperative multitaskingedit
nonpreemptive multitasking system similar simple control loop scheme except loop hidden programmer defines series tasks task gets environment “run” task idle calls idle routine usually called “pause” “wait” “yield” “nop” stands operation
advantages disadvantages similar control loop except adding software easier simply writing task adding queue
preemptive multitasking multithreadingedit
type system lowlevel piece code switches tasks threads based timer connected interrupt level system generally considered operating system kernel depending much functionality required introduces less complexities managing multiple tasks running conceptually parallel
code potentially damage data another task except larger systems using programs must carefully designed tested access shared data must controlled synchronization strategy message queues semaphores nonblocking synchronization scheme
complexities common organizations realtime operating system rtos allowing application programmers concentrate device functionality rather operating system services least large systems smaller systems often cannot afford overhead associated generic real time system limitations regarding memory size performance battery life choice rtos required brings issues however selection must done prior starting application development process timing forces developers choose embedded operating system device based upon current requirements restricts future options large extent15 restriction future options becomes issue product life decreases additionally level complexity continuously growing devices required manage variables serial tcpip bluetooth wireless trunk radio multiple channels data voice enhanced graphics multiple states multiple threads numerous wait states trends leading uptake embedded middleware addition realtime operating system
microkernels exokernelsedit
microkernel logical step realtime usual arrangement operating system kernel allocates memory switches different threads execution user mode processes implement major functions file systems network interfaces
general microkernels succeed task switching intertask communication fast fail slow
exokernels communicate efficiently normal subroutine calls hardware software system available extensible application programmers
monolithic kernelsedit
case relatively large kernel sophisticated capabilities adapted suit embedded environment gives programmers environment similar desktop operating system like linux microsoft windows therefore productive development downside requires considerably hardware resources often expensive complexity kernels less predictable reliable
common examples embedded monolithic kernels embedded linux windows
despite increased cost hardware type embedded system increasing popularity especially powerful embedded devices wireless routers navigation systems reasons

ports common embedded chip sets available
permit reuse publicly available code device drivers servers firewalls code
development systems start broad featuresets distribution configured exclude unneeded functionality save expense memory would consume
many engineers believe running application code user mode reliable easier debug thus making development process easier code portablecitation needed
features requiring faster response guaranteed often placed hardware

additional software componentsedit
addition core operating system many embedded systems additional upperlayer software components components consist networking protocol stacks like tcpip http https also included storage capabilities like flash memory management systems embedded device audio video capabilities appropriate drivers codecs present system case monolithic kernels many software layers included rtos category availability additional software components depends upon commercial offering
alsoedit


electronics portal




communications server
cyberphysical system

electronic control unit
hypervisor
embedded operating systems
embedded software
firmware
fpga
information appliance
microprocessor
microcontroller
silicon compiler
realtime operating system
software engineering
system chip
system module
ubiquitous computing


notesedit


details microvga


referencesedit


michael barr embedded systems glossary neutrino technical library retrieved 20070421
heath steve 2003 embedded systems design series design engineers newnes isbn 9780750655460 embedded system microprocessor based system built control function range functions
michael barr anthony massa 2006 introduction programming embedded systems development tools oreilly isbn 9780596009830
barr michael august 2009 real program embedded systems design techinsights united business media retrieved 20091223
calippi intelligence embedded systems springer 2014 283pp isbn 9783319052786
mittal survey techniques improving energy efficiency embedded computing systems ijcaet 440–459 2014
giovino bill micro controllercom embedded systems supersite
electronic voting machine information sheet accupoll 1000
embedded systems dell solutions dell contentdellcom 20110104 retrieved 20130206
embeddedcom hood robot guitar embeds autotuning david carey techonline times 042208 111000 edtembedded systems design embeddedcom
tancreti matthew hossain mohammad sajjad bagchi saurabh raghunathan vijay 2011 aveksha hardwaresoftware approach nonintrusive tracing profiling wireless embedded systems proceedings conference embedded networked sensor systems sensys york 288–301 doi10114520709422070972 isbn 9781450307185
tektronix shakes prototyping embedded instrumentation boosts boards emulator status electronic engineering journal 20121030 retrieved 20121030
tancreti matthew sundaram vinaitheerthan bagchi saurabh eugster patrick 2015 tardis softwareonly systemlevel record replay wireless sensor networks proceedings 14th international conference information processing sensor networks ipsn york 286–297 doi10114527370952737096 isbn 9781450334754
heiser gernot december 2007 system secure prove login 35–8
working across multiple embedded platforms clarinox retrieved 20100817


readingedit

john catsoulis 2005 designing embedded hardware edition oreilly isbn 0596007558
james conrad alexander dean september 2011 embedded systems introduction using renesas rx62n microcontroller micrium isbn 9781935772996
klaus august 2016 embedded software development internet things basics technologies best practices isbn 9781534602533

external linksedit



wikimedia commons media related embedded systems





wikibooks book topic embedded systems





wikiversity learning resources embedded system engineering



embedded systems course mbed youtube ongoing 2015
trends cyber security embedded systems geer november 2013
modern embedded systems programming video course youtube ongoing 2013
embedded systems week esweek yearly event conferences workshops tutorials covering aspects embedded systems software
workshop embedded cyberphysical systems education workshop covering educational aspects embedded systems












computer sizes




classes computers



microcomputer
personal
computer




stationary



workstation
desktop
home
personal supercomputer


nettop


plug
portable

tabletop


game arcade cabinet

system board


home console
microconsole
interactive kiosk
smart
smart speaker





mobile




laptop



desktop replacement
notebook
2in1
subnotebook

netbook
smartbook
ultrabook


ultramobile





tablet



ultramobile
2in1
mobile internet device
tabletop
phablet





information
appliance



handheld

palmsize
pocket
pocket computer
palmtop




electronic organizer



mobile phone

feature phone
smartphone

phablet









ereader
handheld game console
portablemobile data terminal





calculator



scientific
programmable
graphing





wearable



digital wristwatch

calculator watch
smartwatch


smartglasses
smart ring











midrange



server
minicomputer
supermini





large



super
mainframe
minisuper





others



microcontroller
nanocomputer
pizza form factor
singleboard computer
smartdust
wireless sensor network

















major fields computer science




note template roughly follows 2012 computing classification system



hardware



printed circuit board
peripheral
integrated circuit
verylargescale integration
energy consumption
electronic design automation





computer systems
organization



computer architecture
embedded system
realtime computing
dependability





networks



network architecture
network protocol
network components
network scheduler
network performance evaluation
network service





software organization



interpreter
middleware
virtual machine
operating system
software quality





software notations
tools



programming paradigm
programming language
compiler
domainspecific language
modeling language
software framework
integrated development environment
software configuration management
software library
software repository





software development



software development process
requirements analysis
software design
software construction
software deployment
software maintenance
programming team
opensource model





theory computation



model computation
formal language
automata theory
computational complexity theory
logic
semantics





algorithms



algorithm design
analysis algorithms
randomized algorithm
computational geometry





mathematics
computing



discrete mathematics
probability
statistics
mathematical software
information theory
mathematical analysis
numerical analysis





information
systems



database management system
information storage systems
enterprise information system
social information systems
geographic information system
decision support system
process control system
multimedia information system
data mining
digital library
computing platform
digital marketing
world wide
information retrieval





security



cryptography
formal methods
security services
intrusion detection system
hardware security
network security
information security
application security





human–computer
interaction



interaction design
social computing
ubiquitous computing
visualization
accessibility





concurrency



concurrent computing
parallel computing
distributed computing
multithreading
multiprocessing





artificial
intelligence



natural language processing
knowledge representation reasoning
computer vision
automated planning scheduling
search methodology
control method
philosophy artificial intelligence
distributed artificial intelligence





machine learning



supervised learning
unsupervised learning
reinforcement learning
multitask learning
crossvalidation





graphics



animation
rendering
image manipulation
graphics processing unit
mixed reality
virtual reality
image compression
solid modeling





applied
computing



ecommerce
enterprise software
computational mathematics
computational physics
computational chemistry
computational biology
computational social science
computational engineering
computational healthcare
digital
electronic publishing
cyberwarfare
electronic voting
video game
word processing
operations research
educational technology
document management








book
category
portal
wikiproject
commons

















embedded systems



general terms



embedded software
original equipment manufacturer
embedded database
embedded hypervisor
consumer electronics
microcontroller
asicfpgasoc
memory footprint
singleboard computer

board support package
cross compiler
embedded
bootloader





firmware controls



custom firmware
rooting android
jailbreaking
playstation jailbreak
closed platform
vendor lockin
defective design
hacking consumer electronics
homebrew video games
crippleware





software libraries



uclibc
dietlibc
embedded glibc
musl





development tools



bitbake
buildroot
busybox
yocto project
almquist shell
standalone shell
openembedded





operating systems



linux embedded systems
linux mobile devices
lightweight linux
windows iotwin
realtime operating system





programming languages




assembly language
capl
embedded
misra
nesc
embedded
embedded java








lightweight browsers
opensource computing hardware
opensource robotics









authority control



lccn sh87006632
43969781
cb12410613b data
01064710











retrieved httpsenwikipediaorgwindexphptitleembeddedsystemoldid818189332 categories embedded systemselectrical engineeringcomputer engineeringhidden categories british english december 2017all articles unsourced statementsarticles unsourced statements october 2012articles unsourced statements april 2014wikipedia articles lccn identifierswikipedia articles identifierswikipedia articles identifiers
