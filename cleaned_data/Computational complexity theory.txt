computational complexity theory branch theory computation theoretical computer science focuses classifying computational problems according inherent difficulty relating classes computational problem understood task principle amenable solved computer equivalent stating problem solved mechanical application mathematical steps algorithm
problem regarded inherently difficult solution requires significant resources whatever algorithm used theory formalizes intuition introducing mathematical models computation study problems quantifying amount resources needed solve time storage complexity measures also used amount communication used communication complexity number gates circuit used circuit complexity number processors used parallel computing roles computational complexity theory determine practical limits computers cannot
closely related fields theoretical computer science analysis algorithms computability theory distinction analysis algorithms computational complexity theory former devoted analyzing amount resources needed particular algorithm solve problem whereas latter asks general question possible algorithms could used solve problem precisely computational complexity theory tries classify problems cannot solved appropriately restricted resources turn imposing restrictions available resources distinguishes computational complexity computability theory latter theory asks kind problems principle solved algorithmically



contents


computational problems

problem instances
representing problem instances
decision problems formal languages
function problems
measuring size instance


machine models complexity measures

turing machine
machine models
complexity measures
best worst average case complexity
upper lower bounds complexity problems


complexity classes

defining complexity classes
important complexity classes
hierarchy theorems
reduction


important open problems

versus problem
problems known npcomplete
separations complexity classes


intractability
history
also
references

citations
textbooks
surveys


external links



computational problemsedit




traveling salesman tour germanys largest cities


problem instancesedit
computational problem viewed infinite collection instances together solution every instance input string computational problem referred problem instance confused problem computational complexity theory problem refers abstract question solved contrast instance problem rather concrete utterance serve input decision problem example consider problem primality testing instance number solution number prime otherwise case stated another instance particular input problem solution output corresponding given input
highlight difference problem instance consider following instance decision version traveling salesman problem route 2000 kilometres passing germanys largest cities quantitative answer particular problem instance little solving instances problem asking round trip sites milan whose total length reason complexity theory addresses computational problems particular problem instances
representing problem instancesedit
considering computational problems problem instance string alphabet usually alphabet taken binary alphabet thus strings bitstrings realworld computer mathematical objects bitstrings must suitably encoded example integers represented binary notation graphs encoded directly adjacency matrices encoding adjacency lists binary
even though proofs complexitytheoretic theorems regularly assume concrete choice input encoding tries keep discussion abstract enough independent choice encoding achieved ensuring different representations transformed efficiently
decision problems formal languagesedit




decision problem possible outputs alternately input


decision problems central objects study computational complexity theory decision problem special type computational problem whose answer either alternately either decision problem viewed formal language members language instances whose output nonmembers instances whose output objective decide algorithm whether given input string member formal language consideration algorithm deciding problem returns answer algorithm said accept input string otherwise said reject input
example decision problem following input arbitrary graph problem consists deciding whether given graph connected formal language associated decision problem connected graphs—of course obtain precise definition language decide graphs encoded binary strings
function problemsedit
function problem computational problem single output total function expected every input output complex decision problem isnt notable examples include traveling salesman problem integer factorization problem
tempting think notion function problems much richer notion decision problems however really case since function problems recast decision problems example multiplication integers expressed triples relation holds deciding whether given triple member corresponds solving problem multiplying numbers
measuring size instanceedit
measure difficulty solving computational problem wish much time best algorithm requires solve problem however running time general depend instance particular larger instances require time solve thus time required solve problem space required measure complexity calculated function size instance usually taken size input bits complexity theory interested algorithms scale increase input size instance problem finding whether graph connected much time take solve problem graph vertices compared time taken graph vertices
input size time taken expressed function since time taken different inputs size different worstcase time complexity defined maximum time taken inputs size polynomial algorithm said polynomial time algorithm cobhams thesis says problem solved feasible amount resources admits polynomial time algorithm
machine models complexity measuresedit
turing machineedit




illustration turing machine


main article turing machine
turing machine mathematical model general computing machine theoretical device manipulates symbols contained strip tape turing machines intended practical computing technology rather thought experiment representing computing machine—anything advanced supercomputer mathematician pencil paper believed problem solved algorithm exists turing machine solves problem indeed statement church–turing thesis furthermore known everything computed models computation known today machine conways game life cellular automata programming language computed turing machine since turing machines easy analyze mathematically believed powerful model computation turing machine commonly used model complexity theory
many types turing machines used define complexity classes deterministic turing machines probabilistic turing machines nondeterministic turing machines quantum turing machines symmetric turing machines alternating turing machines equally powerful principle resources time space bounded powerful others
deterministic turing machine basic turing machine uses fixed rules determine future actions probabilistic turing machine deterministic turing machine extra supply random bits ability make probabilistic decisions often helps algorithms solve problems efficiently algorithms random bits called randomized algorithms nondeterministic turing machine deterministic turing machine added feature nondeterminism allows turing machine multiple possible future actions given state view nondeterminism turing machine branches many possible computational paths step solves problem branches said solved problem clearly model meant physically realizable model theoretically interesting abstract machine gives rise particularly interesting complexity classes examples nondeterministic algorithm
machine modelsedit
many machine models different standard multitape turing machines proposed literature example random access machines perhaps surprisingly models converted another without providing extra computational power time memory consumption alternate models vary1 models common machines operate deterministically
however computational problems easier analyze terms unusual resources example nondeterministic turing machine computational model allowed branch check many different possibilities nondeterministic turing machine little physically want compute algorithms branching exactly captures many mathematical models want analyze nondeterministic time important resource analyzing computational problems
complexity measuresedit
precise definition means solve problem using given amount time space computational model deterministic turing machine used time required deterministic turing machine input total number state transitions steps machine makes halts outputs answer turing machine said operate within time time required input length decision problem solved time exists turing machine operating time solves problem since complexity theory interested classifying problems based difficulty defines sets problems based criteria instance problems solvable within time deterministic turing machine denoted dtimefn
analogous definitions made space requirements although time space wellknown complexity resources complexity measure viewed computational resource complexity measures generally defined blum complexity axioms complexity measures used complexity theory include communication complexity circuit complexity decision tree complexity
complexity algorithm often expressed using notation
best worst average case complexityedit




visualization quicksort algorithm average case performance

















displaystyle mathcal onlog




best worst average case complexity refer three different ways measuring time complexity complexity measure different inputs size since inputs size faster solve others define following complexities

bestcase complexity complexity solving problem best input size
worstcase complexity complexity solving problem worst input size
averagecase complexity complexity solving problem average complexity defined respect probability distribution inputs instance inputs size assumed equally likely appear average case complexity defined respect uniform distribution inputs size

example consider deterministic sorting algorithm quicksort solves problem sorting list integers given input worstcase input sorted sorted reverse order algorithm takes time case assume possible permutations input list equally likely average time taken sorting best case occurs pivoting divides list half also needing time
upper lower bounds complexity problemsedit
classify computation time similar resources space consumption interested proving upper lower bounds minimum amount time required efficient algorithm solving given problem complexity algorithm usually taken worstcase complexity unless specified otherwise analyzing particular algorithm falls field analysis algorithms show upper bound time complexity problem needs show particular algorithm running time however proving lower bounds much difficult since lower bounds make statement possible algorithms solve given problem phrase possible algorithms includes algorithms known today algorithm might discovered future show lower bound problem requires showing algorithm time complexity lower
upper lower bounds usually stated using notation hides constant factors smaller terms makes bounds independent specific details computational model used instance notation would write
complexity classesedit
main article complexity class
defining complexity classesedit
complexity class problems related complexity simpler complexity classes defined following factors

type computational problem commonly used problems decision problems however complexity classes defined based function problems counting problems optimization problems promise problems
model computation common model computation deterministic turing machine many complexity classes based nondeterministic turing machines boolean circuits quantum turing machines monotone circuits
resource resources bounded bounds properties usually stated together polynomial time logarithmic space constant depth

course complexity classes complicated definitions framework thus typical complexity class definition like following

decision problems solvable deterministic turing machine within time complexity class known dtimefn

bounding computation time concrete function often yields complexity classes depend chosen machine model instance language binary string solved linear time multitape turing machine necessarily requires quadratic time model singletape turing machines allow polynomial variations running time cobhamedmonds thesis states time complexities reasonable general models computation polynomially related goldreich 2008 chapter forms basis complexity class decision problems solvable deterministic turing machine within polynomial time corresponding function problems
important complexity classesedit




representation relation among complexity classes


many important complexity classes defined bounding time space used algorithm important complexity classes decision problems defined manner following





complexity class
model computation
resource constraint


deterministic time


dtimefn
deterministic turing machine
time








deterministic turing machine
time polyn


exptime
deterministic turing machine
time 2polyn


nondeterministic time


ntimefn
nondeterministic turing machine
time








nondeterministic turing machine
time polyn


nexptime
nondeterministic turing machine
time 2polyn






complexity class
model computation
resource constraint


deterministic space


dspacefn
deterministic turing machine
space



deterministic turing machine
space olog


pspace
deterministic turing machine
space polyn


expspace
deterministic turing machine
space 2polyn


nondeterministic space


nspacefn
nondeterministic turing machine
space



nondeterministic turing machine
space olog


npspace
nondeterministic turing machine
space polyn


nexpspace
nondeterministic turing machine
space 2polyn





logarithmicspace classes necessarily take account space needed represent problem
turns pspace npspace expspace nexpspace savitchs theorem
important complexity classes include defined using probabilistic turing machines defined using boolean circuits defined using quantum turing machines important complexity class counting problems decision problems classes like defined using interactive proof systems class decision problems
hierarchy theoremsedit
main articles time hierarchy theorem space hierarchy theorem
complexity classes defined desirable prove relaxing requirements computation time indeed defines bigger problems particular although dtimen contained dtimen2 would interesting know inclusion strict time space requirements answer questions given time space hierarchy theorems respectively called hierarchy theorems induce proper hierarchy classes defined constraining respective resources thus pairs complexity classes properly included deduced proper inclusions proceed make quantitative statements much additional time space needed order increase number problems solved
precisely time hierarchy theorem states




































































displaystyle mathsf dtimebig fnbig subsetneq mathsf dtimebig fncdot 2fnbig



space hierarchy theorem states

































































displaystyle mathsf dspacebig fnbig subsetneq mathsf dspacebig fncdot logfnbig



time space hierarchy theorems form basis separation results complexity classes instance time hierarchy theorem tells strictly contained exptime space hierarchy theorem tells strictly contained pspace
reductionedit
main article reduction complexity
many complexity classes defined using concept reduction reduction transformation problem another problem captures informal notion problem least difficult another problem instance problem solved using algorithm difficult reduces many different types reductions based method reduction cook reductions karp reductions levin reductions bound complexity reductions polynomialtime reductions logspace reductions
commonly used reduction polynomialtime reduction means reduction process takes polynomial time example problem squaring integer reduced problem multiplying integers means algorithm multiplying integers used square integer indeed done giving input inputs multiplication algorithm thus squaring difficult multiplication since squaring reduced multiplication
motivates concept problem hard complexity class problem hard class problems every problem reduced thus problem harder since algorithm allows solve problem course notion hard problems depends type reduction used complexity classes larger polynomialtime reductions commonly used particular problems hard nphard problems
problem hard said complete means hardest problem since many problems could equally hard might hardest problems thus class npcomplete problems contains difficult problems sense ones likely problem solved able reduce known npcomplete problem another problem would indicate known polynomialtime solution polynomialtime solution would yield polynomialtime solution similarly problems reduced finding npcomplete problem solved polynomial time would mean
important open problemsedit




diagram complexity classes provided existence problems outside npcomplete case established ladner3


versus problemedit
main article versus problem
complexity class often seen mathematical abstraction modeling computational tasks admit efficient algorithm hypothesis called cobham–edmonds thesis complexity class hand contains many problems people would like solve efficiently efficient algorithm known boolean satisfiability problem hamiltonian path problem vertex cover problem since deterministic turing machines special nondeterministic turing machines easily observed problem also member class
question whether equals important open questions theoretical computer science wide implications solution2 answer many important problems shown efficient solutions include various types integer programming problems operations research many problems logistics protein structure prediction biology4 ability find formal proofs pure mathematics theorems5 versus problem millennium prize problems proposed clay mathematics institute us1000000 prize resolving problem6
problems known npcompleteedit
shown ladner exist problems neither npcomplete3 problems called npintermediate problems graph isomorphism problem discrete logarithm problem integer factorization problem examples problems believed npintermediate problems known npcomplete
graph isomorphism problem computational problem determining whether finite graphs isomorphic important unsolved problem complexity theory whether graph isomorphism problem npcomplete npintermediate answer known believed problem least npcomplete7 graph isomorphism npcomplete polynomial time hierarchy collapses second level8 since widely believed polynomial hierarchy collapse finite level believed graph isomorphism npcomplete best algorithm problem lászló babai eugene luks time



















displaystyle o2sqrt nlog

graphs vertices although recent work babai offers potentially perspectives this9
integer factorization problem computational problem determining prime factorization given integer phrased decision problem problem deciding whether input prime factor less efficient integer factorization algorithm known fact forms basis several modern cryptographic systems algorithm integer factorization problem conp even coup10 problem npcomplete polynomial time hierarchy collapse first level equal conp best known algorithm integer factorization general number field sieve takes time






























































displaystyle oeleftfrac 649right13log n13log

factor integer however best known quantum algorithm problem shors algorithm polynomial time unfortunately fact doesnt much problem lies respect nonquantum complexity classes
separations complexity classesedit
many known complexity classes suspected unequal proved instance pspace possible pspace equal equal pspace either since many known complexity classes pspace possible complexity classes collapse class proving classes unequal would major breakthrough complexity theory
along lines conp class containing complement problems problems yesno answers reversed problems believed12 equal conp however proven clear complexity classes equal equal since would also pconp since problems dual conp
similarly known problems solved logarithmic space strictly contained equal many complexity classes known distinct equal classes
suspected equal however currently open nexp
intractabilityedit
also combinatorial explosion



look tractable feasible intractability infeasible wiktionary free dictionary


problem solved theory given large finite resources especially time practice solution takes many resources useful known intractable problem13 conversely problem solved practice called tractable problem literally problem handled term infeasible literally cannot done sometimes used interchangeably intractable14 though risks confusion feasible solution mathematical optimization15
tractable problems frequently identified problems polynomialtime solutions ptime known cobham–edmonds thesis problems known intractable sense include exptimehard nphard problems also intractable sense
however identification inexact polynomialtime solution large exponent large constant term grows quickly impractical practical size problems conversely exponentialtime solution grows slowly practical realistic input solution takes long time worst case take short time cases average case thus still practical saying problem imply large cases problem hard even example decision problem presburger arithmetic shown algorithms written solve problem reasonable times cases similarly algorithms solve npcomplete knapsack problem wide range sizes less quadratic time solvers routinely handle large instances npcomplete boolean satisfiability problem
exponentialtime algorithms generally unusable practice consider program makes operations halting small assuming sake example computer 1012 operations second program would 1010 years order magnitude universe even much faster computer program would useful small instances sense intractability problem somewhat independent technological progress however exponentialtime algorithm takes 10001n operations practical gets relatively large
similarly polynomial time algorithm always practical running time unreasonable consider efficient still useless except small instances indeed practice even algorithms often impractical realistic sizes problems
historyedit
early example algorithm complexity analysis running time analysis euclidean algorithm done gabriel lamé 1844
actual research explicitly devoted complexity algorithmic problems started numerous foundations laid various researchers influential among definition turing machines alan turing 1936 turned robust flexible simplification computer
beginning systematic studies computational complexity attributed seminal 1965 paper computational complexity algorithms juris hartmanis richard stearns laid definitions time complexity space complexity proved hierarchy theorems16 addition 1965 edmonds suggested consider good algorithm running time bounded polynomial input size17
earlier papers studying problems solvable turing machines specific bounded resources include16 john myhills definition linear bounded automata myhill 1960 raymond smullyans study rudimentary sets 1961 well hisao yamadas paper18 realtime computations 1962 somewhat earlier boris trakhtenbrot 1956 pioneer field ussr studied another specific complexity measure19 remembers

however initial interest automata theory increasingly aside favor computational complexity exciting fusion combinatorial methods inherited switching theory conceptual arsenal theory algorithms ideas occurred earlier 1955 coined term signalizing function nowadays commonly known complexity measure20

1967 manuel blum developed axiomatic complexity theory based axioms proved important result socalled speedup theorem field really began flourish 1971 researcher stephen cook working independently leonid levin ussr proved exist practically relevant problems npcomplete 1972 richard karp took idea leap forward landmark paper reducibility among combinatorial problems showed diverse combinatorial graph theoretical problems infamous computational intractability npcomplete21
alsoedit


categorycomputational problems
context computational complexity
descriptive complexity theory
game complexity
list complexity classes
list computability complexity topics
list important publications theoretical computer science
list unsolved problems computer science
parameterized complexity
proof complexity
quantum complexity theory
structural complexity theory
transcomputational problem


referencesedit
citationsedit


arora barak 2009 chapter computational model doesnt matter
sipser 2006 chapter time complexity
ladner richard 1975 structure polynomial time reducibility journal 151–171 doi101145321864321877
berger bonnie leighton 1998 protein folding hydrophobichydrophilic model npcomplete journal computational biology 27–40 doi101089cmb1998527 pmid 9541869
cook stephen april 2000 versus problem clay mathematics institute retrieved 20061018
jaffe arthur 2006 millennium grand challenge mathematics notices retrieved 20061018
arvind vikraman kurur piyush 2006 graph isomorphism information computation 835–852 doi101016jic200602002
schöning 1987 graph isomorphism hierarchy proceedings annual symposium theoretical aspects computer science lecture notes computer science 1987 114–124 doi101007bfb0039599 isbn 354017219x also schöning 1988 graph isomorphism hierarchy journal computer system sciences 312–323 doi1010160022000088900104
babai lászló 2016 graph isomorphism quasipolynomial time arxiv151203547 csds
lance fortnow computational complexity blog complexity class week factoring september 2002 httpweblogfortnowcom200209complexityclassofweekfactoringhtml
wolfram mathworld number field sieve
boaz baraks course computational complexity lecture
hopcroft motwani ullman 2007 introduction automata theory languages computation addison wesley bostonsan francisconew york page
meurant gerard 2014 algorithms complexity isbn 9780080933917
zobel justin 2015 writing computer science isbn 9781447166399
fortnow homer 2003
richard karp combinatorics complexity randomness 1985 turing award lecture
yamada 1962 realtime computation recursive functions realtime computable ieee transactions electronic computers ec11 753–760 doi101109tec19625219459
trakhtenbrot signalizing functions tabular operators uchionnye zapiski penzenskogo pedinstituta transactions penza pedagogoical institute 75–87 1956 russian
boris trakhtenbrot logic theoretical computer science update pillars computer science lncs 4800 springer 2008
richard karp 1972 reducibility among combinatorial problems miller thatcher editors complexity computer computations york plenum 85–103 maint extra text editors list link


textbooksedit

arora sanjeev barak boaz 2009 computational complexity modern approach cambridge isbn 9780521424264 119368112
downey fellows michael 1999 parameterized complexity berlin york springerverlag
dingzhu keri 2000 theory computational complexity john wiley sons isbn 9780471345060
garey michael johnson david 1979 computers intractability guide theory npcompleteness freeman isbn 0716710455
goldreich oded 2008 computational complexity conceptual perspective cambridge university press
leeuwen 1990 handbook theoretical computer science algorithms complexity press isbn 9780444880710
papadimitriou christos 1994 computational complexity addison wesley isbn 0201530821
sipser michael 2006 introduction theory computation thomson course technology isbn 0534950973

surveysedit

khalil hatem ulery dana 1976 review current studies complexity algorithms partial differential equations proceedings annual conference proceedings 1976 annual conference doi101145800191805573
cook stephen 1983 overview computational complexity commun 400–408 doi101145358141358144 issn 00010782
fortnow lance homer steven 2003 short history computational complexity bulletin eatcs 95–133
mertens stephan 2002 computational complexity physicists computing science piscataway ieee educational activities department 31–47 arxivcondmat0012185 doi1011095992998639 issn 15219615

external linksedit

complexity
hazewinkel michiel 2001 1994 computational complexity classes encyclopedia mathematics springer sciencebusiness media kluwer academic publishers isbn 9781556080104
httpmathoverflownetquestions34487whatarethemostimportantresultsandpapersincomplexitytheorythatevery












important complexity classes



considered feasible



dlogtime

acc0










pcomplete












suspected infeasible






npcomplete
nphard
conp
conpcomplete









pcomplete



pspace

pspacecomplete







considered infeasible



exptime
nexptime
expspace
elementary









class hierarchies



polynomial hierarchy
exponential hierarchy
grzegorczyk hierarchy
arithmetical hierarchy
boolean hierarchy





families classes



dtime
ntime
dspace
nspace
probabilistically checkable proof
interactive proof system

















major fields computer science




note template roughly follows 2012 computing classification system



hardware



printed circuit board
peripheral
integrated circuit
verylargescale integration
energy consumption
electronic design automation





computer systems
organization



computer architecture
embedded system
realtime computing
dependability





networks



network architecture
network protocol
network components
network scheduler
network performance evaluation
network service





software organization



interpreter
middleware
virtual machine
operating system
software quality





software notations
tools



programming paradigm
programming language
compiler
domainspecific language
modeling language
software framework
integrated development environment
software configuration management
software library
software repository





software development



software development process
requirements analysis
software design
software construction
software deployment
software maintenance
programming team
opensource model





theory computation



model computation
formal language
automata theory
computational complexity theory
logic
semantics





algorithms



algorithm design
analysis algorithms
randomized algorithm
computational geometry





mathematics
computing



discrete mathematics
probability
statistics
mathematical software
information theory
mathematical analysis
numerical analysis





information
systems



database management system
information storage systems
enterprise information system
social information systems
geographic information system
decision support system
process control system
multimedia information system
data mining
digital library
computing platform
digital marketing
world wide
information retrieval





security



cryptography
formal methods
security services
intrusion detection system
hardware security
network security
information security
application security





human–computer
interaction



interaction design
social computing
ubiquitous computing
visualization
accessibility





concurrency



concurrent computing
parallel computing
distributed computing
multithreading
multiprocessing





artificial
intelligence



natural language processing
knowledge representation reasoning
computer vision
automated planning scheduling
search methodology
control method
philosophy artificial intelligence
distributed artificial intelligence





machine learning



supervised learning
unsupervised learning
reinforcement learning
multitask learning
crossvalidation





graphics



animation
rendering
image manipulation
graphics processing unit
mixed reality
virtual reality
image compression
solid modeling





applied
computing



ecommerce
enterprise software
computational mathematics
computational physics
computational chemistry
computational biology
computational social science
computational engineering
computational healthcare
digital
electronic publishing
cyberwarfare
electronic voting
video game
word processing
operations research
educational technology
document management








book
category
portal
wikiproject
commons









authority control



41205911











retrieved httpsenwikipediaorgwindexphptitlecomputationalcomplexitytheoryoldid811980244 categories computational complexity theorycomputational fields studyhidden categories maint extra text editors listuse dates september 2017wikipedia articles identifiers
