uses software development disambiguation


software development


core activities




processes
requirements
design
engineering
construction
testing
debugging
deployment
maintenance




paradigms models




agile
cleanroom
incremental
prototyping
spiral
waterfall




methodologies frameworks




devops
dsdm


kanban
lean




safe
scrum
semat


vmodel





supporting disciplines




configuration management
documentation
software quality assurance
project management
user experience




practices




atdd






standup





tools




compiler
debugger
profiler
designer
modeling

build automation
release automation
infrastructure code
testing




standards boks




cmmi
ieee standards
9001
isoiec standards
swebok
pmbok
babok















software development process computer programming documenting testing fixing involved creating maintaining applications frameworks resulting software product software development process writing maintaining source code broader sense includes involved conception desired software final manifestation software sometimes planned structured process1 therefore software development include research development prototyping modification reuse reengineering maintenance activities result software products2
software developed variety purposes three common meet specific needs specific clientbusiness case custom software meet perceived need potential users case commercial open source software personal scientist write software automate mundane task embedded software development development embedded software used controlling consumer products requires development process integrated development controlled physical product system software underlies applications programming process often developed separately
need better quality control software development process given rise discipline software engineering aims apply systematic approach exemplified engineering paradigm process software development
many approaches software project management known software development life cycle models methodologies processes models waterfall model traditional version contrasted recent innovation agile software development



contents


methodologies
software development activities

identification need
planning
designing
implementation testing documenting
deployment maintenance


subtopics

view model
business process data modelling
computeraided software engineering
integrated development environment
modeling language
programming paradigm
reuse solutions


also

roles industry
specific applications


references
reading



methodologiesedit






section cite sources please help improve section adding citations reliable sources unsourced material challenged removed august 2010 learn remove template message



software development process also known software development methodology model life cycle framework used structure plan control process developing information systems wide variety frameworks evolved years recognized strengths weaknesses several different approaches software development take structured engineeringbased approach developing business solutions whereas others take incremental approach software evolves developed piecebypiece system development methodology necessarily suitable projects available methodologies best suited specific kinds projects based various technical organizational project team considerations
methodologies share combination following stages software development

analyzing problem
market research
gathering requirements proposed business solution
devising plan design softwarebased solution
implementation coding software
testing software
deployment
maintenance fixing

stages often referred collectively software development lifecycle sdlc different approaches software development carry stages different orders devote less time different stages level detail documentation produced stage software development also vary stages also carried turn “waterfall” based approach repeated various cycles iterations extreme approach extreme approach usually involves less time spent planning documentation time spent coding development automated tests “extreme” approaches also promote continuous testing throughout development lifecycle well working bugfree product times structured “waterfall” based approaches attempt assess majority risks develop detailed plan software implementation coding begins avoid significant design changes recoding later stages software development lifecycle planning
significant advantages disadvantages various methodologies best approach solving problem using software often depend type problem problem well understood solution effectively planned ahead time waterfall based approach work best hand problem unique least development team structure software solution cannot easily envisioned extreme incremental approach work best
software development activitiesedit
identification neededit
sources ideas software products plenteous ideas come market research including demographics potential customers existing customers sales prospects rejected product internal software development staff creative third party ideas software products usually first evaluated marketing personnel economic feasibility existing channels distribution possible effects existing product lines required features companys marketing objectives marketing evaluation phase cost time assumptions become evaluated decision reached early first phase whether based detailed information generated marketing development staff project pursued further3
book great software debates alan davis states chapter requirements subchapter missing piece software development

students engineering learn engineering rarely exposed finance marketing students marketing learn marketing rarely exposed finance engineering become specialists area complicate matters meet interdisciplinary people workforce roles mimic software product planning critical development success absolutely requires knowledge multiple disciplines4

software development involve compromising going beyond required client software development project stray less technical concerns human resources risk management intellectual property budgeting crisis management processes also cause role business development overlap software development
planningedit
planning objective every activity want discover things belong project important task creating software program extracting requirements requirements analysis5 customers typically abstract idea want result know software skilled experienced software engineers recognize incomplete ambiguous even contradictory requirements point frequently demonstrating live code help reduce risk requirements incorrect
although much effort requirements phase ensure requirements complete consistent rarely case leaving software design phase influential comes minimizing effects changing requirements requirements volatility challenging impact future already going development efforts6
general requirements gathered client analysis scope development determined clearly stated often called scope document
certain functionality scope project function cost result unclear requirements start development development done externally document considered legal document ever disputes ambiguity promised client clarified
designingedit
main articles software design systems design
requirements established design software established software design document involves preliminary highlevel design main modules overall picture block diagram parts together language operating system hardware components known time detailed lowlevel design created perhaps prototyping proofofconcept firm requirements
implementation testing documentingedit
implementation part process software engineers actually program code project
software testing integral important phase software development process part process ensures defects recognized soon possible processes generally known testdriven development tests developed implementation serve guide implementations correctness
documenting internal design software purpose future maintenance enhancement done throughout development also include writing external internal software engineering process chosen developing team determine much internal documentation necessary plandriven models waterfall generally produce documentation agile models
deployment maintenanceedit
deployment starts directly code appropriately tested approved release sold otherwise distributed production environment involve installation customization setting parameters customers values testing possibly extended period evaluationcitation needed
software training support important software effective used correctly7
maintaining enhancing software cope newly discovered faults requirements take substantial time effort missed requirements force redesign softwarecitation needed
subtopicsedit
view modeledit




teaf matrix views perspectives


view model framework provides viewpoints system environment used software development process graphical representation underlying semantics view
purpose viewpoints views enable human engineers comprehend complex systems organize elements problem solution around domains expertise engineering physically intensive systems viewpoints often correspond capabilities responsibilities within engineering organization8
complex system specifications extensive individual fully comprehend aspects specifications furthermore different interests given system different reasons examining systems specifications business executive different questions system makeup would system implementer concept viewpoints framework therefore provide separate viewpoints specification given complex system viewpoints satisfy audience interest aspects system associated viewpoint viewpoint language optimizes vocabulary presentation audience viewpoint
business process data modellingedit
graphical representation current state information provides effective means presenting information users system developers




example interaction business process data models9



business model illustrates functions associated business process modeled organizations perform functions depicting activities information flows foundation created visualize define understand validate nature process
data model provides details information stored primary final product generation computer software code application preparation functional specification computer software makeorbuy decision figure right example interaction business process data models9

usually model created conducting interview referred business analysis interview consists facilitator asking series questions designed extract required information describes process interviewer called facilitator emphasize participants provide information facilitator knowledge process interest important structured methodology questions asked process expert methodology important usually team facilitators collecting information across facility results information interviewers must together completed9
models developed defining either current state process case final product called asis snapshot model collection ideas process contain resulting whatcanbe model generation process data models used determine existing processes information systems sound need minor modifications enhancements reengineering required corrective action creation business models view automate information process analysis used fundamentally reshape business organization conducts operations9
computeraided software engineeringedit
computeraided software engineering case field software engineering scientific application software tools methods development software results highquality defectfree maintainable software products10 also refers methods development information systems together automated tools used software development process11 term computeraided software engineering case refer software used automated development systems software computer code case functions include analysis design programming case tools automate methods designing documenting producing structured computer code desired programming language12
ideas computeraided software system engineering case are13

foster computer assistance software development software maintenance processes
engineering approach software development maintenance

typical case tools exist configuration management data modeling model transformation refactoring source code generation
integrated development environmentedit




anjuta gnome environment


integrated development environment also known integrated design environment integrated debugging environment software application provides comprehensive facilities computer programmers software development normally consists

source code editor
compiler interpreter
build automation tools
debugger usually

ides designed maximize programmer productivity providing tightknit components similar user interfaces typically dedicated specific programming language provide feature closely matches programming paradigms language
modeling languageedit
modeling language artificial language used express information knowledge systems structure defined consistent rules rules used interpretation meaning components structure modeling language graphical textual14 graphical modeling languages diagram techniques named symbols represent concepts lines connect symbols represent relationships various graphical annotation represent constraints textual modeling languages typically standardised keywords accompanied parameters make computerinterpretable expressions
examples graphical modelling languages field software engineering

business process modeling notation bpmn form bpml example process modeling language
express expressg 1030311 international standard generalpurpose data modeling language
extended enterprise modeling language eeml commonly used business process modeling across layers
flowchart schematic representation algorithm stepwise process
fundamental modeling concepts modeling language softwareintensive systems
idef family modeling languages notable include idef0 functional modeling idef1x information modeling idef5 modeling ontologies
lepus3 objectoriented visual design description language formal specification language suitable primarily modelling large objectoriented java programs design patterns
specification description languagesdl specification language targeted unambiguous specification description behaviour reactive distributed systems
unified modeling language generalpurpose modeling language industry standard specifying softwareintensive systems current version supports thirteen different diagram techniques widespread tool support

modeling languages executable using doesnt necessarily mean programmers longer needed contrary executable modeling languages intended amplify productivity skilled programmers address difficult problems parallel computing distributed systems
programming paradigmedit
programming paradigm fundamental style computer programming generally dictated project management methodology waterfall agile paradigms differ concepts abstractions used represent elements program objects functions variables constraints steps comprise computation assignations evaluation continuations data flows sometimes concepts asserted paradigm utilized cooperatively highlevel system architecture design cases programming paradigms scope limited internal structure particular program module
programming language support multiple paradigms example programs written object pascal purely procedural purely objectoriented contain elements paradigms software designers programmers decide paradigm elements objectoriented programming programmers think program collection interacting objects functional programming program thought sequence stateless function evaluations programming computers systems many processors processoriented programming allows programmers think applications sets concurrent processes acting upon logically shared data structures
different groups software engineering advocate different methodologies different programming languages advocate different programming paradigms languages designed support paradigm smalltalk supports objectoriented programming haskell supports functional programming programming languages support multiple paradigms object pascal visual basic common lisp scheme python ruby
many programming paradigms well known methods forbid enable instance pure functional programming forbids using sideeffects structured programming forbids using goto statements partly reason paradigms often regarded doctrinaire overly rigid accustomed earlier stylescitation needed avoiding certain methods make easier prove theorems programs correctness simply understand behavior
examples highlevel paradigms include

aspectoriented software development
domainspecific modeling
modeldriven engineering
objectoriented programming methodologies

grady boochs objectoriented design also known objectoriented analysis design ooad booch model includes diagrams class object state transition interaction module process15


searchbased software engineering
serviceoriented modeling
structured programming
topdown bottomup design

topdown programming evolved 1970s researcher harlan mills niklaus wirth developed structured programming



reuse solutionsedit






section need rewritten entirely comply wikipedias quality standards help discussion page contain suggestions 2016




software framework reusable design implementation software system subsystem
existing components componentbased software engineering reused assembled together create larger application
application programming interface service establish subroutine definitions protocols tools building application software utilized future builds
open source documentions libraries github provide free code software developers reuse implement applications designs

alsoedit

continuous integration
custom software
devops
functional specification
programming productivity
software blueprint
software design
software development effort estimation
software development process
software project management
specification description language
user experience
software industry

roles industryedit

bachelor science information technology
computer programmer
consulting software engineer
offshore software development
software developer
software engineer
software publisher

specific applicationsedit

video game development
application development
engineering
mobile application development

referencesedit



application development appdev defined explained bestpricecomputerscouk 20070813 retrieved 20120805
associates 2002 product development glossary retrieved 20061029
joseph morris 2001 software industry accounting p110
alan davis great software debates october 2004 pp125128 wileyieee computer society press
ralph wand proposal formal definition design concept lyytinen loucopoulos mylopoulos robinson design requirements engineering tenyear perspective springerverlag 2009 103136
otero carlos software design challenges performance improvement taylor francis retrieved october 2017
software development hayathisolutionscom retrieved 20160607
edward barkmeyer 2003 concepts automating systems integration nist 2003
paul smith richard sarfaty 1993 creating strategic plan configuration management using computer aided software engineering case tools paper 1993 national doecontractors facilities cadcae users group
kuhn 1989 selecting effectively using computer aided software engineering tool annual westinghouse computer symposium 1989 pittsburgh project
loucopoulos karakostas 1995 system requirements engineering mcgrawhill
case archived 20120218 wayback machine definition telecom glossary 2000 archived 20051122 wayback machine retrieved 2008
robinson 1992 putting software engineering case york john wiley sons
xiao 2007 metamodel notation graphical modeling languages computer software applications conference 2007 compsac 2007 31st annual international volume issue 24–27 july 2007 219224
georges gauthier merx ronald norman 2006 unified software engineering java p201



readingedit



wikimedia commons media related software development



edward 1992 software testing real world addisonwesley professional isbn 0201877562
mccarthy 1995 dynamics software development microsoft press isbn 1556158238
conde 2002 software product management managing software development idea product marketing sales aspatore books isbn 1587622025
davis 2005 enough requirements management software development meets marketing dorset house publishing company incorporated isbn 0932633641
hasted edward 2005 software sells practical guide developing marketing software project wiley publishing isbn 0764597833
hohmann luke 2003 beyond software architecture creating sustaining winning solutions addisonwesley professional isbn 0201775948
john horch 2005 orientations work objects ieee software 117–118 1995
rittinghouse john 2003 managing software deliverables software development management methodology digital press isbn 155558313x
wiegers karl 2005 software requirements thorny issues practical advice microsoft press isbn 0735622671
wysocki robert 2006 effective software project management wiley isbn 0764596365












software engineering



fields



computer programming
requirements engineering
software deployment
software design
software maintenance
software testing
systems analysis
formal methods





concepts



data modeling
enterprise architecture
functional specification
modeling language
orthogonality
programming paradigm
software
software archaeology
software architecture
software configuration management
software development methodology
software development process
software quality
software quality assurance
software verification validation
structured analysis





orientations



agile
aspectoriented
object orientation
ontology
service orientation
sdlc





models




developmental



agile

executable
incremental model
iterative model
prototype model


scrum
spiral model
vmodel
waterfall model










spice
cmmi
data model
model
function model
information model
metamodeling
object model
systems model
view model





languages



idef


sysml









software
engineers




victor basili
kent beck
grady booch
fred brooks
barry boehm
peter chen
danese cooper
ward cunningham
demarco
edsger dijkstra
delores etter
martin fowler
adele goldstine
margaret hamilton
hoare
lois haibt
mary jean harrold
grace hopper
watts humphrey
michael jackson
ivar jacobson
alan
nancy leveson
stephen mellor
bertrand meyer
david parnas
trygve reenskaug
winston royce
james rumbaugh
mary shaw
peri tarr
elaine weyuker
niklaus wirth
edward yourdon





related fields



computer science
computer engineering
project management
risk management
systems engineering








category
commons

















major fields computer science




note template roughly follows 2012 computing classification system



hardware



printed circuit board
peripheral
integrated circuit
verylargescale integration
energy consumption
electronic design automation





computer systems
organization



computer architecture
embedded system
realtime computing
dependability





networks



network architecture
network protocol
network components
network scheduler
network performance evaluation
network service





software organization



interpreter
middleware
virtual machine
operating system
software quality





software notations
tools



programming paradigm
programming language
compiler
domainspecific language
modeling language
software framework
integrated development environment
software configuration management
software library
software repository





software development



software development process
requirements analysis
software design
software construction
software deployment
software maintenance
programming team
opensource model





theory computation



model computation
formal language
automata theory
computational complexity theory
logic
semantics





algorithms



algorithm design
analysis algorithms
randomized algorithm
computational geometry





mathematics
computing



discrete mathematics
probability
statistics
mathematical software
information theory
mathematical analysis
numerical analysis





information
systems



database management system
information storage systems
enterprise information system
social information systems
geographic information system
decision support system
process control system
multimedia information system
data mining
digital library
computing platform
digital marketing
world wide
information retrieval





security



cryptography
formal methods
security services
intrusion detection system
hardware security
network security
information security
application security





human–computer
interaction



interaction design
social computing
ubiquitous computing
visualization
accessibility





concurrency



concurrent computing
parallel computing
distributed computing
multithreading
multiprocessing





artificial
intelligence



natural language processing
knowledge representation reasoning
computer vision
automated planning scheduling
search methodology
control method
philosophy artificial intelligence
distributed artificial intelligence





machine learning



supervised learning
unsupervised learning
reinforcement learning
multitask learning
crossvalidation





graphics



animation
rendering
image manipulation
graphics processing unit
mixed reality
virtual reality
image compression
solid modeling





applied
computing



ecommerce
enterprise software
computational mathematics
computational physics
computational chemistry
computational biology
computational social science
computational engineering
computational healthcare
digital
electronic publishing
cyberwarfare
electronic voting
video game
word processing
operations research
educational technology
document management








book
category
portal
wikiproject
commons









authority control



00679589











retrieved httpsenwikipediaorgwindexphptitlesoftwaredevelopmentoldid817221782 categories software developmentsoftware project managementproject managementcomputer occupationsproduct developmenthidden categories webarchive template wayback linksarticles needing additional references august 2010all articles needing additional referencesall articles unsourced statementsarticles unsourced statements december 2011articles unsourced statements january 2008wikipedia articles needing rewrite 2016all articles needing rewrite
