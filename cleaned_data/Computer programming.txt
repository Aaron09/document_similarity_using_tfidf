

software development


core activities




processes
requirements
design
engineering
construction
testing
debugging
deployment
maintenance




paradigms models




agile
cleanroom
incremental
prototyping
spiral
waterfall




methodologies frameworks




devops
dsdm


kanban
lean




safe
scrum
semat


vmodel





supporting disciplines




configuration management
documentation
software quality assurance
project management
user experience




practices




atdd






standup





tools




compiler
debugger
profiler
designer
modeling

build automation
release automation
infrastructure code
testing




standards boks




cmmi
ieee standards
9001
isoiec standards
swebok
pmbok
babok















computer programming often shortened programming process leads original formulation computing problem executable computer programs programming involves activities analysis developing understanding generating algorithms verification requirements algorithms including correctness resources consumption implementation commonly referred coding12 algorithms target programming language source code written programming languages purpose programming find sequence instructions automate performing specific task solving given problem process programming thus often requires expertise many different subjects including knowledge application domain specialized algorithms formal logic
related tasks include testing debugging maintaining source code implementation build system management derived artifacts machine code computer programs might considered part programming process often term software development used larger process term programming implementation coding reserved actual writing source code software engineering combines engineering techniques software development practices



contents


history
modern programming

quality requirements
readability source code
algorithmic complexity
methodologies
measuring language usage
debugging


programming languages
programmers
also
references
reading
external links



historyedit
also history programming languages




lovelace whose notes added luigi menabreas paper included first algorithm designed processing analytical engine often recognized historys first computer programmer


programmable devices existed least back 1206 automata aljazari programmable pegs cams play various rhythms drum patterns3 1801 jacquard loom could produce entirely different weaves changing program series pasteboard cards holes punched
however first computer program generally dated 1843 mathematician lovelace published algorithm calculate sequence bernoulli numbers intended carried charles babbages analytical engine4




data instructions stored external punched cards kept order arranged program decks


1880s herman hollerith invented concept storing data machinereadable form5 later control panel plugboard added 1906 type tabulator allowed programmed different jobs late 1940s unit record equipment programmed control panels similar first electronic computers however concept storedprogram computers introduced 1949 programs data stored manipulated computer memory






neutrality article disputed relevant discussion found talk page please remove message conditions december 2017 learn remove template message









section needs additional citations verification please help improve article adding citations reliable sources unsourced material challenged removed december 2017 learn remove template message



women crucial role computer programming beginning first computer programmers women quotation needed computer programming considered lowskilled lowwaged many assumed coding process trivial mechanical work could given women soon female coders became involved intellectual processes originally done male planners 1960s computer companies like began make lowcost computers computers could massproduced software systems could companies became need programmers solve varied complex problems began appreciation programmers increased demand services went hand hand rise salaries boost status computer programmers attracted computer programming6
machine code language early programs written instruction particular machine often binary notation assembly languages soon developed programmer specify instruction text format total abbreviations operation code meaningful names specifying addresses however assembly language little different notation machine language machines different instruction sets also different assembly languages




wired control panel accounting machine


highlevel languages allow programmer write programs terms abstract less bound underlying hardware harness power computers make programming easier7 allowing programmers specify calculations entering formula directly fortran first widely used highlevel language functional implementation came 19578 many languages soon developed particular cobol aimed commercial data processing lisp computer research
programs mostly still entered using punched cards paper tape computer programming punch card late 1960s data storage devices computer terminals became inexpensive enough programs could created typing directly computers text editors developed allowed changes corrections made much easily punched cards
modern programmingedit






section needs additional citations verification please help improve article adding citations reliable sources unsourced material challenged removed august 2010 learn remove template message



quality requirementsedit
whatever approach development final program must satisfy fundamental properties following properties among important

reliability often results program correct depends conceptual correctness algorithms minimization programming mistakes mistakes resource management buffer overflows race conditions logic errors division zero offbyone errors
robustness well program anticipates problems errors bugs includes situations incorrect inappropriate corrupt data unavailability needed resources memory operating system services network connections user error unexpected power outages
usability ergonomics program ease person program intended purpose cases even unanticipated purposes issues make break success even regardless issues involves wide range textual graphical sometimes hardware elements improve clarity intuitiveness cohesiveness completeness programs user interface
portability range computer hardware operating system platforms source code program compiledinterpreted depends differences programming facilities provided different platforms including hardware operating system resources expected behavior hardware operating system availability platform specific compilers sometimes libraries language source code
maintainability ease program modified present future developers order make improvements customizations bugs security holes adapt environments good practices9 initial development make difference regard quality directly apparent user significantly affect fate program long term
efficiencyperformance measure system resources program consumes processor time memory space slow devices disks network bandwidth extent even user interaction less better also includes careful management resources example cleaning temporary files eliminating memory leaks

readability source codeedit
computer programming readability refers ease human reader comprehend purpose control flow operation source code affects aspects quality including portability usability importantly maintainability
readability important programmers spend majority time reading trying understand modifying existing source code rather writing source code unreadable code often leads bugs inefficiencies duplicated code study10 found simple readability transformations made code shorter drastically reduced time understand
following consistent programming style often helps readability however readability programming style many factors little nothing ability computer efficiently compile execute code contribute readability11 factors include

different indent styles whitespace
comments
decomposition
naming conventions objects variables classes procedures

presentation aspects indents line breaks color highlighting often handled source code editor content aspects reflect programmers talent skills
various visual programming languages also developed intent resolve readability concerns adopting nontraditional approaches code structure display integrated development environments ides integrate help techniques like code refactoring enhance readability
algorithmic complexityedit
academic field engineering practice computer programming largely concerned discovering implementing efficient algorithms given class problem purpose algorithms classified orders using socalled notation expresses resource execution time memory consumption terms size input expert programmers familiar variety wellestablished algorithms respective complexities knowledge choose algorithms best suited circumstances
methodologiesedit
first step formal software development processes requirements analysis followed testing determine value modeling implementation failure elimination debugging exist differing approaches tasks approach popular requirements analysis case analysis many programmers forms agile software development various stages formal software development integrated together short cycles take weeks rather years many approaches software development process
popular modeling techniques include objectoriented analysis design ooad modeldriven architecture unified modeling language notation used ooad
similar technique used database design entityrelationship modeling modeling
implementation techniques include imperative languages objectoriented procedural functional languages logic languages
measuring language usageedit
main article measuring programming language popularity
difficult determine popular modern programming languages methods measuring programming language popularity include counting number advertisements mention language12 number books sold courses teaching language overestimates importance newer languages estimates number existing lines code written language underestimates number users business languages cobol
languages popular particular kinds applications languages regularly used write many different kinds applications example cobol still strong corporate data centers13 often large mainframe computers fortran engineering applications scripting languages development embedded software many applications several languages construction languages generally designed around syntax prior language functionality added example adds objectorientation java adds memory management bytecode result loses efficiency ability lowlevel manipulation
debuggingedit




1947 origin popular incorrect etymology common term software defect


main article debugging
debugging important task software development process since defects program significant consequences users languages prone kinds faults specification require compilers perform much checking languages static code analysis tool help detect possible problems normally first step debugging attempt reproduce problem nontrivial task example parallel processes unusual software bugs also specific user environment usage history make difficult reproduce problem
reproduced input program need simplified make easier debug example compiler make crash parsing large source file however simplification test case lines original source file sufficient reproduce crash simplification done manually using divideandconquer approach programmer remove parts original test case check problem still exists debugging problem programmer skip user interaction original problem description check remaining actions sufficient bugs appear
debugging often done ides like eclipse visual studio xcode kdevelop netbeans codeblocks standalone debuggers like also used often provide less visual environment usually using command line text editors emacs allow invoked provide visual environment
programming languagesedit
main articles programming language list programming languages
different programming languages support different styles programming called programming paradigms choice language used subject many considerations company policy suitability task availability thirdparty packages individual preference ideally programming language best suited task hand selected tradeoffs ideal involve finding enough programmers know language build team availability compilers language efficiency programs written given language execute languages form approximate spectrum lowlevel highlevel lowlevel languages typically machineoriented faster execute whereas highlevel languages abstract easier execute less quickly usually easier code highlevel languages lowlevel ones
allen downey book think like computer scientist writes

details look different different languages basic instructions appear every language

input gather data keyboard file device
output display data screen send data file device
arithmetic perform basic arithmetical operations like addition multiplication
conditional execution check certain conditions execute appropriate sequence statements
repetition perform action repeatedly usually variation



many computer languages provide mechanism call functions provided shared libraries provided functions library follow appropriate runtime conventions method passing arguments functions written language
programmersedit
main article programmer
also software developer software engineer
computer programmers write computer software jobs usually involve


coding
debugging
documentation
integration
maintenance
requirements analysis
software architecture
software testing
specification


alsoedit


computer science portal
computing portal
computer networking portal
computer programming portal


main article outline computer programming

accu
association computing machinery
computer networking
hello world program
institution analysts programmers
national coding week
system programming
computer programming

referencesedit


shaun bebbington 2014 coding retrieved 20140303
shaun bebbington 2014 programming retrieved 20140303
fowler charles october 1967 museum music history mechanical instruments music educators journal music educators journal 45–49 doi1023073391092 jstor 3391092
fuegi francis 2003 lovelace babbage creation 1843 notes ieee annals history computing doi101109mahc20031253887
columbia university computing history herman hollerith columbiaedu retrieved 20100425
ensmenger nathan 2015 beards sandals signs rugged individualism masculine culture within computing professions osiris 38–65 doi101086682955
fortran creator john backus dies msnbccom retrieved november 2014
fortran creator john backus dies tech gadgets msnbccom msnbc 20070320 retrieved 20100425
programming tips become good programmer wisdom geek wisdom geek 20160519 retrieved 20160523
james elshoff michael marcotty improving computer program readability modification communications p512521 1982
multiple wiki readability docforge retrieved 20100130
survey advertisements mentioning given language
mitchell robert cobol brain drain computer world retrieved 2015


readingedit

hartmann practical guide computer simulations singapore world scientific 2009
hunt thomas cunningham pragmatic programmer journeyman master amsterdam addisonwesley longman 1999
brian kernighan practice programming pearson 1999
weinberg gerald psychology computer programming york nostrand reinhold 1971
edsger dijkstra discipline programming prenticehall 1976
dahl ewdijkstra hoare structured pogramming academic press 1972
david gries science programming springerverlag 1981

external linksedit



wikibooks book topic computer programming





wikibooks book topic windows programming





wikiversity learning resources computer programming




library resources
computer programming





online books
resources library
resources libraries





media related programming wikimedia commons
quotations related programming wikiquote
software engineering curlie based dmoz












major fields computer science




note template roughly follows 2012 computing classification system



hardware



printed circuit board
peripheral
integrated circuit
verylargescale integration
energy consumption
electronic design automation





computer systems
organization



computer architecture
embedded system
realtime computing
dependability





networks



network architecture
network protocol
network components
network scheduler
network performance evaluation
network service





software organization



interpreter
middleware
virtual machine
operating system
software quality





software notations
tools



programming paradigm
programming language
compiler
domainspecific language
modeling language
software framework
integrated development environment
software configuration management
software library
software repository





software development



software development process
requirements analysis
software design
software construction
software deployment
software maintenance
programming team
opensource model





theory computation



model computation
formal language
automata theory
computational complexity theory
logic
semantics





algorithms



algorithm design
analysis algorithms
randomized algorithm
computational geometry





mathematics
computing



discrete mathematics
probability
statistics
mathematical software
information theory
mathematical analysis
numerical analysis





information
systems



database management system
information storage systems
enterprise information system
social information systems
geographic information system
decision support system
process control system
multimedia information system
data mining
digital library
computing platform
digital marketing
world wide
information retrieval





security



cryptography
formal methods
security services
intrusion detection system
hardware security
network security
information security
application security





human–computer
interaction



interaction design
social computing
ubiquitous computing
visualization
accessibility





concurrency



concurrent computing
parallel computing
distributed computing
multithreading
multiprocessing





artificial
intelligence



natural language processing
knowledge representation reasoning
computer vision
automated planning scheduling
search methodology
control method
philosophy artificial intelligence
distributed artificial intelligence





machine learning



supervised learning
unsupervised learning
reinforcement learning
multitask learning
crossvalidation





graphics



animation
rendering
image manipulation
graphics processing unit
mixed reality
virtual reality
image compression
solid modeling





applied
computing



ecommerce
enterprise software
computational mathematics
computational physics
computational chemistry
computational biology
computational social science
computational engineering
computational healthcare
digital
electronic publishing
cyberwarfare
electronic voting
video game
word processing
operations research
educational technology
document management








book
category
portal
wikiproject
commons

















software engineering



fields



computer programming
requirements engineering
software deployment
software design
software maintenance
software testing
systems analysis
formal methods





concepts



data modeling
enterprise architecture
functional specification
modeling language
orthogonality
programming paradigm
software
software archaeology
software architecture
software configuration management
software development methodology
software development process
software quality
software quality assurance
software verification validation
structured analysis





orientations



agile
aspectoriented
object orientation
ontology
service orientation
sdlc





models




developmental



agile

executable
incremental model
iterative model
prototype model


scrum
spiral model
vmodel
waterfall model










spice
cmmi
data model
model
function model
information model
metamodeling
object model
systems model
view model





languages



idef


sysml









software
engineers




victor basili
kent beck
grady booch
fred brooks
barry boehm
peter chen
danese cooper
ward cunningham
demarco
edsger dijkstra
delores etter
martin fowler
adele goldstine
margaret hamilton
hoare
lois haibt
mary jean harrold
grace hopper
watts humphrey
michael jackson
ivar jacobson
alan
nancy leveson
stephen mellor
bertrand meyer
david parnas
trygve reenskaug
winston royce
james rumbaugh
mary shaw
peri tarr
elaine weyuker
niklaus wirth
edward yourdon





related fields



computer science
computer engineering
project management
risk management
systems engineering








category
commons









authority control



lccn sh85107310
40763705
cb11932648m data
00569223











retrieved httpsenwikipediaorgwindexphptitlecomputerprogrammingoldid816723192 categories computer programmingcomputershidden categories npov disputes december 2017all npov disputesarticles needing additional references december 2017all articles needing additional referencesarticles needing additional references august 2010commons category local link different wikidataarticles dmoz linkswikipedia articles lccn identifierswikipedia articles identifierswikipedia articles identifiers
