objectoriented redirects meanings objectoriented objectorientation
objectoriented programming language redirects list objectoriented programming languages list objectoriented programming languages


programming paradigms




action
agentoriented
arrayoriented
automatabased
concept
concurrent computing

relativistic programming


datadriven
declarative contrast imperative

constraint

constraint logic

concurrent constraint logic




dataflow

flowbased
celloriented spreadsheets
reactive


functional

functional logic
purely functional


logic

abductive logic
answer
concurrent logic
functional logic
inductive logic




dynamic
enduser programming
eventdriven

serviceoriented
timedriven


expressionoriented
featureoriented
functionlevel contrast valuelevel
generic
imperative contrast declarative

literate
procedural


languageoriented

natural language programming
disciplinespecific
domainspecific
grammaroriented

dialecting


intentional


metaprogramming

automatic

inductive programming


reflective

attributeoriented


homoiconic
macro
template

policybased




nonstructured contrast structured

array


nondeterministic
parallel computing

processoriented


pointfree style

concatenative


probabilistic
semantic
structured contrast nonstructured

blockstructured
modular contrast monolithic
objectoriented

actorbased
classbased
concurrent
prototypebased
separation concerns

aspectoriented
roleoriented
subjectoriented




recursive


valuelevel contrast functionlevel
quantum programming















objectoriented programming programming paradigm based concept objects contain data form fields often known attributes code form procedures often known methods feature objects objects procedures access often modify data fields object associated objects notion self computer programs designed making objects interact another12 significant diversity languages popular ones classbased meaning objects instances classes typically also determine type
many widely used programming languages object pascal java python multiparadigm programming languages support objectoriented programming greater lesser degree typically combination imperative procedural programming significant objectoriented languages include java python ruby perl object pascal objectivec dart swift scala common lisp smalltalk



contents


features

shared nonoop predecessor languages
objects classes
classbased versus prototypebased
dynamic dispatchmessage passing
encapsulation
composition inheritance delegation
polymorphism
open recursion


history
languages

dynamic languages
network protocol


design patterns

inheritance behavioral subtyping
gang four design patterns
objectorientation databases
realworld modeling relationships
control flow
responsibility datadriven design
solid grasp guidelines


criticism
formal semantics
also

systems
modeling languages


references
reading
external links



featuresedit
objectoriented programming uses objects associated techniques structures supported directly languages claim support features listed however common among languages considered strongly class objectoriented multiparadigm support notable exceptions mentioned3456
also comparison programming languages objectoriented programming list objectoriented programming terms
shared nonoop predecessor languagesedit

variables store information formatted small number builtin data types like integers alphanumeric characters include data structures like strings lists hash tables either builtin result combining variables using memory pointers
procedures also known functions methods routines subroutines take input generate output manipulate data modern languages include structured programming constructs like loops conditionals

modular programming support provides ability group procedures files modules organizational purposes modules namespaced code module accidentally confused procedure variable name another file module
objects classesedit
languages support objectoriented programming typically inheritance code reuse extensibility form either classes prototypes classes support main concepts

classes definitions data format available procedures given type class object also contain data procedures known class methods classes contain data members member functions
objects instances classes

objects sometimes correspond things found real world example graphics program objects circle square menu online shopping system might objects shopping cart customer product7 sometimes objects represent abstract entities like object represents open file object provides service translating measurements customary metric


objectoriented programming classes objects whole programming paradigm based around objects data structures contain data fields methods essential understand using classes organize bunch unrelated methods together object orientation

junade mastering design patterns8
object said instance particular class example object name field mary might instance class employee procedures objectoriented programming known methods variables also known fields members attributes properties leads following terms

class variables belong class whole copy
instance variables attributes data belongs individual objects every object copy
member variables refers class instance variables defined particular class
class methods belong class whole access class variables inputs procedure call
instance methods belong individual objects access instance variables specific object called inputs class variables

objects accessed somewhat like variables complex internal structure many languages effectively pointers serving actual references single instance said object memory within heap stack provide layer abstraction used separate internal external code external code object calling specific instance method certain input parameters read instance variable write instance variable objects created calling special type method class known constructor program create many instances class runs operate independently easy procedures used different sets data
objectoriented programming uses classes sometimes called classbased programming prototypebased programming typically classes result significantly different analogous terminology used define concepts object instance
languages classes objects composed using concepts like traits mixins
classbased versus prototypebasededit
classbased languages classes defined beforehand objects instantiated based classes objects apple orange instantiated class fruit inherently fruits guaranteed handle programmer expect existence attributes color sugar content ripe
prototypebased languages objects primary entities classes even exist prototype object another object object linked every object prototype link objects created based already existing objects chosen prototype call different objects apple orange fruit object fruit exists apple orange fruit prototype idea fruit class doesnt exist explicitely equivalence class objects sharing prototype attributes methods prototype delegated objects equivalence class defined prototype attributes methods owned individually object shared objects equivalence class attributes sugar content unexpectedly present apple single inheritance implemented prototype
dynamic dispatchmessage passingedit
responsibility object external code select procedural code execute response method call typically looking method time table associated object feature known dynamic dispatch distinguishes object abstract data type module fixed static implementation operations instances multiple methods might given name known multiple dispatch
method call also known message passing conceptualized message name method input parameters passed object dispatch
encapsulationedit
encapsulation objectoriented programming concept binds together data functions manipulate data keeps safe outside interference misuse data encapsulation important concept data hiding
class allow calling code access internal object data permits access methods strong form abstraction information hiding known encapsulation languages java example classes enforce access restrictions explicitly example denoting internal data private keyword designating methods intended code outside class public keyword methods also designed public private intermediate levels protected allows access class subclasses objects different class languages like python enforced convention example private methods names start underscore encapsulation prevents external code concerned internal workings object facilitates code refactoring example allowing author class change objects class represent data internally without changing external code long public method calls work also encourages programmers code concerned certain data class organizes easy comprehension programmers encapsulation technique encourages decoupling
composition inheritance delegationedit
objects contain objects instance variables known object composition example object employee class might contain point object address class addition instance variables like firstname position object composition used represent hasa relationships every employee address every employee object place store address object
languages support classes almost always support inheritance allows classes arranged hierarchy represents isatypeof relationships example class employee might inherit class person data methods available parent class also appear child class names example class person might define variables firstname lastname method makefullname also available class employee might variables position salary technique allows easy reuse procedures data definitions addition potentially mirroring realworld relationships intuitive rather utilizing database tables programming subroutines developer utilizes objects user familiar objects application domain9
subclasses override methods defined superclasses multiple inheritance allowed languages though make resolving overrides complicated languages special support mixins though language multiple inheritance mixin simply class represent isatypeof relationship mixins typically used methods multiple classes example class unicodeconversionmixin might provide method unicodetoascii included class filereader class webpagescraper dont share common parent
abstract classes cannot instantiated objects exist purpose inheritance concrete classes instantiated java final keyword used prevent class subclassed
doctrine composition inheritance advocates implementing hasa relationships using composition instead inheritance example instead inheriting class person class employee could give employee object internal person object opportunity hide external code even class person many public attributes methods languages like support inheritance
openclosed principle advocates classes functions open extension closed modification
delegation another language feature used alternative inheritance
polymorphismedit
subtyping form polymorphism calling code agnostic whether object belongs parent class descendants example function might call makefullname object work whether object class person class employee another type abstraction simplifies code external class hierarchy enables strong separation concerns
open recursionedit
languages support open recursion object methods call methods object including typically using special variable keyword called self variable latebound allows method defined class invoke another method defined later subclass thereof
historyedit
terminology invoking objects oriented modern sense objectoriented programming made first appearance late 1950s early 1960s environment artificial intelligence group early 1960 object could refer identified items lisp atoms properties attributes1011 alan later cite detailed understanding lisp internals strong influence thinking 196612 another early example sketchpad created ivan sutherland 1960–61 glossary 1963 technical report based dissertation sketchpad sutherland defined notions object instance class concept covered master definition albeit specialized graphical interaction13 also algol version aed0 established direct link data structures plexes dialect procedures prefiguring later termed messages methods member functions1415
formal programming concept objects introduced mid1960s simula major revision simula programming language designed discrete event simulation created olejohan dahl kristen nygaard norwegian computing center oslo16not citation givencitation needed17not citation givencitation needed181920
simula influenced simscript tony hoares proposed record classes1421 simula introduced notion classes instances objects well subclasses virtual procedures coroutines discrete event simulation part explicit programming paradigm language also used automatic garbage collection invented earlier functional programming language lisp simula used physical modeling models study improve movement ships content cargo ports ideas simula influenced many later languages including smalltalk derivatives lisp clos object pascal
smalltalk language developed xerox parc alan others 1970s introduced term objectoriented programming represent pervasive objects messages basis computation smalltalk creators influenced ideas introduced simula smalltalk designed fully dynamic system classes could created modified dynamically rather statically simula 6722 smalltalk introduced wider audience august 1981 issue byte magazine
1970s kays smalltalk work influenced lisp community incorporate objectbased techniques introduced developers lisp machine experimentation various extensions lisp loops flavors introducing multiple inheritance mixins eventually common lisp object system integrates functional programming objectoriented programming allows extension metaobject protocol 1980s attempts design processor architectures included hardware support objects memory successful examples include intel iapx linn smart rekursiv
1985 bertrand meyer produced first design eiffel language focused software quality eiffel among purely objectoriented languages differs sense language programming language notation supporting entire software lifecycle meyer described eiffel software development method based small number ideas software engineering computer science objectoriented software construction essential quality focus eiffel meyers reliability mechanism design contract integral part method language
objectoriented programming developed dominant programming methodology early 1990s programming languages supporting techniques became widely available included visual foxpro 30232425 delphicitation needed dominance enhanced rising popularity graphical user interfaces rely heavily upon objectoriented programming techniques example closely related dynamic library language found cocoa frameworks written objectivec objectoriented dynamic messaging extension based smalltalk toolkits also enhanced popularity eventdriven programming although concept limited
zürich niklaus wirth colleagues also investigating topics data abstraction modular programming although common 1960s earlier modula2 1978 included succeeding design oberon included distinctive approach object orientation classes
objectoriented features added many previously existing languages including basic fortran pascal cobol adding features languages initially designed often problems compatibility maintainability code
recently number languages emerged primarily objectoriented also compatible procedural methodology languages python ruby probably commercially important recent objectoriented languages java developed microsystems well visual basicnet vbnet designed microsofts platform frameworks shows benefit using creating abstraction implementation vbnet support crosslanguage inheritance allowing classes defined language subclass classes defined language
languagesedit






section cite sources please help improve section adding citations reliable sources unsourced material challenged removed august 2009 learn remove template message



also list objectoriented programming languages
simula 1967 generally accepted first language primary features objectoriented language created making simulation programs came called objects important information representation smalltalk 1972 1980 another early example much theory developed concerning degree object orientation following distinctions made

languages called pure languages everything treated consistently object primitives characters punctuation whole classes prototypes blocks modules designed specifically facilitate even enforce methods examples python ruby scala smalltalk eiffel emerald27 jade self
languages designed mainly programming procedural elements examples java delphiobject pascal vbnet
languages historically procedural languages extended features examples perl visual basic derived basic matlab cobol 2002 fortran 2003 abap pascal
languages features objects classes methods inheritance distinctly original form examples oberon oberon1 oberon2
languages abstract data type support used resemble programming without features objectorientation includes objectbased prototypebased languages examples javascript modula2
chameleon languages support multiple paradigms including stands among tcloo hybrid object system supports prototypebased programming classbased

dynamic languagesedit
recent years objectoriented programming become especially popular dynamic programming languages python powershell ruby groovy dynamic languages built principles perl adding objectoriented features since perl coldfusion since version
document object model html xhtml documents internet bindings popular javascriptecmascript language javascript perhaps best known prototypebased programming language employs cloning prototypes rather inheriting class contrast classbased programming another scripting language takes approach
network protocoledit
messages flow computers request services clientserver environment designed linearizations objects defined class objects known client server example simple linearized object would consist length field code point identifying class data value complex example would command consisting length code point command values consisting linearized objects representing commands parameters command must directed server object whose class superclass recognizes command able provide requested service clients servers best modeled complex objectoriented structures distributed data management architecture took approach used class objects define objects four levels formal hierarchy

fields defining data values form messages length codepoint data values
objects collections objects similar would found smalltalk program messages parameters
managers similar as400 objects directory files files consisting metadata records managers conceptually provide memory processing resources contained objects
client server consisting managers necessary implement full processing environment supporting aspects directory services security concurrency control

initial version defined distributed file services later extended foundation distributed relational database architecture drda
design patternsedit
challenges objectoriented design addressed several methodologies common known design patterns codified gamma broadly term design patterns used refer general repeatable solution commonly occurring problem software design commonly occurring problems implications solutions particular objectoriented development
inheritance behavioral subtypingedit
also objectoriented design
intuitive assume inheritance creates semantic relationship thus infer objects instantiated subclasses always safely used instead instantiated superclass intuition unfortunately false languages particular allow mutable objects subtype polymorphism enforced type checker languages mutable objects cannot guarantee behavioral subtyping context behavioral subtyping undecidable general cannot implemented program compiler class object hierarchies must carefully designed considering possible incorrect uses cannot detected syntactically issue known liskov substitution principle
gang four design patternsedit
main article design pattern computer science
design patterns elements reusable objectoriented software influential book published 1995 erich gamma richard helm ralph johnson john vlissides often referred humorously gang four along exploring capabilities pitfalls objectoriented programming describes common programming problems patterns solving april 2007 book 36th printing
book describes following patterns

creational patterns factory method pattern abstract factory pattern singleton pattern builder pattern prototype pattern
structural patterns adapter pattern bridge pattern composite pattern decorator pattern facade pattern flyweight pattern proxy pattern
behavioral patterns chainofresponsibility pattern command pattern interpreter pattern iterator pattern mediator pattern memento pattern observer pattern state pattern strategy pattern template method pattern visitor pattern

objectorientation databasesedit
main articles objectrelational impedance mismatch objectrelational mapping object database
objectoriented programming relational database management systems rdbmss extremely common software todayupdate since relational databases dont store objects directly though rdbmss objectoriented features approximate general need bridge worlds problem bridging objectoriented programming accesses data patterns relational databases known objectrelational impedance mismatch number approaches cope problem general solution without downsides28 common approaches objectrelational mapping found languages visual foxpro libraries java data objects ruby rails activerecord
also object databases used replace rdbmss technically commercially successful rdbmss
realworld modeling relationshipsedit
used associate realworld objects processes digital counterparts however everyone agrees facilitates direct realworld mapping criticism section realworld mapping even worthy goal bertrand meyer argues objectoriented software construction29 program model world model part world reality cousin twice removed time principal limitations noted30 example circleellipse problem difficult handle using oops concept inheritance
however niklaus wirth popularized adage known wirths software getting slower rapidly hardware becomes faster said paper good ideas looking glass paradigm closely reflects structure systems real world therefore well suited model complex systems complex behaviours31 contrast kiss principle
steve yegge others noted natural languages lack approach strictly prioritizing things objectsnouns actions methodsverbs32 problem cause suffer convoluted solutions procedural programming33
control flowedit
developed increase reusability maintainability source code34 transparent representation control flow priority meant handled compiler increasing relevance parallel hardware multithreaded coding developing transparent control flow becomes important something hard achieve oop35363738
responsibility datadriven designedit
responsibilitydriven design defines classes terms contract class defined around responsibility information shares contrasted wirfsbrock wilkerson datadriven design classes defined around datastructures must held authors hold responsibilitydriven design preferable
solid grasp guidelinesedit
solid mnemonic invented michael feathers stands advocates five programming practices

single responsibility principle
openclosed principle
liskov substitution principle
interface segregation principle
dependency inversion principle

grasp general responsibility assignment software patterns another guidelines advocated craig larman
criticismedit
paradigm criticised number reasons including meeting stated goals reusability modularity3940 overemphasizing aspect software design modeling dataobjects expense important aspects computationalgorithms4142
luca cardelli claimed code intrinsically less efficient procedural code take longer compile languages extremely poor modularity properties respect class extension modification tend extremely complex39 latter point reiterated armstrong principal inventor erlang quoted saying40

problem objectoriented languages theyve implicit environment carry around wanted banana gorilla holding banana entire jungle

study potok shown significant difference productivity procedural approaches43
christopher date stated critical comparison technologies relational particular difficult lack agreedupon rigorous definition oop44 however date darwen proposed theoretical foundation uses kind customizable type system support rdbms45
article lawrence krubner claimed compared languages lisp dialects functional languages languages unique strengths inflict heavy burden unneeded complexity46
alexander stepanov compares object orientation unfavourably generic programming41

find technically unsound attempts decompose world terms interfaces vary single type deal real problems need multisorted algebras families interfaces span multiple types find philosophically unsound claims everything object even true interesting saying everything object saying nothing

paul graham suggested oops popularity within large companies large frequently changing groups mediocre programmers according graham discipline imposed prevents programmer much damage47
steve yegge noted opposed functional programming48

object oriented programming puts nouns first foremost would lengths part speech pedestal kind concept take precedence another suddenly made verbs less important actually think strangely skewed perspective

rich hickey creator clojure described object systems overly simplistic models real world emphasized inability model time properly getting increasingly problematic software systems become concurrent42
eric raymond unix programmer opensource software advocate critical claims present objectoriented programming true solution written objectoriented programming languages tend encourage thickly layered programs destroy transparency49 raymond compares unfavourably approach taken unix programming language49
pike programmer involved creation utf8 called objectoriented programming roman numerals computing50 said languages frequently shift focus data structures algorithms types51 furthermore cites instance java professor whose idiomatic solution problem create classes rather simply lookup table52
formal semanticsedit
also formal semantics programming languages
objects runtime entities objectoriented system represent person place bank account table data item program handle
several attempts formalizing concepts used objectoriented programming following concepts constructs used interpretations concepts

algebraic data types53
abstract data types existential types allow definition modules support dynamic dispatch
recursive types
encapsulated state
inheritance
records basis understanding objects function literals stored fields like functionalprogramming languages actual calculi need considerably complex incorporate essential features several extensions system deal mutable objects studied54 allow subtype polymorphism parametric polymorphism generics

attempts find consensus definition theory behind objects proven successful however abadi cardelli theory objects54 formal definitions many concepts constructs often diverge widely example definitions focus mental activities program structuring simpler definitions using data structures arrays contain functions pointers maps syntactic scoping sugar inheritance performed cloning maps sometimes called prototyping
alsoedit


computer programming portal



comparison programming languages objectoriented programming
comparison programming paradigms
componentbased software engineering
design contract
object association
object database
object modeling language
objectoriented analysis design
objectrelational impedance mismatch third manifesto
objectrelational mapping

systemsedit

cades
common object request broker architecture corba
distributed component object model
distributed data management architecture
jeroo

modeling languagesedit

idef4
interface description language
lepus3


referencesedit


kindler krivy 2011 objectoriented simulation systems sophisticated control international journal general systems 313–343
lewis john loftus william 2008 java software solutions foundations programming design pearson education isbn 0321532058 section objectoriented programming
deborah armstrong quarks objectoriented development survey nearly years computing literature identified number fundamental concepts found large majority definitions descending order popularity inheritance object class encapsulation method message passing polymorphism abstraction
john mitchell concepts programming languages cambridge university press 2003 isbn 0521780985 p278 lists dynamic dispatch abstraction subtype polymorphism inheritance
michael scott programming language pragmatics edition morgan kaufmann 2006 isbn 0126339511 lists encapsulation inheritance dynamic dispatch
pierce benjamin 2002 types programming languages press isbn 0262162091 section objectoriented programming lists dynamic dispatch encapsulation multimethods multiple dispatch subtype polymorphism inheritance delegation open recursion thisself
booch grady 1986 software engineering addison wesley isbn 9780805306088 perhaps greatest strength objectoriented approach development offers mechanism captures model real world
junade mastering design patterns packt books birmingham england packt publishing limited isbn 9781785887130 retrieved december 2017
jacobsen ivar magnus christerson patrik jonsson gunnar overgaard 1992 object oriented software engineering addisonwesley press 43–69 isbn 0201544350
mccarthy brayton edwards hodes luckham maling park russell march 1960 lisp programmers manual boston massachusetts artificial intelligence group computation center research laboratory archived original july 2010 local patois association lists atomic symbols also referred property lists atomic symbols sometimes called objects
mccarthy john abrahams paul edwards daniel hart swapnil levin michael 1962 lisp programmers manual press isbn 0262130114 object synonym atomic symbol
alan meaning objectoriented programming 2003 retrieved february 2010
sutherland january 1963 sketchpad manmachine graphical communication system technical report lincoln laboratory massachusetts institute technology defense technical information center stinetdticmil retrieved november 2007
development simula languages kristen nygaard olejohan dahl p254 uniklacat
ross doug first software engineering language lcsai timeline computer science artificial intelligence laboratory retrieved 2010
dahl johan 2004 birth object orientation simula languages doi10100797835403999333 retrieved june 2016
holmevik rune 1994 compiling simula historical study technological genesis ieee annals history computing 25–37 doi10110985329756 retrieved 2010
wilson leslie robert clark 2001 comparative programming languages addisonwesley isbn 9780201710120 simula based algol important addition class concept possible declare class generate objects class name objects form hierarchical structure class declarations
wilson leslie robert clark 2001 comparative programming languages addisonwesley isbn 9780201710120 impact simula design programming languages large original objectoriented language class concept taken used many later languages smalltalk eiffel java
henri dick grune 1994 programming language essentials addisonwesley isbn 0201631792 simula first language class concept
hoare 1965 record handling algol bulletin 39–69 doi10114510610321061041
alan early history smalltalk archived original july 2008 retrieved september 2007
1995 june visual foxpro foxpro evolves procedural language objectoriented language visual foxpro introduces database container seamless clientserver capabilities support activex technologies automation null support summary releases
foxpro history site foxprohistoryorg
1995 reviewers guide visual foxpro dfpugde
httpsbooksgooglecoukbooksidmhmqfsbtxsacpgpa16lpgpa16
emerald programming language 20110226
neward june 2006 vietnam computer science interoperability happens retrieved june 2010
meyer second edition
mtrofimov ooop third solution open first class 1993 issue
wirth nicklaus 2006 good ideas looking glass computer 28–39 retrieved 20161002
yegge steve march 2006 execution kingdom nouns steveyeggeblogspotcom retrieved july 2010
boronczyk timothy june 2009 whats wrong zaemisblogspotcom retrieved july 2010
ambler scott january 1998 realistic look objectoriented reuse wwwdrdobbscom retrieved july 2010
shelly asaf august 2008 flaws object oriented modeling intel software network retrieved july 2010
james justin october 2007 multithreading verb noun techrepubliccom retrieved july 2010
shelly asaf august 2008 multicore programming multiprocessing visual class design guidelines member functions supportmicrosoftcom retrieved july 2010
robert harper april 2011 thoughts teaching existential type blog retrieved december 2011
cardelli luca 1996 engineering properties objectoriented languages comput surv doi101145242224242415 issn 03600300 retrieved april 2010
armstrong coders work reflections craft programming peter seibel codersatworkcom accessed november 2009
stepanov alexander stlport interview stepanov retrieved april 2010
rich hickey languages summit 2009 keynote november 2009
potok thomas mladen vouk andy rindos 1999 productivity analysis objectoriented software developed commercial environment software practice experience 833–847 doi101002sici1097024x1999082910833aidspe25830co2p retrieved april 2010
date introduction database systems 6thed page
date hugh darwen foundation future database systems third manifesto edition
krubner lawrence object oriented programming expensive disaster must smashcompanycom retrieved october 2014
graham paul isnt especially objectoriented paulgrahamcom retrieved november 2009
steveys blog rants
eric raymond 2003 unix programming unix objectoriented languages retrieved 20140806
pike 20040302 9fans threads sewing badges honor onto kernel composplan9 mailing list retrieved 20161117
pike 20120625 less exponentially retrieved 20161001
pike 20121114 years page retrieved 20161001
poll erik subtyping inheritance categorical datatypes retrieved june 2011
abadi martin cardelli luca 1996 theory objects springerverlag york isbn 0387947752 retrieved april 2010


readingedit

abadi martin luca cardelli 1998 theory objects springer verlag isbn 0387947752
abelson harold gerald sussman 1997 structure interpretation computer programs press isbn 0262011530
armstrong deborah february 2006 quarks objectoriented development communications 123–128 doi10114511130341113040 issn 00010782 retrieved august 2006
booch grady 1997 objectoriented analysis design applications addisonwesley isbn 0805353402
eeles peter oliver sims 1998 building business objects john wiley sons isbn 0471191760
gamma erich richard helm ralph johnson john vlissides 1995 design patterns elements reusable object oriented software addisonwesley isbn 0201633612
harmon paul william morrissey 1996 object technology casebook lessons awardwinning business applications john wiley sons isbn 0471147176
jacobson ivar 1992 objectoriented software engineering casedriven approach addisonwesley isbn 0201544350
alan early history smalltalk
meyer bertrand 1997 objectoriented software construction prentice hall isbn 0136291554
pecinovsky rudolf 2013 learn object oriented thinking programming bruckner publishing isbn 9788090466180
rumbaugh james michael blaha william premerlani frederick eddy william lorensen 1991 objectoriented modeling design prentice hall isbn 0136298419
schach stephen 2006 objectoriented classical software engineering seventh edition mcgrawhill isbn 0073191264
schreiner axeltobias 1993 object oriented programming ansic hanser hdl18508544 isbn 3446174265
taylor david 1992 objectoriented information systems planning implementation john wiley sons isbn 0471543640
weisfeld matt 2009 objectoriented thought process third edition addisonwesley isbn 0672330164
west david 2004 object thinking developer reference microsoft press isbn 0735619654

external linksedit



wikiquote quotations related objectorientation





wikiversity learning resources objectoriented programming
topicobjectoriented programming






wikibooks book topic object oriented programming



object oriented programming concepts java complete tutorial
objectoriented programming curlie based dmoz
introduction object oriented programming concepts nirosh
discussion flaws
concepts java tutorials
science snake empirical software engineering thoughts software systems engineering sommerville 2011829












types programming languages






actorbased
array
aspectoriented
classbased
concatenative
concurrent
datastructured
dataflow
declarative
domainspecific
dynamic
esoteric
eventdriven
extensible
functional
imperative
logic
macro
metaprogramming
multiparadigm
objectbased
objectoriented
pipeline
procedural
prototypebased
reflective
rulebased
scripting
synchronous
templating








assembly
compiled
interpreted
machine








lowlevel
highlevel
highlevel








first generation
second generation
third generation
fourth generation
fifth generation








nonenglishbased
visual

















software engineering



fields



computer programming
requirements engineering
software deployment
software design
software maintenance
software testing
systems analysis
formal methods





concepts



data modeling
enterprise architecture
functional specification
modeling language
orthogonality
programming paradigm
software
software archaeology
software architecture
software configuration management
software development methodology
software development process
software quality
software quality assurance
software verification validation
structured analysis





orientations



agile
aspectoriented
object orientation
ontology
service orientation
sdlc





models




developmental



agile

executable
incremental model
iterative model
prototype model


scrum
spiral model
vmodel
waterfall model










spice
cmmi
data model
model
function model
information model
metamodeling
object model
systems model
view model





languages



idef


sysml









software
engineers




victor basili
kent beck
grady booch
fred brooks
barry boehm
peter chen
danese cooper
ward cunningham
demarco
edsger dijkstra
delores etter
martin fowler
adele goldstine
margaret hamilton
hoare
lois haibt
mary jean harrold
grace hopper
watts humphrey
michael jackson
ivar jacobson
alan
nancy leveson
stephen mellor
bertrand meyer
david parnas
trygve reenskaug
winston royce
james rumbaugh
mary shaw
peri tarr
elaine weyuker
niklaus wirth
edward yourdon





related fields



computer science
computer engineering
project management
risk management
systems engineering








category
commons









authority control



lccn sh87007503
42339479
cb12115131k data
00937980
xx537453











retrieved httpsenwikipediaorgwindexphptitleobjectorientedprogrammingoldid815054103 categories objectoriented programmingprogramming paradigmsnorwegian inventionshidden categories articles failed verificationarticles failed verification june 2016all articles unsourced statementsarticles unsourced statements june 2016articles unsourced statements february 2010articles needing additional references august 2009all articles needing additional referencesarticles containing potentially dated statements 2006all articles containing potentially dated statementsarticles dmoz linksuse dates september 2010wikipedia articles lccn identifierswikipedia articles identifierswikipedia articles identifiers
