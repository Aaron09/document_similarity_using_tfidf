





article needs additional citations verification please help improve article adding citations reliable sources unsourced material challenged removed january 2013 learn remove template message





software development


core activities




processes
requirements
design
engineering
construction
testing
debugging
deployment
maintenance




paradigms models




agile
cleanroom
incremental
prototyping
spiral
waterfall




methodologies frameworks




devops
dsdm


kanban
lean




safe
scrum
semat


vmodel





supporting disciplines




configuration management
documentation
software quality assurance
project management
user experience




practices




atdd






standup





tools




compiler
debugger
profiler
designer
modeling

build automation
release automation
infrastructure code
testing




standards boks




cmmi
ieee standards
9001
isoiec standards
swebok
pmbok
babok















software design process agent creates specification software artifact intended accomplish goals using primitive components subject constraints1 software design refer either activity involved conceptualizing framing implementing commissioning ultimately modifying complex systems activity following requirements specification programming stylized software engineering process2
software design usually involves problem solving planning software solution includes lowlevel component algorithm design highlevel architecture design



contents


overview
design concepts
design considerations
modeling language
design patterns
technique
usage
also
references



overviewedit
software design process implementing software solutions sets problems main components software design software requirements analysis part software development process lists specifications used software engineering software semiautomated user centered software design involve user experience design yielding storyboard help determine specifications software completely automated meaning user user interface software design simple flow chart text describing planned sequence events also semistandard methods like unified modeling language fundamental modeling concepts either case documentation plan usually product design furthermore software design platformindependent platformspecific depending upon availability technology used design
main difference software analysis design output software analysis consists smaller problems solve additionally analysis designed differently across different team members groups contrast design focuses capabilities thus multiple designs problem exist depending environment design often varies whether created reliable frameworks implemented suitable design patterns design examples include operation systems webpages mobile devices even cloud computing paradigm
software design process model design process sequence steps enables designer describe aspects software building creative skill past experience sense makes good software overall commitment quality examples critical success factors competent design important note however design process always straightforward procedure design model compared architectâ€™s plans house begins representing totality thing built threedimensional rendering house slowly thing refined provide guidance constructing detail plumbing similarly design model created software provides variety different views computer software basic design principles enable software engineer navigate design process davis dav95full citation needed suggests principles software design adapted extended following list

design process suffer tunnel vision good designer consider alternative approaches judging based requirements problem resources available
design traceable analysis model single element design model often traced back multiple requirements necessary means tracking requirements satisfied design model
design reinvent wheel systems constructed using design patterns many likely encountered patterns always chosen alternative reinvention time short resources limited design time invested representing truly ideas integrating patterns already exist applicable
design minimize intellectual distance software problem exists real world structure software design whenever possible mimic structure problem domain
design exhibit uniformity integration design uniform appears fully coherent order achieve outcome rules style format defined design team design work begins design integrated care taken defining interfaces design components
design structured accommodate change design concepts discussed next section enable design achieve principle
design structured degrade gently even aberrant data events operating conditions encountered well designed software never bomb designed accommodate unusual circumstances must terminate processing graceful manner
design coding coding design even detailed procedural designs created program components level abstraction design model higher source code design decisions made coding level address small implementation details enable procedural design coded
design assessed quality created fact variety design concepts design measures available assist designer assessing quality throughout development process
design reviewed minimize conceptual semantic errors sometimes tendency focus minutiae design reviewed missing forest trees design team ensure major conceptual elements design omissions ambiguity inconsistency addressed worrying syntax design model

design conceptsedit
design concepts provide software designer foundation sophisticated methods applied fundamental design concepts evolved follows

abstraction abstraction process result generalization reducing information content concept observable phenomenon typically order retain information relevant particular purposeit representing essential features without including background details explanations
refinement process elaboration hierarchy developed decomposing macroscopic statement function stepwise fashion programming language statements reached step several instructions given program decomposed detailed instructions abstraction refinement complementary concepts
modularity software architecture divided components called modules
software architecture refers overall structure software ways structure provides conceptual integrity system good software architecture yield good return investment respect desired outcome project terms performance quality schedule cost
control hierarchy program structure represents organization program component implies hierarchy control
structural partitioning program structure divided horizontally vertically horizontal partitions define separate branches modular hierarchy major program function vertical partitioning suggests control work distributed program structure
data structure representation logical relationship among individual elements data
software procedure focuses processing module individually
information hiding modules specified designed information contained within module inaccessible modules need information

object model grady booch mentions abstraction encapsulation modularisation hierarchy fundamental software design principles3 acronym phame principles hierarchy abstraction modularisation encapsulation sometimes used refer four fundamental principles4
design considerationsedit
many aspects consider design piece software importance consideration reflect goals expectations software created meet aspects

compatibility software able operate products designed interoperability another product example piece software backwardcompatible older version
extensibility capabilities added software without major changes underlying architecture
modularity resulting software comprises well defined independent components leads better maintainability components could implemented tested isolation integrated form desired software system allows division work software development project
faulttolerance software resistant able recover component failure
maintainability measure easily fixes functional modifications accomplished high maintainability product modularity extensibility
reliability software durability software able perform required function stated conditions specified period time
reusability ability aspects preexisting software projects little modification
robustness software able operate stress tolerate unpredictable invalid input example designed resilience memory conditions
security software able withstand resist hostile acts influences
usability software user interface must usable target useraudience default values parameters must chosen good choice majority users5
performance software performs tasks within timeframe acceptable user require much memory
portability software usable across number different conditions environments
scalability software adapts well increasing data number users satisfaction

modeling languageedit
modeling language artificial language used express information knowledge systems structure defined consistent rules rules used interpretation components within structure modeling language graphical textual examples graphical modeling languages software design

architecture description language language used describe represent software architecture software system
business process modeling notation bpmn example process modeling language
express expressg 1030311 international standard generalpurpose data modeling language
extended enterprise modeling language eeml commonly used business process modeling across number layers
flowchart schematic representation algorithm stepwise process
fundamental modeling concepts modeling language softwareintensive systems
idef family modeling languages notable include idef0 functional modeling idef1x information modeling idef5 modeling ontologies
jackson structured programming method structured programming based correspondences data stream structure program structure
lepus3 objectoriented visual design description language formal specification language suitable primarily modeling large objectoriented java programs design patterns
unified modeling language general modeling language describe software structurally behaviorally graphical notation allows extension profile
alloy specification language general purpose specification language expressing complex structural constraints behavior software system provides concise language base firstorder relational logic
systems modeling language sysml generalpurpose modeling language systems engineering
serviceoriented modeling framework somf6

design patternsedit
software designer architect identify design problem visited perhaps even solved others past template pattern describing solution common problem known design pattern reuse patterns help speed software development process7
techniqueedit
difficulty using term design relation software senses source code program design program produces extent true software design refers design design edsger dijkstra referred layering semantic levels radical novelty computer programming8 donald knuth used experience writing describe futility attempting design program prior implementing

would complete failure merely specified participated fully initial implementation process implementation constantly unanticipated questions insights original specifications could improved9

usageedit
software design documentation reviewed presented allow constraints specifications even requirements adjusted prior computer programming redesign occur review programmed simulation prototype possible design software process programming without plan requirement analysis10 complex projects would considered feasible separate design prior programming allows multidisciplinary designers subject matter experts smes collaborate highly skilled programmers software useful technically sound
alsoedit



wikimedia commons media related software design



aspectoriented software development
bachelor science information technology
design rationale
interaction design
icon design
searchbased software engineering
software design description ieee 1016
software development
user experience
user interface design
zero infinity

referencesedit



ralph wand 2009 proposal formal definition design concept lyytinen loucopoulos mylopoulos robinson editors design requirements workshop lnbip 103â€“136 springerverlag doi10100797835409296666
freeman peter david hart 2004 science design softwareintensive systems communications 19â€“21 doi10114510120371012054
booch grady 2004 objectoriented analysis design applications addison wesley isbn 020189551x retrieved january 2015
suryanarayana girish november 2014 refactoring software design smells morgan kaufmann isbn 9780128013977 retrieved january 2015
carroll john 1995 scenariobased design envisioning work technology system development york john wiley sons isbn 0471076597
bell michael 2008 introduction serviceoriented modeling serviceoriented modeling service analysis design architecture wiley sons isbn 9780470141113
judith bishop design patterns power solve realworld problems books oreilly media retrieved 20120515 want speed development applications youre ready design patterns elegant accepted proven ways tackle common programming problems
dijkstra 1988 cruelty really teaching computing science retrieved 20140110
knuth donald 1989 notes errors
ralph wand proposal formal definition design concept lyytinen loucopoulos mylopoulos robinson design requirements engineering tenyear perspective springerverlag 2009 103136



roger pressman software engineering practitionerâ€™s approach mcgrawhill isbn 0073655783











major fields computer science




note template roughly follows 2012 computing classification system



hardware



printed circuit board
peripheral
integrated circuit
verylargescale integration
energy consumption
electronic design automation





computer systems
organization



computer architecture
embedded system
realtime computing
dependability





networks



network architecture
network protocol
network components
network scheduler
network performance evaluation
network service





software organization



interpreter
middleware
virtual machine
operating system
software quality





software notations
tools



programming paradigm
programming language
compiler
domainspecific language
modeling language
software framework
integrated development environment
software configuration management
software library
software repository





software development



software development process
requirements analysis
software design
software construction
software deployment
software maintenance
programming team
opensource model





theory computation



model computation
formal language
automata theory
computational complexity theory
logic
semantics





algorithms



algorithm design
analysis algorithms
randomized algorithm
computational geometry





mathematics
computing



discrete mathematics
probability
statistics
mathematical software
information theory
mathematical analysis
numerical analysis





information
systems



database management system
information storage systems
enterprise information system
social information systems
geographic information system
decision support system
process control system
multimedia information system
data mining
digital library
computing platform
digital marketing
world wide
information retrieval





security



cryptography
formal methods
security services
intrusion detection system
hardware security
network security
information security
application security





humanâ€“computer
interaction



interaction design
social computing
ubiquitous computing
visualization
accessibility





concurrency



concurrent computing
parallel computing
distributed computing
multithreading
multiprocessing





artificial
intelligence



natural language processing
knowledge representation reasoning
computer vision
automated planning scheduling
search methodology
control method
philosophy artificial intelligence
distributed artificial intelligence





machine learning



supervised learning
unsupervised learning
reinforcement learning
multitask learning
crossvalidation





graphics



animation
rendering
image manipulation
graphics processing unit
mixed reality
virtual reality
image compression
solid modeling





applied
computing



ecommerce
enterprise software
computational mathematics
computational physics
computational chemistry
computational biology
computational social science
computational engineering
computational healthcare
digital
electronic publishing
cyberwarfare
electronic voting
video game
word processing
operations research
educational technology
document management








book
category
portal
wikiproject
commons

















software engineering



fields



computer programming
requirements engineering
software deployment
software design
software maintenance
software testing
systems analysis
formal methods





concepts



data modeling
enterprise architecture
functional specification
modeling language
orthogonality
programming paradigm
software
software archaeology
software architecture
software configuration management
software development methodology
software development process
software quality
software quality assurance
software verification validation
structured analysis





orientations



agile
aspectoriented
object orientation
ontology
service orientation
sdlc





models




developmental



agile

executable
incremental model
iterative model
prototype model


scrum
spiral model
vmodel
waterfall model










spice
cmmi
data model
model
function model
information model
metamodeling
object model
systems model
view model





languages



idef


sysml









software
engineers




victor basili
kent beck
grady booch
fred brooks
barry boehm
peter chen
danese cooper
ward cunningham
demarco
edsger dijkstra
delores etter
martin fowler
adele goldstine
margaret hamilton
hoare
lois haibt
mary jean harrold
grace hopper
watts humphrey
michael jackson
ivar jacobson
alan
nancy leveson
stephen mellor
bertrand meyer
david parnas
trygve reenskaug
winston royce
james rumbaugh
mary shaw
peri tarr
elaine weyuker
niklaus wirth
edward yourdon





related fields



computer science
computer engineering
project management
risk management
systems engineering








category
commons

















design






outline
portal
designer










disciplines







communication
design



advertising
book design
corporate design
exhibit design
film title design
graphic design

motion
postage stamp design
print design


illustration
information design
instructional design
news design
photography
retail design
signage traffic sign design
typography type design
video design
visual merchandising





environmental
design



architecture
architectural lighting design
building design

passive solar


ecological design
environmental impact design
garden design

computeraided


healthy community design
hotel design
interior architecture
interior design




keyline design
landscape architecture

sustainable


landscape design
spatial design
urban design





industrial
design



automotive design
automotive suspension design
design
corrugated design
electric guitar design
furniture design

sustainable


hardware interface design
motorcycle design
packaging labeling
photographic lens design
product design
production design
sensory design
service design





interaction
design



experience design




game design

level design
video game design


hardware interface design
icon design
immersive design
information design
sonic interaction design
user experience design
user interface design
design






applied arts



public design
ceramic glass design
fashion design

costume design
jewelry design


floral design
game design
property design
scenic design
sound design
stageset lighting design
textile design






design
engineering



algorithm design
boiler design
conceptual design
database design
drug design
electrical system design
experimental design
filter design
design
integrated circuit design

circuit design
physical design
power network design


mechanism design
nuclear weapon design
nucleic acid design
organization design
process design
processor design
protein design
research design
social design
software design
spacecraft design
strategic design
systems design
















approaches






activitycentered
adaptive
affective
brainstorming
committee
contract
theory
closure
codesign
conceptoriented
configuration
contextual
continuous
cradletocradle
creative problemsolving
creativity techniques
critical

design fiction


defensive
designâ€“bidâ€“build
designâ€“build

architectled


domaindriven
ecodesign
energy neutral
engineering design process

probabilistic design


errortolerant
faulttolerant
frameworkoriented
assembly
behaviour change
manufacturability
sigma
testing

functional
generative
geodesign
highlevel
integrated
integrated topside
intelligencebased
iterative
kiss principle
lowlevel
metadesign
mind mapping
modular
wave
objectoriented
open
parametric
participatory
platformbased
policybased
processcentered
public interest
rational
regenerative
reliability engineering
researchbased
responsibilitydriven

safelife
sustainable
systemic




tableless
theory constraints
topdown bottomup
transformation
transgenerational
triz
universal

design


usagecentered
usecentered
usercentered

empathic


user innovation
valuedriven
value sensitive

privacy




design choice
computing
controls
flow
leadership
management
marker
methods
pattern
research
science
strategy
theory
thinking
















tools
intellectual property
organizations
awards










tools




architectural model
blueprint
comprehensive layout


caid
virtual home design software


cautod
design quality indicator
electronic design automation
flowchart
mockup
product design specification
prototype
sketch
storyboard
technical drawing
design program
website wireframe





intellectual
property



community design
design around
design patent
fashion design copyright
geschmacksmuster
industrial design rights

european union







organizations



aiga
chartered society designers
design industries association
design council
international forum design
design society
design research society





awards



european design award
german design award
good design award chicago
good design award japan
graphex
product design award
james dyson award
prince philip designers prize
















related topics






aesthetics
agile
concept
creative industries
cultural icon
design
enterprise architecture
futures studies
innovation management
intelligent design
lean startup
product development
ooda loop
philosophy design
process simulation
slow design
steam fields
unintelligent design
visualization
wicked problem


design brief
change
classic
director
education
elements principles
engineer
firm
history
knowledge
language
life
load
museum
paradigm
rationale
review
specification
studio
technology











commons
wikibooks
wikinews
wikiquote
wikisource
wiktionary











retrieved httpsenwikipediaorgwindexphptitlesoftwaredesignoldid818154743 categories computer occupationssoftware designhidden categories articles needing additional references january 2013all articles needing additional referencesarticles needing detailed references
